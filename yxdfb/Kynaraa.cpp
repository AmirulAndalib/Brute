# 1 "yxdfb/Kynaraa.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 482 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "yxdfb/Kynaraa.cpp" 2
# 16 "yxdfb/Kynaraa.cpp"
# 1 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 1
# 11 "/data/data/com.termux/files/usr/include/python3.12/Python.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/patchlevel.h" 1
# 12 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pyconfig.h" 1
# 13 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pymacconfig.h" 1
# 14 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 23 "/data/data/com.termux/files/usr/include/python3.12/Python.h"
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 1 3
# 87 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__config" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__config" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__config_site" 1 3
# 44 "/data/data/com.termux/files/usr/include/c++/v1/__config_site" 3
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wmacro-redefined"






#pragma clang diagnostic pop
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__config" 2 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__config" 3
# 458 "/data/data/com.termux/files/usr/include/c++/v1/__config" 3
# 1 "/data/data/com.termux/files/usr/include/features.h" 1 3 4
# 36 "/data/data/com.termux/files/usr/include/features.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 1 3 4
# 335 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/android/versioning.h" 1 3 4
# 336 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/android/api-level.h" 1 3 4
# 48 "/data/data/com.termux/files/usr/include/android/api-level.h" 3 4
extern "C" {
# 194 "/data/data/com.termux/files/usr/include/android/api-level.h" 3 4
int android_get_application_target_sdk_version() __attribute__((__availability__(android,strict,introduced=24 )));







# 1 "/data/data/com.termux/files/usr/include/bits/get_device_api_level_inlines.h" 1 3 4
# 35 "/data/data/com.termux/files/usr/include/bits/get_device_api_level_inlines.h" 3 4
extern "C" {


int __system_property_get(const char* _Nonnull __name, char* _Nonnull __value);
int atoi(const char* _Nonnull __s) __attribute__((__pure__));

static __inline__ int android_get_device_api_level() {
  char value[92] = { 0 };
  if (__system_property_get("ro.build.version.sdk", value) < 1) return -1;
  int api_level = atoi(value);
  return (api_level > 0) ? api_level : -1;
}

}
# 203 "/data/data/com.termux/files/usr/include/android/api-level.h" 2 3 4
# 220 "/data/data/com.termux/files/usr/include/android/api-level.h" 3 4
}
# 337 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/android/ndk-version.h" 1 3 4
# 339 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 2 3 4
# 37 "/data/data/com.termux/files/usr/include/features.h" 2 3 4
# 459 "/data/data/com.termux/files/usr/include/c++/v1/__config" 2 3
# 88 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 2 3
# 91 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 3



# 1 "/data/data/com.termux/files/usr/include/stdlib.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/stdlib.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/alloca.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/wait.h" 1 3 4
# 38 "/data/data/com.termux/files/usr/include/bits/wait.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/wait.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/bits/wait.h" 2 3 4
# 34 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/malloc.h" 1 3 4
# 29 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 43 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 3



# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 1 3
# 84 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 3
# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_header_macro.h" 1 3
# 85 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 2 3



# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_ptrdiff_t.h" 1 3
# 18 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_ptrdiff_t.h" 3
typedef long int ptrdiff_t;
# 89 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 2 3




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_size_t.h" 1 3
# 18 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_size_t.h" 3
typedef long unsigned int size_t;
# 94 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 2 3
# 103 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 3
# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_wchar_t.h" 1 3
# 104 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 2 3




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_null.h" 1 3
# 109 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 2 3




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_nullptr_t.h" 1 3
# 114 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 2 3
# 123 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 3
# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_max_align_t.h" 1 3
# 19 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 124 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 2 3




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stddef_offsetof.h" 1 3
# 129 "/data/data/com.termux/files/usr/lib/clang/19/include/stddef.h" 2 3
# 47 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 2 3



typedef decltype(nullptr) nullptr_t;
# 30 "/data/data/com.termux/files/usr/include/malloc.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdio.h" 1 3 4
# 105 "/data/data/com.termux/files/usr/include/c++/v1/stdio.h" 3



# 1 "/data/data/com.termux/files/usr/include/stdio.h" 1 3 4
# 42 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/types.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/sys/types.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/types.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdint.h" 1 3 4
# 110 "/data/data/com.termux/files/usr/include/c++/v1/stdint.h" 3
# 124 "/data/data/com.termux/files/usr/include/c++/v1/stdint.h" 3
# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stdint.h" 1 3
# 56 "/data/data/com.termux/files/usr/lib/clang/19/include/stdint.h" 3
# 1 "/data/data/com.termux/files/usr/include/stdint.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/stdint.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/wchar_limits.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/stdint.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/stdint.h" 2 3 4


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;

typedef long __int64_t;
typedef unsigned long __uint64_t;






typedef long __intptr_t;
typedef unsigned long __uintptr_t;





typedef __int8_t int8_t;
typedef __uint8_t uint8_t;

typedef __int16_t int16_t;
typedef __uint16_t uint16_t;

typedef __int32_t int32_t;
typedef __uint32_t uint32_t;

typedef __int64_t int64_t;
typedef __uint64_t uint64_t;

typedef __intptr_t intptr_t;
typedef __uintptr_t uintptr_t;

typedef int8_t int_least8_t;
typedef uint8_t uint_least8_t;

typedef int16_t int_least16_t;
typedef uint16_t uint_least16_t;

typedef int32_t int_least32_t;
typedef uint32_t uint_least32_t;

typedef int64_t int_least64_t;
typedef uint64_t uint_least64_t;

typedef int8_t int_fast8_t;
typedef uint8_t uint_fast8_t;

typedef int64_t int_fast64_t;
typedef uint64_t uint_fast64_t;


typedef int64_t int_fast16_t;
typedef uint64_t uint_fast16_t;
typedef int64_t int_fast32_t;
typedef uint64_t uint_fast32_t;







typedef uint64_t uintmax_t;
typedef int64_t intmax_t;
# 57 "/data/data/com.termux/files/usr/lib/clang/19/include/stdint.h" 2 3
# 125 "/data/data/com.termux/files/usr/include/c++/v1/stdint.h" 2 3
# 34 "/data/data/com.termux/files/usr/include/sys/types.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/linux/types.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/types.h" 1 3 4






# 1 "/data/data/com.termux/files/usr/include/asm-generic/types.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/asm-generic/int-ll64.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/bitsperlong.h" 1 3 4
# 10 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/bitsperlong.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 11 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/bitsperlong.h" 2 3 4
# 10 "/data/data/com.termux/files/usr/include/asm-generic/int-ll64.h" 2 3 4

typedef __signed__ char __s8;
typedef unsigned char __u8;
typedef __signed__ short __s16;
typedef unsigned short __u16;
typedef __signed__ int __s32;
typedef unsigned int __u32;

__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 10 "/data/data/com.termux/files/usr/include/asm-generic/types.h" 2 3 4
# 8 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/types.h" 2 3 4
# 10 "/data/data/com.termux/files/usr/include/linux/types.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/linux/posix_types.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/linux/stddef.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/linux/compiler_types.h" 1 3 4
# 11 "/data/data/com.termux/files/usr/include/linux/compiler_types.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/compiler.h" 1 3 4
# 12 "/data/data/com.termux/files/usr/include/linux/compiler_types.h" 2 3 4
# 10 "/data/data/com.termux/files/usr/include/linux/stddef.h" 2 3 4
# 10 "/data/data/com.termux/files/usr/include/linux/posix_types.h" 2 3 4


typedef struct {
  unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;
typedef void(* __kernel_sighandler_t) (int);
typedef int __kernel_key_t;
typedef int __kernel_mqd_t;
# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/posix_types.h" 1 3 4








typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;

# 1 "/data/data/com.termux/files/usr/include/asm-generic/posix_types.h" 1 3 4
# 11 "/data/data/com.termux/files/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;


typedef __kernel_ulong_t __kernel_ino_t;


typedef unsigned int __kernel_mode_t;


typedef int __kernel_pid_t;


typedef int __kernel_ipc_pid_t;


typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;


typedef __kernel_long_t __kernel_suseconds_t;


typedef int __kernel_daddr_t;


typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;






typedef unsigned int __kernel_old_dev_t;







typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;



typedef struct {
  int val[2];
} __kernel_fsid_t;

typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 13 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/posix_types.h" 2 3 4
# 19 "/data/data/com.termux/files/usr/include/linux/posix_types.h" 2 3 4
# 12 "/data/data/com.termux/files/usr/include/linux/types.h" 2 3 4

typedef __signed__ __int128 __s128 __attribute__((aligned(16)));
typedef unsigned __int128 __u128 __attribute__((aligned(16)));



typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;
typedef __u16 __sum16;
typedef __u32 __wsum;



typedef unsigned __poll_t;
# 37 "/data/data/com.termux/files/usr/include/sys/types.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/bits/pthread_types.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/bits/pthread_types.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/types.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/bits/pthread_types.h" 2 3 4

typedef struct {
  uint32_t flags;
  void* stack_base;
  size_t stack_size;
  size_t guard_size;
  int32_t sched_policy;
  int32_t sched_priority;

  char __reserved[16];

} pthread_attr_t;


typedef struct {

  int64_t __private[4];



} pthread_barrier_t;



typedef int pthread_barrierattr_t;


typedef struct {

  int32_t __private[12];



} pthread_cond_t;

typedef long pthread_condattr_t;

typedef int pthread_key_t;

typedef struct {

  int32_t __private[10];



} pthread_mutex_t;

typedef long pthread_mutexattr_t;

typedef int pthread_once_t;

typedef struct {

  int32_t __private[14];



} pthread_rwlock_t;

typedef long pthread_rwlockattr_t;


typedef struct {

  int64_t __private;



} pthread_spinlock_t;


typedef long pthread_t;
# 40 "/data/data/com.termux/files/usr/include/sys/types.h" 2 3 4


typedef __kernel_gid32_t __gid_t;
typedef __gid_t gid_t;
typedef __kernel_uid32_t __uid_t;
typedef __uid_t uid_t;
typedef __kernel_pid_t __pid_t;
typedef __pid_t pid_t;
typedef uint32_t __id_t;
typedef __id_t id_t;

typedef unsigned long blkcnt_t;
typedef unsigned long blksize_t;
typedef __kernel_caddr_t caddr_t;
typedef __kernel_clock_t clock_t;

typedef __kernel_clockid_t __clockid_t;
typedef __clockid_t clockid_t;

typedef __kernel_daddr_t daddr_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;

typedef __kernel_mode_t __mode_t;
typedef __mode_t mode_t;

typedef __kernel_key_t __key_t;
typedef __key_t key_t;

typedef __kernel_ino_t __ino_t;
typedef __ino_t ino_t;

typedef uint64_t ino64_t;

typedef uint32_t __nlink_t;
typedef __nlink_t nlink_t;

typedef void* __timer_t;
typedef __timer_t timer_t;

typedef __kernel_suseconds_t __suseconds_t;
typedef __suseconds_t suseconds_t;


typedef uint32_t __useconds_t;
typedef __useconds_t useconds_t;





typedef uint64_t dev_t;



typedef __kernel_time_t __time_t;
typedef __time_t time_t;




typedef int64_t off_t;
typedef off_t loff_t;
typedef loff_t off64_t;
# 115 "/data/data/com.termux/files/usr/include/sys/types.h" 3 4
typedef uint32_t __socklen_t;

typedef __socklen_t socklen_t;

typedef __builtin_va_list __va_list;
# 128 "/data/data/com.termux/files/usr/include/sys/types.h" 3 4
typedef __kernel_ssize_t ssize_t;


typedef unsigned int uint_t;
typedef unsigned int uint;


typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;

typedef uint32_t u_int32_t;
typedef uint16_t u_int16_t;
typedef uint8_t u_int8_t;
typedef uint64_t u_int64_t;
# 43 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 1 3 4
# 47 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 3 4
# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stdarg_header_macro.h" 1 3 4
# 48 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 2 3 4



# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stdarg___gnuc_va_list.h" 1 3 4
# 12 "/data/data/com.termux/files/usr/lib/clang/19/include/__stdarg___gnuc_va_list.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 52 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 2 3 4




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stdarg_va_list.h" 1 3 4
# 12 "/data/data/com.termux/files/usr/lib/clang/19/include/__stdarg_va_list.h" 3 4
typedef __builtin_va_list va_list;
# 57 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 2 3 4




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stdarg_va_arg.h" 1 3 4
# 62 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 2 3 4




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stdarg___va_copy.h" 1 3 4
# 67 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 2 3 4




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/__stdarg_va_copy.h" 1 3 4
# 72 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 2 3 4
# 45 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 46 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/c++/v1/string.h" 1 3 4
# 58 "/data/data/com.termux/files/usr/include/c++/v1/string.h" 3



# 1 "/data/data/com.termux/files/usr/include/string.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/string.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/string.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/xlocale.h" 1 3 4
# 44 "/data/data/com.termux/files/usr/include/xlocale.h" 3 4
struct __locale_t;




typedef struct __locale_t* locale_t;
# 35 "/data/data/com.termux/files/usr/include/string.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/bits/strcasecmp.h" 1 3 4
# 40 "/data/data/com.termux/files/usr/include/bits/strcasecmp.h" 3 4
extern "C" {
# 49 "/data/data/com.termux/files/usr/include/bits/strcasecmp.h" 3 4
int strcasecmp(const char* _Nonnull __s1, const char* _Nonnull __s2) __attribute__((__pure__));






int strcasecmp_l(const char* _Nonnull __s1, const char* _Nonnull __s2, locale_t _Nonnull __l) __attribute__((__pure__)) __attribute__((__availability__(android,strict,introduced=23 )));
# 68 "/data/data/com.termux/files/usr/include/bits/strcasecmp.h" 3 4
int strncasecmp(const char* _Nonnull __s1, const char* _Nonnull __s2, size_t __n) __attribute__((__pure__));






int strncasecmp_l(const char* _Nonnull __s1, const char* _Nonnull __s2, size_t __n, locale_t _Nonnull __l) __attribute__((__pure__)) __attribute__((__availability__(android,strict,introduced=23 )));



}
# 37 "/data/data/com.termux/files/usr/include/string.h" 2 3 4

extern "C" {


# 1 "/data/data/com.termux/files/usr/include/strings.h" 1 3 4
# 60 "/data/data/com.termux/files/usr/include/strings.h" 3 4
extern "C" {



static __inline__ __attribute__((__always_inline__)) void __bionic_bcopy(const void* _Nonnull b1, void* _Nonnull b2, size_t len) {
  __builtin_memmove(b2, b1, len);
}



static __inline__ __attribute__((__always_inline__)) void __bionic_bzero(void* _Nonnull b, size_t len) {
  __builtin_memset(b, 0, len);
}
# 81 "/data/data/com.termux/files/usr/include/strings.h" 3 4
static __inline__ int ffs(int __n) {
  return __builtin_ffs(__n);
}
# 92 "/data/data/com.termux/files/usr/include/strings.h" 3 4
static __inline__ int ffsl(long __n) {
  return __builtin_ffsl(__n);
}
# 103 "/data/data/com.termux/files/usr/include/strings.h" 3 4
static __inline__ int ffsll(long long __n) {
  return __builtin_ffsll(__n);
}





}
# 42 "/data/data/com.termux/files/usr/include/string.h" 2 3 4


void* _Nullable memccpy(void* _Nonnull __dst, const void* _Nonnull __src, int __stop_char, size_t __n);
void* _Nullable memchr(const void* _Nonnull __s, int __ch, size_t __n) __attribute__((__pure__));

extern "C++" void* _Nullable memrchr(void* _Nonnull __s, int __ch, size_t __n) __asm__("memrchr") __attribute__((__pure__));
extern "C++" const void* _Nullable memrchr(const void* _Nonnull __s, int __ch, size_t __n) __asm__("memrchr") __attribute__((__pure__));



int memcmp(const void* _Nonnull __lhs, const void* _Nonnull __rhs, size_t __n) __attribute__((__pure__));
void* _Nonnull memcpy(void* _Nonnull, const void* _Nonnull, size_t);



void* _Nonnull mempcpy(void* _Nonnull __dst, const void* _Nonnull __src, size_t __n) __attribute__((__availability__(android,strict,introduced=23 )));



void* _Nonnull memmove(void* _Nonnull __dst, const void* _Nonnull __src, size_t __n);







void* _Nonnull memset(void* _Nonnull __dst, int __ch, size_t __n);
# 84 "/data/data/com.termux/files/usr/include/string.h" 3 4
void* _Nullable memmem(const void* _Nonnull __haystack, size_t __haystack_size, const void* _Nonnull __needle, size_t __needle_size) __attribute__((__pure__));

char* _Nullable strchr(const char* _Nonnull __s, int __ch) __attribute__((__pure__));
char* _Nullable __strchr_chk(const char* _Nonnull __s, int __ch, size_t __n);




extern "C++" char* _Nonnull strchrnul(char* _Nonnull __s, int __ch) __asm__("strchrnul") __attribute__((__pure__)) __attribute__((__availability__(android,strict,introduced=24 )));
extern "C++" const char* _Nonnull strchrnul(const char* _Nonnull __s, int __ch) __asm__("strchrnul") __attribute__((__pure__)) __attribute__((__availability__(android,strict,introduced=24 )));
# 105 "/data/data/com.termux/files/usr/include/string.h" 3 4
char* _Nullable strrchr(const char* _Nonnull __s, int __ch) __attribute__((__pure__));
char* _Nullable __strrchr_chk(const char* _Nonnull __s, int __ch, size_t __n);

size_t strlen(const char* _Nonnull __s) __attribute__((__pure__));
size_t __strlen_chk(const char* _Nonnull __s, size_t __n);

int strcmp(const char* _Nonnull __lhs, const char* _Nonnull __rhs) __attribute__((__pure__));
char* _Nonnull stpcpy(char* _Nonnull __dst, const char* _Nonnull __src);
char* _Nonnull strcpy(char* _Nonnull __dst, const char* _Nonnull __src);
char* _Nonnull strcat(char* _Nonnull __dst, const char* _Nonnull __src);
char* _Nullable strdup(const char* _Nonnull __s);

char* _Nullable strstr(const char* _Nonnull __haystack, const char* _Nonnull __needle) __attribute__((__pure__));

extern "C++" char* _Nullable strcasestr(char* _Nonnull, const char* _Nonnull) __asm__("strcasestr") __attribute__((__pure__));
extern "C++" const char* _Nullable strcasestr(const char* _Nonnull, const char* _Nonnull) __asm__("strcasestr") __attribute__((__pure__));



char* _Nullable strtok(char* _Nullable __s, const char* _Nonnull __delimiter);
char* _Nullable strtok_r(char* _Nullable __s, const char* _Nonnull __delimiter, char* _Nonnull * _Nonnull __pos_ptr);

char* _Nonnull strerror(int __errno_value);


char* _Nonnull strerror_l(int __errno_value, locale_t _Nonnull __l) __attribute__((__availability__(android,strict,introduced=23 )));



char* _Nonnull strerror_r(int __errno_value, char* _Nullable __buf, size_t __n) __asm__("__gnu_strerror_r") __attribute__((__availability__(android,strict,introduced=23 )));
# 167 "/data/data/com.termux/files/usr/include/string.h" 3 4
const char* _Nonnull strerrordesc_np(int __errno_value) __asm__("strerror");


size_t strnlen(const char* _Nonnull __s, size_t __n) __attribute__((__pure__));
char* _Nonnull strncat(char* _Nonnull __dst, const char* _Nonnull __src, size_t __n);
char* _Nullable strndup(const char* _Nonnull __s, size_t __n);
int strncmp(const char* _Nonnull __lhs, const char* _Nonnull __rhs, size_t __n) __attribute__((__pure__));
char* _Nonnull stpncpy(char* _Nonnull __dst, const char* _Nonnull __src, size_t __n);
char* _Nonnull strncpy(char* _Nonnull __dst, const char* _Nonnull __src, size_t __n);

size_t strlcat(char* _Nonnull __dst, const char* _Nonnull __src, size_t __n);
size_t strlcpy(char* _Nonnull __dst, const char* _Nonnull __src, size_t __n);

size_t strcspn(const char* _Nonnull __s, const char* _Nonnull __reject) __attribute__((__pure__));
char* _Nullable strpbrk(const char* _Nonnull __s, const char* _Nonnull __accept) __attribute__((__pure__));
char* _Nullable strsep(char* _Nullable * _Nonnull __s_ptr, const char* _Nonnull __delimiter);
size_t strspn(const char* _Nonnull __s, const char* _Nonnull __accept);

char* _Nonnull strsignal(int __signal);

int strcoll(const char* _Nonnull __lhs, const char* _Nonnull __rhs) __attribute__((__pure__));
size_t strxfrm(char* _Null_unspecified __dst, const char* _Nonnull __src, size_t __n);

int strcoll_l(const char* _Nonnull __lhs, const char* _Nonnull __rhs, locale_t _Nonnull __l) __attribute__((__pure__));
size_t strxfrm_l(char* _Null_unspecified __dst, const char* _Nonnull __src, size_t __n, locale_t _Nonnull __l);
# 201 "/data/data/com.termux/files/usr/include/string.h" 3 4
extern "C++" char* _Nonnull basename(char* _Nullable __path) __asm__("__gnu_basename") __attribute__((__availability__(android,strict,introduced=23 )));
extern "C++" const char* _Nonnull basename(const char* _Nonnull __path) __asm__("__gnu_basename") __attribute__((__availability__(android,strict,introduced=23 )));
# 225 "/data/data/com.termux/files/usr/include/string.h" 3 4
extern "C++" {
inline __attribute__((__always_inline__))
void* _Nullable __bionic_memchr(const void* _Nonnull const s , int c, size_t n) {
    return memchr(s, c, n);
}

inline __attribute__((__always_inline__))
const void* _Nullable memchr(const void* _Nonnull const s , int c, size_t n)
        __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_memchr(s, c, n);
}

inline __attribute__((__always_inline__))
void* _Nullable memchr(void* _Nonnull const s , int c, size_t n) __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_memchr(s, c, n);
}

inline __attribute__((__always_inline__))
char* _Nullable __bionic_strchr(const char* _Nonnull const s , int c) {
    return strchr(s, c);
}

inline __attribute__((__always_inline__))
const char* _Nullable strchr(const char* _Nonnull const s , int c)
        __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_strchr(s, c);
}

inline __attribute__((__always_inline__))
char* _Nullable strchr(char* _Nonnull const s , int c)
        __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_strchr(s, c);
}

inline __attribute__((__always_inline__))
char* _Nullable __bionic_strrchr(const char* _Nonnull const s , int c) {
    return strrchr(s, c);
}

inline __attribute__((__always_inline__))
const char* _Nullable strrchr(const char* _Nonnull const s , int c) __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_strrchr(s, c);
}

inline __attribute__((__always_inline__))
char* _Nullable strrchr(char* _Nonnull const s , int c) __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_strrchr(s, c);
}


inline __attribute__((__always_inline__))
char* _Nullable __bionic_strstr(const char* _Nonnull h, const char* _Nonnull n) { return strstr(h, n); }

inline __attribute__((__always_inline__))
const char* _Nullable strstr(const char* _Nonnull h, const char* _Nonnull n) __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_strstr(h, n);
}

inline __attribute__((__always_inline__))
char* _Nullable strstr(char* _Nonnull h, const char* _Nonnull n) __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_strstr(h, n);
}

inline __attribute__((__always_inline__))
char* _Nullable __bionic_strpbrk(const char* _Nonnull h, const char* _Nonnull n) { return strpbrk(h, n); }

inline __attribute__((__always_inline__))
char* _Nullable strpbrk(char* _Nonnull h, const char* _Nonnull n) __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_strpbrk(h, n);
}

inline __attribute__((__always_inline__))
const char* _Nullable strpbrk(const char* _Nonnull h, const char* _Nonnull n) __attribute__((__enable_if__(true, "preferred overload"))) __attribute__((__enable_if__(true, ""))) {
    return __bionic_strpbrk(h, n);
}
}



}
# 62 "/data/data/com.termux/files/usr/include/c++/v1/string.h" 2 3
# 72 "/data/data/com.termux/files/usr/include/c++/v1/string.h" 3
extern "C++" {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const char* strchr(const char* __s, int __c) {
  return __builtin_strchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) char* strchr(char* __s, int __c) {
  return __builtin_strchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const char* strpbrk(const char* __s1, const char* __s2) {
  return __builtin_strpbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) char* strpbrk(char* __s1, const char* __s2) {
  return __builtin_strpbrk(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const char* strrchr(const char* __s, int __c) {
  return __builtin_strrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) char* strrchr(char* __s, int __c) {
  return __builtin_strrchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const void* memchr(const void* __s, int __c, size_t __n) {
  return __builtin_memchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) void* memchr(void* __s, int __c, size_t __n) {
  return __builtin_memchr(__s, __c, __n);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const char* strstr(const char* __s1, const char* __s2) {
  return __builtin_strstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) char* strstr(char* __s1, const char* __s2) {
  return __builtin_strstr(__s1, __s2);
}
}
# 49 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/fcntl.h" 1 3 4
# 13 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/fcntl.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/fcntl.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/bits/flock64.h" 1 3 4
# 10 "/data/data/com.termux/files/usr/include/asm-generic/fcntl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/flock.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/bits/flock.h" 3 4
extern "C" {
# 60 "/data/data/com.termux/files/usr/include/bits/flock.h" 3 4
struct flock { short l_type; short l_whence; off64_t l_start; off64_t l_len; pid_t l_pid; };
struct flock64 { short l_type; short l_whence; off64_t l_start; off64_t l_len; pid_t l_pid; };




}
# 11 "/data/data/com.termux/files/usr/include/asm-generic/fcntl.h" 2 3 4
# 110 "/data/data/com.termux/files/usr/include/asm-generic/fcntl.h" 3 4
struct f_owner_ex {
  int type;
  __kernel_pid_t pid;
};
# 14 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/fcntl.h" 2 3 4
# 51 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/bits/seek_constants.h" 1 3 4
# 53 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4





extern "C" {

typedef off_t fpos_t;
typedef off64_t fpos64_t;

struct __sFILE;
typedef struct __sFILE FILE;


extern FILE* _Nonnull stdin __attribute__((__availability__(android,strict,introduced=23 )));
extern FILE* _Nonnull stdout __attribute__((__availability__(android,strict,introduced=23 )));
extern FILE* _Nonnull stderr __attribute__((__availability__(android,strict,introduced=23 )));
# 111 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
void clearerr(FILE* _Nonnull __fp);
int fclose(FILE* _Nonnull __fp);
int feof(FILE* _Nonnull __fp);
int ferror(FILE* _Nonnull __fp);
int fflush(FILE* _Nullable __fp);
int fgetc(FILE* _Nonnull __fp);
char* _Nullable fgets(char* _Nonnull __buf, int __size, FILE* _Nonnull __fp);
int fprintf(FILE* _Nonnull __fp , const char* _Nonnull __fmt, ...) __attribute__((__format__(printf, 2, 3)));
int fputc(int __ch, FILE* _Nonnull __fp);
int fputs(const char* _Nonnull __s, FILE* _Nonnull __fp);
size_t fread(void* _Nonnull __buf, size_t __size, size_t __count, FILE* _Nonnull __fp);
int fscanf(FILE* _Nonnull __fp, const char* _Nonnull __fmt, ...) __attribute__((__format__(scanf, 2, 3)));
size_t fwrite(const void* _Nonnull __buf, size_t __size, size_t __count, FILE* _Nonnull __fp);
int getc(FILE* _Nonnull __fp);
int getchar(void);
ssize_t getdelim(char* _Nullable * _Nonnull __line_ptr, size_t* _Nonnull __line_length_ptr, int __delimiter, FILE* _Nonnull __fp);
ssize_t getline(char* _Nullable * _Nonnull __line_ptr, size_t* _Nonnull __line_length_ptr, FILE* _Nonnull __fp);

void perror(const char* _Nullable __msg);
int printf(const char* _Nonnull __fmt, ...) __attribute__((__format__(printf, 1, 2)));
int putc(int __ch, FILE* _Nonnull __fp);
int putchar(int __ch);
int puts(const char* _Nonnull __s);
int remove(const char* _Nonnull __path);
void rewind(FILE* _Nonnull __fp);
int scanf(const char* _Nonnull __fmt, ...) __attribute__((__format__(scanf, 1, 2)));
void setbuf(FILE* _Nonnull __fp, char* _Nullable __buf);
int setvbuf(FILE* _Nonnull __fp, char* _Nullable __buf, int __mode, size_t __size);
int sscanf(const char* _Nonnull __s, const char* _Nonnull __fmt, ...) __attribute__((__format__(scanf, 2, 3)));
int ungetc(int __ch, FILE* _Nonnull __fp);
int vfprintf(FILE* _Nonnull __fp, const char* _Nonnull __fmt, va_list __args) __attribute__((__format__(printf, 2, 0)));
int vprintf(const char* _Nonnull __fp, va_list __args) __attribute__((__format__(printf, 1, 0)));

int dprintf(int __fd, const char* _Nonnull __fmt, ...) __attribute__((__format__(printf, 2, 3)));
int vdprintf(int __fd, const char* _Nonnull __fmt, va_list __args) __attribute__((__format__(printf, 2, 0)));





int sprintf(char* _Null_unspecified __s, const char* _Nonnull __fmt, ...)
    __attribute__((__format__(printf, 2, 3))) ;
int vsprintf(char* _Null_unspecified __s, const char* _Nonnull __fmt, va_list __args)
    __attribute__((__format__(printf, 2, 0))) ;
char* _Nullable tmpnam(char* _Nullable __s)
    __attribute__((__deprecated__("tmpnam is unsafe, use mkstemp or tmpfile instead")));

char* _Nullable tempnam(const char* _Nullable __dir, const char* _Nullable __prefix)
    __attribute__((__deprecated__("tempnam is unsafe, use mkstemp or tmpfile instead")));







int rename(const char* _Nonnull __old_path, const char* _Nonnull __new_path);







int renameat(int __old_dir_fd, const char* _Nonnull __old_path, int __new_dir_fd, const char* _Nonnull __new_path);
# 212 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
int fseek(FILE* _Nonnull __fp, long __offset, int __whence);
long ftell(FILE* _Nonnull __fp);
# 238 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
int fgetpos(FILE* _Nonnull __fp, fpos_t* _Nonnull __pos);
int fsetpos(FILE* _Nonnull __fp, const fpos_t* _Nonnull __pos);
int fseeko(FILE* _Nonnull __fp, off_t __offset, int __whence);
off_t ftello(FILE* _Nonnull __fp);


FILE* _Nullable funopen(const void* _Nullable __cookie,
              int (* _Null_unspecified __read_fn)(void* _Nonnull, char* _Nonnull, int),
              int (* _Null_unspecified __write_fn)(void* _Nonnull, const char* _Nonnull, int),
              fpos_t (* _Nullable __seek_fn)(void* _Nonnull, fpos_t, int),
              int (* _Nullable __close_fn)(void* _Nonnull));




int fgetpos64(FILE* _Nonnull __fp, fpos64_t* _Nonnull __pos) __attribute__((__availability__(android,strict,introduced=24 )));
int fsetpos64(FILE* _Nonnull __fp, const fpos64_t* _Nonnull __pos) __attribute__((__availability__(android,strict,introduced=24 )));
int fseeko64(FILE* _Nonnull __fp, off64_t __offset, int __whence) __attribute__((__availability__(android,strict,introduced=24 )));
off64_t ftello64(FILE* _Nonnull __fp) __attribute__((__availability__(android,strict,introduced=24 )));






FILE* _Nullable funopen64(const void* _Nullable __cookie,
                int (* _Null_unspecified __read_fn)(void* _Nonnull, char* _Nonnull, int),
                int (* _Null_unspecified __write_fn)(void* _Nonnull, const char* _Nonnull, int),
                fpos64_t (* _Nullable __seek_fn)(void* _Nonnull, fpos64_t, int),
                int (* _Nullable __close_fn)(void* _Nonnull)) __attribute__((__availability__(android,strict,introduced=24 )));




FILE* _Nullable fopen(const char* _Nonnull __path, const char* _Nonnull __mode);


FILE* _Nullable fopen64(const char* _Nonnull __path, const char* _Nonnull __mode) __attribute__((__availability__(android,strict,introduced=24 )));


FILE* _Nullable freopen(const char* _Nullable __path, const char* _Nonnull __mode, FILE* _Nonnull __fp);


FILE* _Nullable freopen64(const char* _Nullable __path, const char* _Nonnull __mode, FILE* _Nonnull __fp) __attribute__((__availability__(android,strict,introduced=24 )));



FILE* _Nullable tmpfile64(void) __attribute__((__availability__(android,strict,introduced=24 )));



int snprintf(char* _Null_unspecified __buf, size_t __size, const char* _Nonnull __fmt, ...) __attribute__((__format__(printf, 3, 4)));
int vfscanf(FILE* _Nonnull __fp, const char* _Nonnull __fmt, va_list __args) __attribute__((__format__(scanf, 2, 0)));
int vscanf(const char* _Nonnull __fmt , va_list __args) __attribute__((__format__(scanf, 1, 0)));
int vsnprintf(char* _Null_unspecified __buf, size_t __size, const char* _Nonnull __fmt, va_list __args) __attribute__((__format__(printf, 3, 0)));
int vsscanf(const char* _Nonnull __s, const char* _Nonnull __fmt, va_list __args) __attribute__((__format__(scanf, 2, 0)));
# 302 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
static __inline__ char* _Nonnull ctermid(char* _Nullable s) {
 if (s == 0) return (char*) "/dev/tty";
 strcpy(s, "/dev/tty");
 return s;
}


FILE* _Nullable fdopen(int __fd, const char* _Nonnull __mode);
int fileno(FILE* _Nonnull __fp);
int pclose(FILE* _Nonnull __fp);
FILE* _Nullable popen(const char* _Nonnull __command, const char* _Nonnull __mode);
void flockfile(FILE* _Nonnull __fp);
int ftrylockfile(FILE* _Nonnull __fp);
void funlockfile(FILE* _Nonnull __fp);
int getc_unlocked(FILE* _Nonnull __fp);
int getchar_unlocked(void);
int putc_unlocked(int __ch, FILE* _Nonnull __fp);
int putchar_unlocked(int __ch);



FILE* _Nullable fmemopen(void* _Nullable __buf, size_t __size, const char* _Nonnull __mode) __attribute__((__availability__(android,strict,introduced=23 )));
FILE* _Nullable open_memstream(char* _Nonnull * _Nonnull __ptr, size_t* _Nonnull __size_ptr) __attribute__((__availability__(android,strict,introduced=23 )));




int asprintf(char* _Nullable * _Nonnull __s_ptr, const char* _Nonnull __fmt, ...) __attribute__((__format__(printf, 2, 3)));
char* _Nullable fgetln(FILE* _Nonnull __fp, size_t* _Nonnull __length_ptr);
int fpurge(FILE* _Nonnull __fp);
void setbuffer(FILE* _Nonnull __fp, char* _Nullable __buf, int __size);
int setlinebuf(FILE* _Nonnull __fp);
int vasprintf(char* _Nullable * _Nonnull __s_ptr, const char* _Nonnull __fmt, va_list __args) __attribute__((__format__(printf, 2, 0)));


void clearerr_unlocked(FILE* _Nonnull __fp) __attribute__((__availability__(android,strict,introduced=23 )));
int feof_unlocked(FILE* _Nonnull __fp) __attribute__((__availability__(android,strict,introduced=23 )));
int ferror_unlocked(FILE* _Nonnull __fp) __attribute__((__availability__(android,strict,introduced=23 )));




int fileno_unlocked(FILE* _Nonnull __fp) __attribute__((__availability__(android,strict,introduced=24 )));
# 376 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
int open(const char*, int, ...);
extern pid_t getpid();
extern int unlink(const char*);
void free(void* p);
uint32_t arc4random(void);
static __inline__ FILE* _Nullable tmpfile() {
 int p = getpid();
 char* path;
 int i;
 for (i = 0; i < 100; i++) {
  unsigned int r = arc4random();
  if (asprintf(&path, "/data/data/com.termux/files/usr/tmp/tmpfile.%d-%u", p, r) == -1) return __null;
  int fd = open(path, 00000002 | 00000100 | 00000200 | 0400000, 0600);
  if (fd >= 0) {
   FILE* result = fdopen(fd, "w+");
   unlink(path);
   free(path);
   return result;
  }
  free(path);
 }
 return __null;
}

}
# 109 "/data/data/com.termux/files/usr/include/c++/v1/stdio.h" 2 3
# 31 "/data/data/com.termux/files/usr/include/malloc.h" 2 3 4

extern "C" {
# 58 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
void* _Nullable malloc(size_t __byte_count) __attribute__((__malloc__)) __attribute__((__alloc_size__(1))) __attribute__((__warn_unused_result__));
# 67 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
void* _Nullable calloc(size_t __item_count, size_t __item_size) __attribute__((__malloc__)) __attribute__((__alloc_size__(1,2))) __attribute__((__warn_unused_result__));
# 77 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
void* _Nullable realloc(void* _Nullable __ptr, size_t __byte_count) __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));
# 100 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
void free(void* _Nullable __ptr);
# 111 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
void* _Nullable memalign(size_t __alignment, size_t __byte_count) __attribute__((__malloc__)) __attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));





size_t malloc_usable_size(const void* _Nullable __ptr);
# 143 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
struct mallinfo { size_t arena; size_t ordblks; size_t smblks; size_t hblks; size_t hblkhd; size_t usmblks; size_t fsmblks; size_t uordblks; size_t fordblks; size_t keepcost; };







struct mallinfo mallinfo(void);




struct mallinfo2 { size_t arena; size_t ordblks; size_t smblks; size_t hblks; size_t hblkhd; size_t usmblks; size_t fsmblks; size_t uordblks; size_t fordblks; size_t keepcost; };






struct mallinfo2 mallinfo2(void) __asm__("mallinfo");
# 192 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
int malloc_info(int __must_be_zero, FILE* _Nonnull __fp) __attribute__((__availability__(android,strict,introduced=23 )));
# 321 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
enum HeapTaggingLevel {




  M_HEAP_TAGGING_LEVEL_NONE = 0,






  M_HEAP_TAGGING_LEVEL_TBI = 1,





  M_HEAP_TAGGING_LEVEL_ASYNC = 2,





  M_HEAP_TAGGING_LEVEL_SYNC = 3,

};
# 421 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
}
# 35 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 36 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4






extern "C" {




__attribute__((__noreturn__)) void abort(void) __attribute__((__nomerge__));
__attribute__((__noreturn__)) void exit(int __status);
__attribute__((__noreturn__)) void _Exit(int __status);

int atexit(void (* _Nonnull __fn)(void));

int at_quick_exit(void (* _Nonnull __fn)(void));
void quick_exit(int __status) __attribute__((__noreturn__));

char* _Nullable getenv(const char* _Nonnull __name);
int putenv(char* _Nonnull __assignment);
int setenv(const char* _Nonnull __name, const char* _Nonnull __value, int __overwrite);
int unsetenv(const char* _Nonnull __name);
int clearenv(void);

char* _Nullable mkdtemp(char* _Nonnull __template);
char* _Nullable mktemp(char* _Nonnull __template) __attribute__((__deprecated__("mktemp is unsafe, use mkstemp or tmpfile instead")));



int mkostemp64(char* _Nonnull __template, int __flags) __attribute__((__availability__(android,strict,introduced=23 )));
int mkostemp(char* _Nonnull __template, int __flags) __attribute__((__availability__(android,strict,introduced=23 )));
int mkostemps64(char* _Nonnull __template, int __suffix_length, int __flags) __attribute__((__availability__(android,strict,introduced=23 )));
int mkostemps(char* _Nonnull __template, int __suffix_length, int __flags) __attribute__((__availability__(android,strict,introduced=23 )));


int mkstemp64(char* _Nonnull __template);
int mkstemp(char* _Nonnull __template);


int mkstemps64(char* _Nonnull __template, int __flags) __attribute__((__availability__(android,strict,introduced=23 )));


int mkstemps(char* _Nonnull __template, int __flags);

long strtol(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base);
long long strtoll(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base);
unsigned long strtoul(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base);
unsigned long long strtoull(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base);

int posix_memalign(void* _Nullable * _Nullable __memptr, size_t __alignment, size_t __size);







double strtod(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr);
long double strtold(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr);







int atoi(const char* _Nonnull __s) __attribute__((__pure__));
long atol(const char* _Nonnull __s) __attribute__((__pure__));
long long atoll(const char* _Nonnull __s) __attribute__((__pure__));

__attribute__((__warn_unused_result__)) char* _Nullable realpath(const char* _Nonnull __path, char* _Nullable __resolved);
# 125 "/data/data/com.termux/files/usr/include/stdlib.h" 3 4
int system(const char* _Nonnull __command);

void* _Nullable bsearch(const void* _Nonnull __key, const void* _Nullable __base, size_t __nmemb, size_t __size, int (* _Nonnull __comparator)(const void* _Nonnull __lhs, const void* _Nonnull __rhs));

void qsort(void* _Nullable __base, size_t __nmemb, size_t __size, int (* _Nonnull __comparator)(const void* _Nullable __lhs, const void* _Nullable __rhs));

uint32_t arc4random(void);
uint32_t arc4random_uniform(uint32_t __upper_bound);
void arc4random_buf(void* _Nonnull __buf, size_t __n);



int rand_r(unsigned int* _Nonnull __seed_ptr);

double drand48(void);
double erand48(unsigned short __xsubi[_Nonnull 3]);
long jrand48(unsigned short __xsubi[_Nonnull 3]);


void lcong48(unsigned short __param[_Nonnull 7]) __attribute__((__availability__(android,strict,introduced=23 )));


long lrand48(void);
long mrand48(void);
long nrand48(unsigned short __xsubi[_Nonnull 3]);
unsigned short* _Nonnull seed48(unsigned short __seed16v[_Nonnull 3]);
void srand48(long __seed);

char* _Nullable initstate(unsigned int __seed, char* _Nonnull __state, size_t __n);
char* _Nullable setstate(char* _Nonnull __state);

int getpt(void);
int posix_openpt(int __flags);
char* _Nullable ptsname(int __fd);
int ptsname_r(int __fd, char* _Nonnull __buf, size_t __n);
int unlockpt(int __fd);







typedef struct {
  int quot;
  int rem;
} div_t;

div_t div(int __numerator, int __denominator) __attribute__((__const__));

typedef struct {
  long int quot;
  long int rem;
} ldiv_t;

ldiv_t ldiv(long __numerator, long __denominator) __attribute__((__const__));

typedef struct {
  long long int quot;
  long long int rem;
} lldiv_t;

lldiv_t lldiv(long long __numerator, long long __denominator) __attribute__((__const__));
# 203 "/data/data/com.termux/files/usr/include/stdlib.h" 3 4
const char* _Nullable getprogname(void);
void setprogname(const char* _Nonnull __name);

int mblen(const char* _Nullable __s, size_t __n) ;
size_t mbstowcs(wchar_t* _Nullable __dst, const char* _Nullable __src, size_t __n);
int mbtowc(wchar_t* _Nullable __wc_ptr, const char* _Nullable __s, size_t __n);
int wctomb(char* _Nullable __dst, wchar_t __wc);

size_t wcstombs(char* _Nullable __dst, const wchar_t* _Nullable __src, size_t __n);







int abs(int __x) __attribute__((__const__));
long labs(long __x) __attribute__((__const__));
long long llabs(long long __x) __attribute__((__const__));

float strtof(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr);
double atof(const char* _Nonnull __s) __attribute__((__pure__));
int rand(void);
void srand(unsigned int __seed);
long random(void);
void srandom(unsigned int __seed);
int grantpt(int __fd);

long long strtoll_l(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base, locale_t _Nonnull __l);
unsigned long long strtoull_l(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base, locale_t _Nonnull __l);
long double strtold_l(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, locale_t _Nonnull __l);
# 243 "/data/data/com.termux/files/usr/include/stdlib.h" 3 4
}

# 1 "/data/data/com.termux/files/usr/include/android/legacy_stdlib_inlines.h" 1 3 4
# 36 "/data/data/com.termux/files/usr/include/android/legacy_stdlib_inlines.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 1 3 4
# 37 "/data/data/com.termux/files/usr/include/android/legacy_stdlib_inlines.h" 2 3 4


extern "C" {

static __inline__ double strtod_l(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, locale_t _Nonnull __l) {
  return strtod(__s, __end_ptr);
}

static __inline__ float strtof_l(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, locale_t _Nonnull __l) {
  return strtof(__s, __end_ptr);
}

static __inline__ long strtol_l(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base, locale_t _Nonnull __l) {
  return strtol(__s, __end_ptr, __base);
}

}
# 246 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4
# 95 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 2 3



extern "C++" {
# 114 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 3
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long abs(long __x) noexcept { return __builtin_labs(__x); }
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long abs(long long __x) noexcept {
  return __builtin_llabs(__x);
}


[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float abs(float __lcpp_x) noexcept {
  return __builtin_fabsf(__lcpp_x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double abs(double __lcpp_x) noexcept {
  return __builtin_fabs(__lcpp_x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double abs(long double __lcpp_x) noexcept {
  return __builtin_fabsl(__lcpp_x);
}
# 147 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 3
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) ldiv_t div(long __x, long __y) noexcept { return ::ldiv(__x, __y); }

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) lldiv_t div(long long __x, long long __y) noexcept { return ::lldiv(__x, __y); }


}
# 24 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdio.h" 1 3
# 25 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/c++/v1/errno.h" 1 3
# 29 "/data/data/com.termux/files/usr/include/c++/v1/errno.h" 3



# 1 "/data/data/com.termux/files/usr/include/errno.h" 1 3 4
# 37 "/data/data/com.termux/files/usr/include/errno.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/errno.h" 1 3 4






# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/errno.h" 1 3 4






# 1 "/data/data/com.termux/files/usr/include/asm-generic/errno.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/asm-generic/errno-base.h" 1 3 4
# 10 "/data/data/com.termux/files/usr/include/asm-generic/errno.h" 2 3 4
# 8 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/errno.h" 2 3 4
# 8 "/data/data/com.termux/files/usr/include/linux/errno.h" 2 3 4
# 38 "/data/data/com.termux/files/usr/include/errno.h" 2 3 4

extern "C" {
# 52 "/data/data/com.termux/files/usr/include/errno.h" 3 4
int* _Nonnull __errno(void) __attribute__((__const__));







}
# 33 "/data/data/com.termux/files/usr/include/c++/v1/errno.h" 2 3
# 26 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2



# 1 "/data/data/com.termux/files/usr/include/unistd.h" 1 3 4
# 31 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/sys/select.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/sys/select.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/time.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/bits/timespec.h" 1 3 4
# 46 "/data/data/com.termux/files/usr/include/bits/timespec.h" 3 4
struct timespec {

  time_t tv_sec;

  long tv_nsec;
};
# 10 "/data/data/com.termux/files/usr/include/linux/time.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/linux/time_types.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/linux/time.h" 1 3 4
# 10 "/data/data/com.termux/files/usr/include/linux/time_types.h" 2 3 4

struct __kernel_timespec {
  __kernel_time64_t tv_sec;
  long long tv_nsec;
};
struct __kernel_itimerspec {
  struct __kernel_timespec it_interval;
  struct __kernel_timespec it_value;
};
struct __kernel_old_timespec {
  __kernel_old_time_t tv_sec;
  long tv_nsec;
};
struct __kernel_sock_timeval {
  __s64 tv_sec;
  __s64 tv_usec;
};
# 12 "/data/data/com.termux/files/usr/include/linux/time.h" 2 3 4



struct timeval {
  __kernel_old_time_t tv_sec;
  __kernel_suseconds_t tv_usec;
};
struct itimerspec {
  struct timespec it_interval;
  struct timespec it_value;
};
struct itimerval {
  struct timeval it_interval;
  struct timeval it_value;
};
struct timezone {
  int tz_minuteswest;
  int tz_dsttime;
};
# 40 "/data/data/com.termux/files/usr/include/sys/select.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/signal.h" 1 3 4
# 35 "/data/data/com.termux/files/usr/include/signal.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/sigcontext.h" 1 3 4
# 11 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/sigcontext.h" 3 4
struct sigcontext {
  __u64 fault_address;
  __u64 regs[31];
  __u64 sp;
  __u64 pc;
  __u64 pstate;
  __u8 __reserved[4096] __attribute__((__aligned__(16)));
};
struct _aarch64_ctx {
  __u32 magic;
  __u32 size;
};

struct fpsimd_context {
  struct _aarch64_ctx head;
  __u32 fpsr;
  __u32 fpcr;
  __uint128_t vregs[32];
};

struct esr_context {
  struct _aarch64_ctx head;
  __u64 esr;
};

struct extra_context {
  struct _aarch64_ctx head;
  __u64 datap;
  __u32 size;
  __u32 __reserved[3];
};

struct sve_context {
  struct _aarch64_ctx head;
  __u16 vl;
  __u16 flags;
  __u16 __reserved[2];
};


struct tpidr2_context {
  struct _aarch64_ctx head;
  __u64 tpidr2;
};

struct za_context {
  struct _aarch64_ctx head;
  __u16 vl;
  __u16 __reserved[3];
};

struct zt_context {
  struct _aarch64_ctx head;
  __u16 nregs;
  __u16 __reserved[3];
};

# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/sve_context.h" 1 3 4
# 69 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/sigcontext.h" 2 3 4
# 36 "/data/data/com.termux/files/usr/include/signal.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/bits/signal_types.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/bits/signal_types.h" 3 4
# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/limits.h" 1 3 4
# 25 "/data/data/com.termux/files/usr/lib/clang/19/include/limits.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/limits.h" 1 3 4
# 41 "/data/data/com.termux/files/usr/include/limits.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/float.h" 1 3 4
# 77 "/data/data/com.termux/files/usr/include/c++/v1/float.h" 3



# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/float.h" 1 3
# 81 "/data/data/com.termux/files/usr/include/c++/v1/float.h" 2 3
# 42 "/data/data/com.termux/files/usr/include/limits.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/linux/limits.h" 1 3 4
# 44 "/data/data/com.termux/files/usr/include/limits.h" 2 3 4
# 143 "/data/data/com.termux/files/usr/include/limits.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/posix_limits.h" 1 3 4
# 144 "/data/data/com.termux/files/usr/include/limits.h" 2 3 4
# 26 "/data/data/com.termux/files/usr/lib/clang/19/include/limits.h" 2 3 4
# 34 "/data/data/com.termux/files/usr/include/bits/signal_types.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/signal.h" 1 3 4








# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/signal.h" 1 3 4
# 12 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/signal.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/signal.h" 1 3 4
# 56 "/data/data/com.termux/files/usr/include/asm-generic/signal.h" 3 4
typedef struct {
  unsigned long sig[(64 / 64)];
} sigset_t;
typedef unsigned long old_sigset_t;
# 1 "/data/data/com.termux/files/usr/include/asm-generic/signal-defs.h" 1 3 4
# 45 "/data/data/com.termux/files/usr/include/asm-generic/signal-defs.h" 3 4
typedef void __signalfn_t(int);
typedef __signalfn_t * __sighandler_t;
typedef void __restorefn_t(void);
typedef __restorefn_t * __sigrestore_t;
# 61 "/data/data/com.termux/files/usr/include/asm-generic/signal.h" 2 3 4



struct __kernel_sigaction {
  __sighandler_t sa_handler;
  unsigned long sa_flags;

  __sigrestore_t sa_restorer;

  sigset_t sa_mask;
};
typedef struct sigaltstack {
  void * ss_sp;
  int ss_flags;
  __kernel_size_t ss_size;
} stack_t;
# 13 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/signal.h" 2 3 4
# 10 "/data/data/com.termux/files/usr/include/linux/signal.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/siginfo.h" 1 3 4






# 1 "/data/data/com.termux/files/usr/include/asm-generic/siginfo.h" 1 3 4
# 11 "/data/data/com.termux/files/usr/include/asm-generic/siginfo.h" 3 4
typedef union sigval {
  int sival_int;
  void * sival_ptr;
} sigval_t;
# 25 "/data/data/com.termux/files/usr/include/asm-generic/siginfo.h" 3 4
union __sifields {
  struct {
    __kernel_pid_t _pid;
    __kernel_uid32_t _uid;
  } _kill;
  struct {
    __kernel_timer_t _tid;
    int _overrun;
    sigval_t _sigval;
    int _sys_private;
  } _timer;
  struct {
    __kernel_pid_t _pid;
    __kernel_uid32_t _uid;
    sigval_t _sigval;
  } _rt;
  struct {
    __kernel_pid_t _pid;
    __kernel_uid32_t _uid;
    int _status;
    __kernel_clock_t _utime;
    __kernel_clock_t _stime;
  } _sigchld;
  struct {
    void * _addr;

    union {
      int _trapno;
      short _addr_lsb;
      struct {
        char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
        void * _lower;
        void * _upper;
      } _addr_bnd;
      struct {
        char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
        __u32 _pkey;
      } _addr_pkey;
      struct {
        unsigned long _data;
        __u32 _type;
        __u32 _flags;
      } _perf;
    };
  } _sigfault;
  struct {
    long _band;
    int _fd;
  } _sigpoll;
  struct {
    void * _call_addr;
    int _syscall;
    unsigned int _arch;
  } _sigsys;
};







typedef struct siginfo {
  union {
    struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
    int _si_pad[128 / sizeof(int)];
  };
} siginfo_t;
# 215 "/data/data/com.termux/files/usr/include/asm-generic/siginfo.h" 3 4
typedef struct sigevent {
  sigval_t sigev_value;
  int sigev_signo;
  int sigev_notify;
  union {
    int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
    int _tid;
    struct {
      void(* _function) (sigval_t);
      void * _attribute;
    } _sigev_thread;
  } _sigev_un;
} sigevent_t;
# 8 "/data/data/com.termux/files/usr/include/aarch64-linux-android/asm/siginfo.h" 2 3 4
# 11 "/data/data/com.termux/files/usr/include/linux/signal.h" 2 3 4
# 35 "/data/data/com.termux/files/usr/include/bits/signal_types.h" 2 3 4
# 46 "/data/data/com.termux/files/usr/include/bits/signal_types.h" 3 4
typedef int sig_atomic_t;

typedef __sighandler_t sig_t;
typedef __sighandler_t sighandler_t;





typedef sigset_t sigset64_t;
# 76 "/data/data/com.termux/files/usr/include/bits/signal_types.h" 3 4
struct sigaction { int sa_flags; union { sighandler_t sa_handler; void (*sa_sigaction)(int, struct siginfo*, void*); }; sigset_t sa_mask; void (*sa_restorer)(void); };
struct sigaction64 { int sa_flags; union { sighandler_t sa_handler; void (*sa_sigaction)(int, struct siginfo*, void*); }; sigset_t sa_mask; void (*sa_restorer)(void); };
# 38 "/data/data/com.termux/files/usr/include/signal.h" 2 3 4



# 1 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/signal.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/user.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/sys/user.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/user.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/bits/page_size.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/bits/page_size.h" 3 4
extern "C" {
# 49 "/data/data/com.termux/files/usr/include/bits/page_size.h" 3 4
}
# 36 "/data/data/com.termux/files/usr/include/sys/user.h" 2 3 4

extern "C" {
# 222 "/data/data/com.termux/files/usr/include/sys/user.h" 3 4
struct user_regs_struct {
  uint64_t regs[31];
  uint64_t sp;
  uint64_t pc;
  uint64_t pstate;
};
struct user_fpsimd_struct {
  __uint128_t vregs[32];
  uint32_t fpsr;
  uint32_t fpcr;
};
# 245 "/data/data/com.termux/files/usr/include/sys/user.h" 3 4
}
# 35 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 2 3 4

extern "C" {
# 105 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 3 4
typedef unsigned long greg_t;
typedef greg_t gregset_t[34];
typedef struct user_fpsimd_struct fpregset_t;


typedef struct sigcontext mcontext_t;

typedef struct ucontext {
  unsigned long uc_flags;
  struct ucontext *uc_link;
  stack_t uc_stack;
  union {
    sigset_t uc_sigmask;
    sigset64_t uc_sigmask64;
  };

  char __padding[128 - sizeof(sigset_t)];
  mcontext_t uc_mcontext;
} ucontext_t;
# 392 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 3 4
}
# 42 "/data/data/com.termux/files/usr/include/signal.h" 2 3 4


extern "C" {
# 54 "/data/data/com.termux/files/usr/include/signal.h" 3 4
int __libc_current_sigrtmin(void);
int __libc_current_sigrtmax(void);

extern const char* _Nonnull const sys_siglist[(64 + 1)];
extern const char* _Nonnull const sys_signame[(64 + 1)];



int sigaction(int __signal, const struct sigaction* _Nullable __new_action, struct sigaction* _Nullable __old_action);






int siginterrupt(int __signal, int __flag);

sighandler_t _Nonnull signal(int __signal, sighandler_t _Nullable __handler);
int sigaddset(sigset_t* _Nonnull __set, int __signal);





int sigdelset(sigset_t* _Nonnull __set, int __signal);





int sigemptyset(sigset_t* _Nonnull __set);





int sigfillset(sigset_t* _Nonnull __set);





int sigismember(const sigset_t* _Nonnull __set, int __signal);






int sigpending(sigset_t* _Nonnull __set);





int sigprocmask(int __how, const sigset_t* _Nullable __new_set, sigset_t* _Nullable __old_set);





int sigsuspend(const sigset_t* _Nonnull __mask);





int sigwait(const sigset_t* _Nonnull __set, int* _Nonnull __signal);
# 145 "/data/data/com.termux/files/usr/include/signal.h" 3 4
int raise(int __signal);
int kill(pid_t __pid, int __signal);
int killpg(int __pgrp, int __signal);
int tgkill(int __tgid, int __tid, int __signal);

int sigaltstack(const stack_t* _Nullable __new_signal_stack, stack_t* _Nullable __old_signal_stack);

void psiginfo(const siginfo_t* _Nonnull __info, const char* _Nullable __msg);
void psignal(int __signal, const char* _Nullable __msg);

int pthread_kill(pthread_t __pthread, int __signal);
# 164 "/data/data/com.termux/files/usr/include/signal.h" 3 4
int pthread_sigmask(int __how, const sigset_t* _Nullable __new_set, sigset_t* _Nullable __old_set);
# 173 "/data/data/com.termux/files/usr/include/signal.h" 3 4
int sigqueue(pid_t __pid, int __signal, const union sigval __value) __attribute__((__availability__(android,strict,introduced=23 )));
int sigtimedwait(const sigset_t* _Nonnull __set, siginfo_t* _Nullable __info, const struct timespec* _Nullable __timeout) __attribute__((__availability__(android,strict,introduced=23 )));
# 184 "/data/data/com.termux/files/usr/include/signal.h" 3 4
int sigwaitinfo(const sigset_t* _Nonnull __set, siginfo_t* _Nullable __info) __attribute__((__availability__(android,strict,introduced=23 )));
# 193 "/data/data/com.termux/files/usr/include/signal.h" 3 4
}
# 41 "/data/data/com.termux/files/usr/include/sys/select.h" 2 3 4

extern "C" {

typedef unsigned long fd_mask;
# 57 "/data/data/com.termux/files/usr/include/sys/select.h" 3 4
typedef struct {
  fd_mask fds_bits[1024/(8 * sizeof(fd_mask))];
} fd_set;
# 74 "/data/data/com.termux/files/usr/include/sys/select.h" 3 4
void __FD_CLR_chk(int, fd_set* _Nonnull , size_t);
void __FD_SET_chk(int, fd_set* _Nonnull, size_t);
int __FD_ISSET_chk(int, const fd_set* _Nonnull, size_t);
# 98 "/data/data/com.termux/files/usr/include/sys/select.h" 3 4
int select(int __max_fd_plus_one, fd_set* _Nullable __read_fds, fd_set* _Nullable __write_fds, fd_set* _Nullable __exception_fds, struct timeval* _Nullable __timeout);
# 109 "/data/data/com.termux/files/usr/include/sys/select.h" 3 4
int pselect(int __max_fd_plus_one, fd_set* _Nullable __read_fds, fd_set* _Nullable __write_fds, fd_set* _Nullable __exception_fds, const struct timespec* _Nullable __timeout, const sigset_t* _Nullable __mask);
# 128 "/data/data/com.termux/files/usr/include/sys/select.h" 3 4
}
# 35 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/bits/fcntl.h" 1 3 4
# 38 "/data/data/com.termux/files/usr/include/bits/fcntl.h" 3 4
extern "C" {







int fcntl(int __fd, int __op, ...);

}
# 37 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/getentropy.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/bits/getentropy.h" 3 4
extern "C" {
# 57 "/data/data/com.termux/files/usr/include/bits/getentropy.h" 3 4
}
# 38 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/getopt.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/bits/getopt.h" 3 4
extern "C" {







int getopt(int __argc, char* const _Nonnull __argv[_Nullable], const char* _Nonnull __options);




extern char* _Nullable optarg;






extern int optind;






extern int opterr;




extern int optopt;

}
# 39 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/ioctl.h" 1 3 4
# 38 "/data/data/com.termux/files/usr/include/bits/ioctl.h" 3 4
extern "C" {




int ioctl(int __fd, int __op, ...);
# 60 "/data/data/com.termux/files/usr/include/bits/ioctl.h" 3 4
int ioctl(int __fd, unsigned __op, ...) __attribute__((__overloadable__)) __attribute__((__enable_if__(1, ""))) __asm__("ioctl");


}
# 40 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/lockf.h" 1 3 4
# 48 "/data/data/com.termux/files/usr/include/bits/lockf.h" 3 4
extern "C" {
# 61 "/data/data/com.termux/files/usr/include/bits/lockf.h" 3 4
int lockf(int __fd, int __op, off_t __length) __attribute__((__availability__(android,strict,introduced=24 )));





int lockf64(int __fd, int __op, off64_t __length) __attribute__((__availability__(android,strict,introduced=24 )));



}
# 41 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/bits/sysconf.h" 1 3 4
# 332 "/data/data/com.termux/files/usr/include/bits/sysconf.h" 3 4
extern "C" {
# 347 "/data/data/com.termux/files/usr/include/bits/sysconf.h" 3 4
long sysconf(int __name);

}
# 44 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4

extern "C" {
# 77 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
extern char* _Nullable * _Nullable environ;

__attribute__((__noreturn__)) void _exit(int __status);
# 88 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
pid_t fork(void);
# 118 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
pid_t vfork(void) __attribute__((__returns_twice__));







pid_t getpid(void);







pid_t gettid(void);

pid_t getpgid(pid_t __pid);
int setpgid(pid_t __pid, pid_t __pgid);
pid_t getppid(void);
pid_t getpgrp(void);
int setpgrp(void);
pid_t getsid(pid_t __pid);
pid_t setsid(void);

int execv(const char* _Nonnull __path, char* _Nullable const* _Nullable __argv);
int execvp(const char* _Nonnull __file, char* _Nullable const* _Nullable __argv);
int execvpe(const char* _Nonnull __file, char* _Nullable const* _Nullable __argv, char* _Nullable const* _Nullable __envp);
int execve(const char* _Nonnull __file, char* _Nullable const* _Nullable __argv, char* _Nullable const* _Nullable __envp);
int execl(const char* _Nonnull __path, const char* _Nullable __arg0, ...) __attribute__((__sentinel__));
int execlp(const char* _Nonnull __file, const char* _Nullable __arg0, ...) __attribute__((__sentinel__));
int execle(const char* _Nonnull __path, const char* _Nullable __arg0, ... )
    __attribute__((__sentinel__(1)));






int nice(int __incr);
# 169 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int setegid(gid_t __gid);
# 180 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int seteuid(uid_t __uid);
# 191 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int setgid(gid_t __gid);
# 202 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int setregid(gid_t __rgid, gid_t __egid);
# 213 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int setresgid(gid_t __rgid, gid_t __egid, gid_t __sgid);
# 224 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int setresuid(uid_t __ruid, uid_t __euid, uid_t __suid);
# 235 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int setreuid(uid_t __ruid, uid_t __euid);
# 246 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int setuid(uid_t __uid);

uid_t getuid(void);
uid_t geteuid(void);
gid_t getgid(void);
gid_t getegid(void);
int getgroups(int __size, gid_t* _Nullable __list);
int setgroups(size_t __size, const gid_t* _Nullable __list);
int getresuid(uid_t* _Nonnull __ruid, uid_t* _Nonnull __euid, uid_t* _Nonnull __suid);
int getresgid(gid_t* _Nonnull __rgid, gid_t* _Nonnull __egid, gid_t* _Nonnull __sgid);
char* _Nullable getlogin(void);






long fpathconf(int __fd, int __name);
long pathconf(const char* _Nonnull __path, int __name);

int access(const char* _Nonnull __path, int __mode);
int faccessat(int __dirfd, const char* _Nonnull __path, int __mode, int __flags);
int link(const char* _Nonnull __old_path, const char* _Nonnull __new_path);
int linkat(int __old_dir_fd, const char* _Nonnull __old_path, int __new_dir_fd, const char* _Nonnull __new_path, int __flags);
int unlink(const char* _Nonnull __path);
int unlinkat(int __dirfd, const char* _Nonnull __path, int __flags);
int chdir(const char* _Nonnull __path);
int fchdir(int __fd);
int rmdir(const char* _Nonnull __path);
int pipe(int __fds[_Nonnull 2]);

int pipe2(int __fds[_Nonnull 2], int __flags);

int chroot(const char* _Nonnull __path);
int symlink(const char* _Nonnull __old_path, const char* _Nonnull __new_path);
int symlinkat(const char* _Nonnull __old_path, int __new_dir_fd, const char* _Nonnull __new_path);
ssize_t readlink(const char* _Nonnull __path, char* _Nonnull __buf, size_t __buf_size);
ssize_t readlinkat(int __dir_fd, const char* _Nonnull __path, char* _Nonnull __buf, size_t __buf_size);
int chown(const char* _Nonnull __path, uid_t __owner, gid_t __group);
int fchown(int __fd, uid_t __owner, gid_t __group);
int fchownat(int __dir_fd, const char* _Nonnull __path, uid_t __owner, gid_t __group, int __flags);
int lchown(const char* _Nonnull __path, uid_t __owner, gid_t __group);
char* _Nullable getcwd(char* _Nullable __buf, size_t __size);

void sync(void);
# 299 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int close(int __fd);
# 311 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
ssize_t read(int __fd, void* _Null_unspecified __buf, size_t __count);
# 323 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
ssize_t write(int __fd, const void* _Null_unspecified __buf, size_t __count);

int dup(int __old_fd);
int dup2(int __old_fd, int __new_fd);
int dup3(int __old_fd, int __new_fd, int __flags);
int fsync(int __fd);
int fdatasync(int __fd);
# 339 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int truncate(const char* _Nonnull __path, off_t __length);
off_t lseek(int __fd, off_t __offset, int __whence);
ssize_t pread(int __fd, void* _Nonnull __buf, size_t __count, off_t __offset);
ssize_t pwrite(int __fd, const void* _Nonnull __buf, size_t __count, off_t __offset);
int ftruncate(int __fd, off_t __length);


int truncate64(const char* _Nonnull __path, off64_t __length);
off64_t lseek64(int __fd, off64_t __offset, int __whence);
ssize_t pread64(int __fd, void* _Nonnull __buf, size_t __count, off64_t __offset);
ssize_t pwrite64(int __fd, const void* _Nonnull __buf, size_t __count, off64_t __offset);
int ftruncate64(int __fd, off64_t __length);

int pause(void);
unsigned int alarm(unsigned int __seconds);
unsigned int sleep(unsigned int __seconds);
int usleep(useconds_t __microseconds);

int gethostname(char* _Nonnull _buf, size_t __buf_size);


int sethostname(const char* _Nonnull __name, size_t __n) __attribute__((__availability__(android,strict,introduced=23 )));



int brk(void* _Nonnull __addr);
void* _Nullable sbrk(ptrdiff_t __increment);

int isatty(int __fd);
char* _Nullable ttyname(int __fd);
int ttyname_r(int __fd, char* _Nonnull __buf, size_t __buf_size);

int acct(const char* _Nullable __path);
# 380 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
int getpagesize(void) __attribute__((__const__));

long syscall(long __number, ...);

int daemon(int __no_chdir, int __no_close);
# 394 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
pid_t tcgetpgrp(int __fd);
int tcsetpgrp(int __fd, pid_t __pid);
# 463 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
static __inline__ char* getpass(const char* prompt) {

    struct _termios {
        unsigned int c_iflag;
        unsigned int c_oflag;
        unsigned int c_cflag;
        unsigned int c_lflag;
        unsigned char c_line;
        unsigned char c_cc[19 ];
    };

    struct _termios term_old, term_new;
    static char password[513] = { 0 };
    int len = 0, tty_changed = 0;


    while (*prompt) {
        write(1, prompt, 1);
        prompt++;
    }


    if (ioctl(0, 0x5401 , &term_old) == 0) {
        term_new = term_old;
        term_new.c_lflag &= ~0000010;

        if (ioctl(0, 0x5402+0 , &term_new) == 0) {
            tty_changed = 1;
        } else {
            tty_changed = 0;
        }
    }


    char chr;
    while (read(0, &chr, sizeof(char)) > 0) {
        if (chr == '\r' || chr == '\n' || chr == 0) {
            break;
        }

        if (len == sizeof(password)-1) {


            continue;
        } else {
            password[len++] = chr;
        }
    }
    password[len] = 0;


    if (tty_changed) {
        ioctl(0, 0x5402+0 , &term_old);
    }


    write(1, "\n", 1);

    return password;
}


}

# 1 "/data/data/com.termux/files/usr/include/android/legacy_unistd_inlines.h" 1 3 4
# 36 "/data/data/com.termux/files/usr/include/android/legacy_unistd_inlines.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/swab.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/bits/swab.h" 3 4
extern "C" {

static __inline__ void swab(const void* _Nonnull __void_src, void* _Nonnull __void_dst, ssize_t __byte_count) {
  const uint8_t* __src = (static_cast<const uint8_t*>(__void_src));
  uint8_t* __dst = (static_cast<uint8_t*>(__void_dst));
  while (__byte_count > 1) {
    uint8_t x = *__src++;
    uint8_t y = *__src++;
    *__dst++ = y;
    *__dst++ = x;
    __byte_count -= 2;
  }
}

}
# 37 "/data/data/com.termux/files/usr/include/android/legacy_unistd_inlines.h" 2 3 4
# 528 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4
# 30 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2





# 1 "/data/data/com.termux/files/usr/include/assert.h" 1 3 4
# 73 "/data/data/com.termux/files/usr/include/assert.h" 3 4
extern "C" {





void __assert(const char* _Nonnull __file, int __line, const char* _Nonnull __msg) __attribute__((__noreturn__));





void __assert2(const char* _Nonnull __file, int __line, const char* _Nonnull __function, const char* _Nonnull __msg) __attribute__((__noreturn__));

}
# 36 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/c++/v1/wchar.h" 1 3
# 109 "/data/data/com.termux/files/usr/include/c++/v1/wchar.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3
# 110 "/data/data/com.termux/files/usr/include/c++/v1/wchar.h" 2 3
# 118 "/data/data/com.termux/files/usr/include/c++/v1/wchar.h" 3
# 127 "/data/data/com.termux/files/usr/include/c++/v1/wchar.h" 3
# 1 "/data/data/com.termux/files/usr/include/wchar.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/wchar.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdio.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/wchar.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 1 3 4
# 36 "/data/data/com.termux/files/usr/include/wchar.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 37 "/data/data/com.termux/files/usr/include/wchar.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/time.h" 1 3 4
# 37 "/data/data/com.termux/files/usr/include/time.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/time.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/sys/time.h" 3 4
extern "C" {

int gettimeofday(struct timeval* _Nullable __tv, struct timezone* _Nullable __tz);
int settimeofday(const struct timeval* _Nullable __tv, const struct timezone* _Nullable __tz);

int getitimer(int __which, struct itimerval* _Nonnull __current_value);
int setitimer(int __which, const struct itimerval* _Nonnull __new_value, struct itimerval* _Nullable __old_value);

int utimes(const char* _Nonnull __path, const struct timeval __times[_Nullable 2]);



int futimes(int __fd, const struct timeval __times[_Nullable 2]);
int lutimes(const char* _Nonnull __path, const struct timeval __times[_Nullable 2]);
# 71 "/data/data/com.termux/files/usr/include/sys/time.h" 3 4
int futimesat(int __dir_fd, const char* _Null_unspecified __path, const struct timeval __times[_Nullable 2]);
# 115 "/data/data/com.termux/files/usr/include/sys/time.h" 3 4
}
# 38 "/data/data/com.termux/files/usr/include/time.h" 2 3 4


extern "C" {
# 63 "/data/data/com.termux/files/usr/include/time.h" 3 4
extern char* _Nonnull tzname[];


extern int daylight;


extern long int timezone;

struct sigevent;




struct tm {

  int tm_sec;

  int tm_min;

  int tm_hour;

  int tm_mday;

  int tm_mon;

  int tm_year;

  int tm_wday;

  int tm_yday;

  int tm_isdst;

  long int tm_gmtoff;

  const char* _Nullable tm_zone;
};
# 110 "/data/data/com.termux/files/usr/include/time.h" 3 4
time_t time(time_t* _Nullable __t);
# 120 "/data/data/com.termux/files/usr/include/time.h" 3 4
int nanosleep(const struct timespec* _Nonnull __duration, struct timespec* _Nullable __remainder);
# 132 "/data/data/com.termux/files/usr/include/time.h" 3 4
char* _Nullable asctime(const struct tm* _Nonnull __tm);
# 142 "/data/data/com.termux/files/usr/include/time.h" 3 4
char* _Nullable asctime_r(const struct tm* _Nonnull __tm, char* _Nonnull __buf);







double difftime(time_t __lhs, time_t __rhs);
# 161 "/data/data/com.termux/files/usr/include/time.h" 3 4
time_t mktime(struct tm* _Nonnull __tm);
# 186 "/data/data/com.termux/files/usr/include/time.h" 3 4
struct tm* _Nullable localtime(const time_t* _Nonnull __t);
# 198 "/data/data/com.termux/files/usr/include/time.h" 3 4
struct tm* _Nullable localtime_r(const time_t* _Nonnull __t, struct tm* _Nonnull __tm);
# 218 "/data/data/com.termux/files/usr/include/time.h" 3 4
time_t timelocal(struct tm* _Nonnull __tm);
# 229 "/data/data/com.termux/files/usr/include/time.h" 3 4
struct tm* _Nullable gmtime(const time_t* _Nonnull __t);
# 240 "/data/data/com.termux/files/usr/include/time.h" 3 4
struct tm* _Nullable gmtime_r(const time_t* _Nonnull __t, struct tm* _Nonnull __tm);




time_t timegm(struct tm* _Nonnull __tm);







char* _Nullable strptime(const char* _Nonnull __s, const char* _Nonnull __fmt, struct tm* _Nonnull __tm) __attribute__((__format__(strftime, 2, 0)));
# 270 "/data/data/com.termux/files/usr/include/time.h" 3 4
size_t strftime(char* _Nonnull __buf, size_t __n, const char* _Nonnull __fmt, const struct tm* _Nullable __tm) __attribute__((__format__(strftime, 3, 0)));




size_t strftime_l(char* _Nonnull __buf, size_t __n, const char* _Nonnull __fmt, const struct tm* _Nullable __tm, locale_t _Nonnull __l) __attribute__((__format__(strftime, 3, 0)));
# 287 "/data/data/com.termux/files/usr/include/time.h" 3 4
char* _Nullable ctime(const time_t* _Nonnull __t);
# 297 "/data/data/com.termux/files/usr/include/time.h" 3 4
char* _Nullable ctime_r(const time_t* _Nonnull __t, char* _Nonnull __buf);
# 311 "/data/data/com.termux/files/usr/include/time.h" 3 4
void tzset(void);
# 358 "/data/data/com.termux/files/usr/include/time.h" 3 4
clock_t clock(void);
# 368 "/data/data/com.termux/files/usr/include/time.h" 3 4
int clock_getcpuclockid(pid_t __pid, clockid_t* _Nonnull __clock) __attribute__((__availability__(android,strict,introduced=23 )));
# 378 "/data/data/com.termux/files/usr/include/time.h" 3 4
int clock_getres(clockid_t __clock, struct timespec* _Nullable __resolution);







int clock_gettime(clockid_t __clock, struct timespec* _Nonnull __ts);
# 397 "/data/data/com.termux/files/usr/include/time.h" 3 4
int clock_nanosleep(clockid_t __clock, int __flags, const struct timespec* _Nonnull __time, struct timespec* _Nullable __remainder);







int clock_settime(clockid_t __clock, const struct timespec* _Nonnull __ts);







int timer_create(clockid_t __clock, struct sigevent* _Nullable __event, timer_t _Nonnull * _Nonnull __timer_ptr);







int timer_delete(timer_t _Nonnull __timer);







int timer_settime(timer_t _Nonnull __timer, int __flags, const struct itimerspec* _Nonnull __new_value, struct itimerspec* _Nullable __old_value);







int timer_gettime(timer_t _Nonnull _timer, struct itimerspec* _Nonnull __ts);
# 446 "/data/data/com.termux/files/usr/include/time.h" 3 4
int timer_getoverrun(timer_t _Nonnull __timer);
# 504 "/data/data/com.termux/files/usr/include/time.h" 3 4
}
# 38 "/data/data/com.termux/files/usr/include/wchar.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/bits/bionic_multibyte_result.h" 1 3 4
# 37 "/data/data/com.termux/files/usr/include/bits/bionic_multibyte_result.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3 4
# 38 "/data/data/com.termux/files/usr/include/bits/bionic_multibyte_result.h" 2 3 4


extern "C" {







enum : size_t {


  BIONIC_MULTIBYTE_RESULT_ILLEGAL_SEQUENCE = -1UL,




  BIONIC_MULTIBYTE_RESULT_INCOMPLETE_SEQUENCE = -2UL,







  BIONIC_MULTIBYTE_RESULT_NO_BYTES_CONSUMED = -3UL,

};

}
# 41 "/data/data/com.termux/files/usr/include/wchar.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/bits/mbstate_t.h" 1 3 4
# 42 "/data/data/com.termux/files/usr/include/bits/mbstate_t.h" 3 4
typedef struct {
  unsigned char __seq[4];

  unsigned char __reserved[4];

} mbstate_t;
# 42 "/data/data/com.termux/files/usr/include/wchar.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/bits/wctype.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/bits/wctype.h" 3 4
extern "C" {

typedef unsigned int wint_t;



int iswalnum(wint_t __wc);
int iswalpha(wint_t __wc);
int iswblank(wint_t __wc);
int iswcntrl(wint_t __wc);
int iswdigit(wint_t __wc);
int iswgraph(wint_t __wc);
int iswlower(wint_t __wc);
int iswprint(wint_t __wc);
int iswpunct(wint_t __wc);
int iswspace(wint_t __wc);
int iswupper(wint_t __wc);
int iswxdigit(wint_t __wc);

wint_t towlower(wint_t __wc);
wint_t towupper(wint_t __wc);

typedef long wctype_t;
wctype_t wctype(const char* _Nonnull __name);
int iswctype(wint_t __wc, wctype_t __type);

typedef const void* wctrans_t;
wint_t towctrans(wint_t __wc, wctrans_t _Nonnull __transform) ;
wctrans_t _Nullable wctrans(const char* _Nonnull __name) ;

}
# 44 "/data/data/com.termux/files/usr/include/wchar.h" 2 3 4

extern "C" {

wint_t btowc(int __ch);
int fwprintf(FILE* _Nonnull __fp, const wchar_t* _Nonnull __fmt, ...);
int fwscanf(FILE* _Nonnull __fp, const wchar_t* _Nonnull __fmt, ...);
wint_t fgetwc(FILE* _Nonnull __fp);
wchar_t* _Nullable fgetws(wchar_t* _Nonnull __buf, int __size, FILE* _Nonnull __fp);
wint_t fputwc(wchar_t __wc, FILE* _Nonnull __fp);
int fputws(const wchar_t* _Nonnull __s, FILE* _Nonnull __fp);
int fwide(FILE* _Nonnull __fp, int __mode);
wint_t getwc(FILE* _Nonnull __fp);
wint_t getwchar(void);
int mbsinit(const mbstate_t* _Nullable __ps);
size_t mbrlen(const char* _Nullable __s, size_t __n, mbstate_t* _Nullable __ps);
size_t mbrtowc(wchar_t* _Nullable __buf, const char* _Nullable __s, size_t __n, mbstate_t* _Nullable __ps);
size_t mbsrtowcs(wchar_t* _Nullable __dst, const char* _Nullable * _Nonnull __src, size_t __dst_n, mbstate_t* _Nullable __ps);





size_t mbsnrtowcs(wchar_t* _Nullable __dst, const char* _Nullable * _Nullable __src, size_t __src_n, size_t __dst_n, mbstate_t* _Nullable __ps);
wint_t putwc(wchar_t __wc, FILE* _Nonnull __fp);
wint_t putwchar(wchar_t __wc);
int swprintf(wchar_t* _Nonnull __buf, size_t __n, const wchar_t* _Nonnull __fmt, ...);
int swscanf(const wchar_t* _Nonnull __s, const wchar_t* _Nonnull __fmt, ...);
wint_t ungetwc(wint_t __wc, FILE* _Nonnull __fp);
int vfwprintf(FILE* _Nonnull __fp, const wchar_t* _Nonnull __fmt, va_list __args);
int vfwscanf(FILE* _Nonnull __fp, const wchar_t* _Nonnull __fmt, va_list __args);
int vswprintf(wchar_t* _Nonnull __buf, size_t __n, const wchar_t* _Nonnull __fmt, va_list __args);
int vswscanf(const wchar_t* _Nonnull __s, const wchar_t* _Nonnull __fmt, va_list __args);
int vwprintf(const wchar_t* _Nonnull __fmt, va_list __args);
int vwscanf(const wchar_t* _Nonnull __fmt, va_list __args);
wchar_t* _Nonnull wcpcpy(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src);
wchar_t* _Nonnull wcpncpy(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src, size_t __n);
size_t wcrtomb(char* _Nullable __buf, wchar_t __wc, mbstate_t* _Nullable __ps);
int wcscasecmp(const wchar_t* _Nonnull __lhs, const wchar_t* _Nonnull __rhs);


int wcscasecmp_l(const wchar_t* _Nonnull __lhs, const wchar_t* _Nonnull __rhs, locale_t _Nonnull __l) __attribute__((__availability__(android,strict,introduced=23 )));


wchar_t* _Nonnull wcscat(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src);
wchar_t* _Nullable wcschr(const wchar_t * _Nonnull __s, wchar_t __wc);
int wcscmp(const wchar_t* _Nonnull __lhs, const wchar_t* _Nonnull __rhs);
int wcscoll(const wchar_t* _Nonnull __lhs, const wchar_t* _Nonnull __rhs);
wchar_t* _Nonnull wcscpy(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src);
size_t wcscspn(const wchar_t* _Nonnull __s, const wchar_t* _Nonnull __accept);
size_t wcsftime(wchar_t* _Nonnull __buf, size_t __n, const wchar_t* _Nullable __fmt, const struct tm* _Nonnull __tm);





size_t wcslen(const wchar_t* _Nonnull __s);
int wcsncasecmp(const wchar_t* _Nonnull __lhs, const wchar_t* _Nonnull __rhs, size_t __n);


int wcsncasecmp_l(const wchar_t* _Nonnull __lhs, const wchar_t* _Nonnull __rhs, size_t __n, locale_t _Nonnull __l) __attribute__((__availability__(android,strict,introduced=23 )));


wchar_t* _Nonnull wcsncat(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src, size_t __n);
int wcsncmp(const wchar_t* _Nonnull __lhs, const wchar_t* _Nonnull __rhs, size_t __n);
wchar_t* _Nonnull wcsncpy(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src, size_t __n);
size_t wcsnrtombs(char* _Nullable __dst, const wchar_t* _Null_unspecified * _Nullable __src, size_t __src_n, size_t __dst_n, mbstate_t* _Nullable __ps);
wchar_t* _Nullable wcspbrk(const wchar_t* _Nonnull __s, const wchar_t* _Nonnull __accept);
wchar_t* _Nullable wcsrchr(const wchar_t* _Nonnull __s, wchar_t __wc);
size_t wcsrtombs(char* _Nullable __dst, const wchar_t* _Null_unspecified * _Nullable __src, size_t __dst_n, mbstate_t* _Nullable __ps);





size_t wcsspn(const wchar_t* _Nonnull __s, const wchar_t* _Nonnull __accept);
wchar_t* _Nullable wcsstr(const wchar_t* _Nonnull __haystack, const wchar_t* _Nonnull __needle);
double wcstod(const wchar_t* _Nonnull __s, wchar_t* _Null_unspecified * _Nullable __end_ptr);





float wcstof(const wchar_t* _Nonnull __s, wchar_t* _Null_unspecified * _Nullable __end_ptr);





wchar_t* _Nullable wcstok(wchar_t* _Nullable __s, const wchar_t* _Nonnull __delimiter, wchar_t* _Nonnull * _Nonnull __ptr);
long wcstol(const wchar_t* _Nonnull __s, wchar_t* _Null_unspecified * _Nullable __end_ptr, int __base);





long long wcstoll(const wchar_t* _Nonnull __s, wchar_t* _Null_unspecified * _Nullable __end_ptr, int __base);
long double wcstold(const wchar_t* _Nonnull __s, wchar_t* _Null_unspecified * _Nullable __end_ptr);
unsigned long wcstoul(const wchar_t* _Nonnull __s, wchar_t* _Null_unspecified * _Nullable __end_ptr, int __base);





unsigned long long wcstoull(const wchar_t* _Nonnull __s, wchar_t* _Null_unspecified * _Nullable __end_ptr, int __base);
int wcswidth(const wchar_t* _Nonnull __s, size_t __n);
size_t wcsxfrm(wchar_t* _Null_unspecified __dst, const wchar_t* _Nonnull __src, size_t __n);
int wctob(wint_t __wc);
int wcwidth(wchar_t __wc);
wchar_t* _Nullable wmemchr(const wchar_t* _Nonnull __src, wchar_t __wc, size_t __n);
int wmemcmp(const wchar_t* _Nullable __lhs, const wchar_t* _Nullable __rhs, size_t __n);
wchar_t* _Nonnull wmemcpy(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src, size_t __n);



wchar_t* _Nonnull wmempcpy(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src, size_t __n) __attribute__((__availability__(android,strict,introduced=23 )));



wchar_t* _Nonnull wmemmove(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src, size_t __n);
wchar_t* _Nonnull wmemset(wchar_t* _Nonnull __dst, wchar_t __wc, size_t __n);
int wprintf(const wchar_t* _Nonnull __fmt, ...);
int wscanf(const wchar_t* _Nonnull __fmt, ...);

long long wcstoll_l(const wchar_t* _Nonnull __s, wchar_t* _Nullable * _Nullable __end_ptr, int __base, locale_t _Nonnull __l);
unsigned long long wcstoull_l(const wchar_t* _Nonnull __s, wchar_t* _Nullable * _Nullable __end_ptr, int __base, locale_t _Nonnull __l);
long double wcstold_l(const wchar_t* _Nonnull __s, wchar_t* _Nullable * _Nullable __end_ptr, locale_t _Nonnull __l);

int wcscoll_l(const wchar_t* _Nonnull __lhs, const wchar_t* _Nonnull __rhs, locale_t _Nonnull __l) __attribute__((__pure__));
size_t wcsxfrm_l(wchar_t* _Null_unspecified __dst, const wchar_t* _Nonnull __src, size_t __n, locale_t _Nonnull __l);
size_t wcslcat(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src, size_t __n);
size_t wcslcpy(wchar_t* _Nonnull __dst, const wchar_t* _Nonnull __src, size_t __n);



FILE* _Nullable open_wmemstream(wchar_t* _Nonnull * _Nonnull __ptr, size_t* _Nonnull __size_ptr) __attribute__((__availability__(android,strict,introduced=23 )));


wchar_t* _Nullable wcsdup(const wchar_t* _Nonnull __s);
size_t wcsnlen(const wchar_t* _Nonnull __s, size_t __n);

}
# 128 "/data/data/com.termux/files/usr/include/c++/v1/wchar.h" 2 3
# 146 "/data/data/com.termux/files/usr/include/c++/v1/wchar.h" 3
extern "C++" {
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) wchar_t* __libcpp_wcschr(const wchar_t* __s, wchar_t __c) {
  return (wchar_t*)wcschr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const wchar_t* wcschr(const wchar_t* __s, wchar_t __c) {
  return __libcpp_wcschr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcschr(wchar_t* __s, wchar_t __c) {
  return __libcpp_wcschr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) wchar_t* __libcpp_wcspbrk(const wchar_t* __s1, const wchar_t* __s2) {
  return (wchar_t*)wcspbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wcspbrk(const wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcspbrk(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcspbrk(wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcspbrk(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) wchar_t* __libcpp_wcsrchr(const wchar_t* __s, wchar_t __c) {
  return (wchar_t*)wcsrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const wchar_t* wcsrchr(const wchar_t* __s, wchar_t __c) {
  return __libcpp_wcsrchr(__s, __c);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcsrchr(wchar_t* __s, wchar_t __c) {
  return __libcpp_wcsrchr(__s, __c);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) wchar_t* __libcpp_wcsstr(const wchar_t* __s1, const wchar_t* __s2) {
  return (wchar_t*)wcsstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wcsstr(const wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcsstr(__s1, __s2);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wcsstr(wchar_t* __s1, const wchar_t* __s2) {
  return __libcpp_wcsstr(__s1, __s2);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) wchar_t* __libcpp_wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) {
  return (wchar_t*)wmemchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) const wchar_t*
wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) {
  return __libcpp_wmemchr(__s, __c, __n);
}
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) wchar_t* wmemchr(wchar_t* __s, wchar_t __c, size_t __n) {
  return __libcpp_wmemchr(__s, __c, __n);
}
}
# 37 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2

# 1 "/data/data/com.termux/files/usr/include/python3.12/pyport.h" 1





# 1 "/data/data/com.termux/files/usr/include/c++/v1/inttypes.h" 1 3
# 242 "/data/data/com.termux/files/usr/include/c++/v1/inttypes.h" 3
# 252 "/data/data/com.termux/files/usr/include/c++/v1/inttypes.h" 3
# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/inttypes.h" 1 3
# 24 "/data/data/com.termux/files/usr/lib/clang/19/include/inttypes.h" 3
# 1 "/data/data/com.termux/files/usr/include/inttypes.h" 1 3 4
# 324 "/data/data/com.termux/files/usr/include/inttypes.h" 3 4
typedef struct {
 intmax_t quot;
 intmax_t rem;
} imaxdiv_t;

extern "C" {
intmax_t imaxabs(intmax_t __i) __attribute__((__const__));
imaxdiv_t imaxdiv(intmax_t __numerator, intmax_t __denominator) __attribute__((__const__));
intmax_t strtoimax(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base);
uintmax_t strtoumax(const char* _Nonnull __s, char* _Nullable * _Nullable __end_ptr, int __base);
intmax_t wcstoimax(const wchar_t* _Nonnull __s, wchar_t* _Nullable * _Nullable __end_ptr, int __base);
uintmax_t wcstoumax(const wchar_t* _Nonnull __s, wchar_t* _Nullable * _Nullable __end_ptr, int __base);
}
# 25 "/data/data/com.termux/files/usr/lib/clang/19/include/inttypes.h" 2 3
# 253 "/data/data/com.termux/files/usr/include/c++/v1/inttypes.h" 2 3
# 7 "/data/data/com.termux/files/usr/include/python3.12/pyport.h" 2
# 120 "/data/data/com.termux/files/usr/include/python3.12/pyport.h"
typedef uintptr_t Py_uintptr_t;
typedef intptr_t Py_intptr_t;
# 131 "/data/data/com.termux/files/usr/include/python3.12/pyport.h"
typedef ssize_t Py_ssize_t;
# 145 "/data/data/com.termux/files/usr/include/python3.12/pyport.h"
typedef Py_ssize_t Py_hash_t;


typedef size_t Py_uhash_t;


typedef Py_ssize_t Py_ssize_clean_t;
# 195 "/data/data/com.termux/files/usr/include/python3.12/pyport.h"
# 1 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 1 3
# 298 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 3



# 1 "/data/data/com.termux/files/usr/include/math.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/math.h" 3 4
extern "C" {



typedef double __double_t;
typedef __double_t double_t;
typedef float __float_t;
typedef __float_t float_t;
# 76 "/data/data/com.termux/files/usr/include/math.h" 3 4
double acos(double __x);
float acosf(float __x);
long double acosl(long double __x);

double asin(double __x);
float asinf(float __x);
long double asinl(long double __x);

double atan(double __x);
float atanf(float __x);
long double atanl(long double __x);

double atan2(double __y, double __x);
float atan2f(float __y, float __x);
long double atan2l(long double __y, long double __x);

double cos(double __x);
float cosf(float __x);
long double cosl(long double __x);

double sin(double __x);
float sinf(float __x);
long double sinl(long double __x);

double tan(double __x);
float tanf(float __x);
long double tanl(long double __x);

double acosh(double __x);
float acoshf(float __x);
long double acoshl(long double __x);

double asinh(double __x);
float asinhf(float __x);
long double asinhl(long double __x);

double atanh(double __x);
float atanhf(float __x);
long double atanhl(long double __x);

double cosh(double __x);
float coshf(float __x);
long double coshl(long double __x);

double sinh(double __x);
float sinhf(float __x);
long double sinhl(long double __x);

double tanh(double __x);
float tanhf(float __x);
long double tanhl(long double __x);

double exp(double __x);
float expf(float __x);
long double expl(long double __x);

double exp2(double __x);
float exp2f(float __x);
long double exp2l(long double __x);

double expm1(double __x);
float expm1f(float __x);
long double expm1l(long double __x);

double frexp(double __x, int* _Nonnull __exponent);
float frexpf(float __x, int* _Nonnull __exponent);
long double frexpl(long double __x, int* _Nonnull __exponent);

int ilogb(double __x) __attribute__((__const__));
int ilogbf(float __x) __attribute__((__const__));
int ilogbl(long double __x) __attribute__((__const__));

double ldexp(double __x, int __exponent);
float ldexpf(float __x, int __exponent);
long double ldexpl(long double __x, int __exponent);

double log(double __x);
float logf(float __x);
long double logl(long double __x);

double log10(double __x);
float log10f(float __x);
long double log10l(long double __x);

double log1p(double __x);
float log1pf(float __x);
long double log1pl(long double __x);

double log2(double __x);
float log2f(float __x);
long double log2l(long double __x);

double logb(double __x);
float logbf(float __x);
long double logbl(long double __x);

double modf(double __x, double* _Nonnull __integral_part);
float modff(float __x, float* _Nonnull __integral_part);
long double modfl(long double __x, long double* _Nonnull __integral_part);

double scalbn(double __x, int __exponent);
float scalbnf(float __x, int __exponent);
long double scalbnl(long double __x, int __exponent);

double scalbln(double __x, long __exponent);
float scalblnf(float __x, long __exponent);
long double scalblnl(long double __x, long __exponent);

double cbrt(double __x);
float cbrtf(float __x);
long double cbrtl(long double __x);

double fabs(double __x) __attribute__((__const__));
float fabsf(float __x) __attribute__((__const__));
long double fabsl(long double __x) __attribute__((__const__));

double hypot(double __x, double __y);
float hypotf(float __x, float __y);
long double hypotl(long double __x, long double __y);

double pow(double __x, double __y);
float powf(float __x, float __y);
long double powl(long double __x, long double __y);

double sqrt(double __x);
float sqrtf(float __x);
long double sqrtl(long double __x);

double erf(double __x);
float erff(float __x);
long double erfl(long double __x);

double erfc(double __x);
float erfcf(float __x);
long double erfcl(long double __x);

double lgamma(double __x);
float lgammaf(float __x);
long double lgammal(long double __x);

double tgamma(double __x);
float tgammaf(float __x);
long double tgammal(long double __x);

double ceil(double __x);
float ceilf(float __x);
long double ceill(long double __x);

double floor(double __x);
float floorf(float __x);
long double floorl(long double __x);

double nearbyint(double __x);
float nearbyintf(float __x);
long double nearbyintl(long double __x);

double rint(double __x);
float rintf(float __x);
long double rintl(long double __x);

long lrint(double __x);
long lrintf(float __x);
long lrintl(long double __x);

long long llrint(double __x);
long long llrintf(float __x);
long long llrintl(long double __x);

double round(double __x);
float roundf(float __x);
long double roundl(long double __x);

long lround(double __x);
long lroundf(float __x);
long lroundl(long double __x);

long long llround(double __x);
long long llroundf(float __x);
long long llroundl(long double __x);

double trunc(double __x);
float truncf(float __x);
long double truncl(long double __x);

double fmod(double __x, double __y);
float fmodf(float __x, float __y);
long double fmodl(long double __x, long double __y);

double remainder(double __x, double __y);
float remainderf(float __x, float __y);
long double remainderl(long double __x, long double __y);

double remquo(double __x, double __y, int* _Nonnull __quotient_bits);
float remquof(float __x, float __y, int* _Nonnull __quotient_bits);
long double remquol(long double __x, long double __y, int* _Nonnull __quotient_bits);

double copysign(double __value, double __sign) __attribute__((__const__));
float copysignf(float __value, float __sign) __attribute__((__const__));
long double copysignl(long double __value, long double __sign) __attribute__((__const__));

double nan(const char* _Nonnull __kind) __attribute__((__const__));
float nanf(const char* _Nonnull __kind) __attribute__((__const__));
long double nanl(const char* _Nonnull __kind) __attribute__((__const__));

double nextafter(double __x, double __y);
float nextafterf(float __x, float __y);
long double nextafterl(long double __x, long double __y);

double nexttoward(double __x, long double __y);
float nexttowardf(float __x, long double __y);
long double nexttowardl(long double __x, long double __y);

double fdim(double __x, double __y);
float fdimf(float __x, float __y);
long double fdiml(long double __x, long double __y);

double fmax(double __x, double __y) __attribute__((__const__));
float fmaxf(float __x, float __y) __attribute__((__const__));
long double fmaxl(long double __x, long double __y) __attribute__((__const__));

double fmin(double __x, double __y) __attribute__((__const__));
float fminf(float __x, float __y) __attribute__((__const__));
long double fminl(long double __x, long double __y) __attribute__((__const__));

double fma(double __x, double __y, double __z);
float fmaf(float __x, float __y, float __z);
long double fmal(long double __x, long double __y, long double __z);
# 322 "/data/data/com.termux/files/usr/include/math.h" 3 4
int (isinf)(double __x) __attribute__((__const__));
int (isnan)(double __x) __attribute__((__const__));



extern int signgam;

double j0(double __x);
double j1(double __x);
double jn(int __n, double __x);
double y0(double __x);
double y1(double __x);
double yn(int __n, double __x);
# 361 "/data/data/com.termux/files/usr/include/math.h" 3 4
double gamma(double __x);
double scalb(double __x, double __exponent);
double drem(double __x, double __y);
int finite(double __x) __attribute__((__const__));
int isnanf(float __x) __attribute__((__const__));
double gamma_r(double __x, int* _Nonnull __sign);
double lgamma_r(double __x, int* _Nonnull __sign);
double significand(double __x);


long double lgammal_r(long double __x, int* _Nonnull __sign) __attribute__((__availability__(android,strict,introduced=23 )));


long double significandl(long double __x);
float dremf(float __x, float __y);
int finitef(float __x) __attribute__((__const__));
float gammaf(float __x);
float j0f(float __x);
float j1f(float __x);
float jnf(int __n, float __x);
float scalbf(float __x, float __exponent);
float y0f(float __x);
float y1f(float __x);
float ynf(int __n, float __x);
float gammaf_r(float __x, int* _Nonnull __sign);
float lgammaf_r(float __x, int* _Nonnull __sign);
float significandf(float __x);
void sincos(double __x, double* _Nonnull __sin, double* _Nonnull __cos);
void sincosf(float __x, float* _Nonnull __sin, float* _Nonnull __cos);
void sincosl(long double __x, long double* _Nonnull __sin, long double* _Nonnull __cos);
# 411 "/data/data/com.termux/files/usr/include/math.h" 3 4
}
# 302 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3






extern "C++" {
# 358 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/abs.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__math/abs.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/enable_if.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/enable_if.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <bool, class _Tp = void>
struct enable_if {};
template <class _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <bool _Bp, class _Tp = void>
using __enable_if_t __attribute__((__nodebug__)) = typename enable_if<_Bp, _Tp>::type;


template <bool _Bp, class _Tp = void>
using enable_if_t = typename enable_if<_Bp, _Tp>::type;


}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__math/abs.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_integral.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_integral.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/integral_constant.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/integral_constant.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, _Tp __v>
struct integral_constant {
  static constexpr const _Tp value = __v;
  typedef _Tp value_type;
  typedef integral_constant type;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr operator value_type() const noexcept { return value; }

  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr value_type operator()() const noexcept { return value; }

};

template <class _Tp, _Tp __v>
constexpr const _Tp integral_constant<_Tp, __v>::value;

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

template <bool _Val>
using _BoolConstant __attribute__((__nodebug__)) = integral_constant<bool, _Val>;


template <bool __b>
using bool_constant = integral_constant<bool, __b>;


}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_integral.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cv.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cv.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_const.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct remove_const {
  using type __attribute__((__nodebug__)) = __remove_const(_Tp);
};

template <class _Tp>
using __remove_const_t = __remove_const(_Tp);
# 43 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_const.h" 3
template <class _Tp>
using remove_const_t = __remove_const_t<_Tp>;


}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cv.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_volatile.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_volatile.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct remove_volatile {
  using type __attribute__((__nodebug__)) = __remove_volatile(_Tp);
};

template <class _Tp>
using __remove_volatile_t = __remove_volatile(_Tp);
# 43 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_volatile.h" 3
template <class _Tp>
using remove_volatile_t = __remove_volatile_t<_Tp>;


}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cv.h" 2 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cv.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct remove_cv {
  using type __attribute__((__nodebug__)) = __remove_cv(_Tp);
};

template <class _Tp>
using __remove_cv_t = __remove_cv(_Tp);
# 41 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cv.h" 3
template <class _Tp>
using remove_cv_t = __remove_cv_t<_Tp>;


}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_integral.h" 2 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_integral.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp> struct __libcpp_is_integral { enum { value = 0 }; };
template <> struct __libcpp_is_integral<bool> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<char> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<signed char> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned char> { enum { value = 1 }; };

template <> struct __libcpp_is_integral<wchar_t> { enum { value = 1 }; };




template <> struct __libcpp_is_integral<char16_t> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<char32_t> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<short> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned short> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<int> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned int> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<long long> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<unsigned long long> { enum { value = 1 }; };

template <> struct __libcpp_is_integral<__int128_t> { enum { value = 1 }; };
template <> struct __libcpp_is_integral<__uint128_t> { enum { value = 1 }; };





template <class _Tp>
struct is_integral : _BoolConstant<__is_integral(_Tp)> {};


template <class _Tp>
inline constexpr bool is_integral_v = __is_integral(_Tp);
# 72 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_integral.h" 3
}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__math/abs.h" 2 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__math/abs.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float fabs(float __x) noexcept { return __builtin_fabsf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double fabs(double __x) noexcept {
  return __builtin_fabs(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double fabs(long double __x) noexcept {
  return __builtin_fabsl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double fabs(_A1 __x) noexcept {
  return __builtin_fabs((double)__x);
}

}

}}
# 359 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/copysign.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__math/copysign.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_arithmetic.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_arithmetic.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_floating_point.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_floating_point.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp> struct __libcpp_is_floating_point : public false_type {};
template <> struct __libcpp_is_floating_point<float> : public true_type {};
template <> struct __libcpp_is_floating_point<double> : public true_type {};
template <> struct __libcpp_is_floating_point<long double> : public true_type {};


template <class _Tp>
struct is_floating_point : public __libcpp_is_floating_point<__remove_cv_t<_Tp> > {};


template <class _Tp>
inline constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;


}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_arithmetic.h" 2 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_arithmetic.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_arithmetic
    : public integral_constant<bool, is_integral<_Tp>::value || is_floating_point<_Tp>::value> {};


template <class _Tp>
inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;


}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__math/copysign.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/promote.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/promote.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_same.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_same.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, class _Up>
struct is_same : _BoolConstant<__is_same(_Tp, _Up)> {};


template <class _Tp, class _Up>
inline constexpr bool is_same_v = __is_same(_Tp, _Up);
# 36 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_same.h" 3
template <class _Tp, class _Up>
using _IsSame = _BoolConstant<__is_same(_Tp, _Up)>;

template <class _Tp, class _Up>
using _IsNotSame = _BoolConstant<!__is_same(_Tp, _Up)>;

}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/promote.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__utility/declval.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__utility/declval.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



#pragma GCC diagnostic push
# 22 "/data/data/com.termux/files/usr/include/c++/v1/__utility/declval.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 22 "/data/data/com.termux/files/usr/include/c++/v1/__utility/declval.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <class _Tp>
_Tp&& __declval(int);
template <class _Tp>
_Tp __declval(long);
#pragma GCC diagnostic pop

template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) decltype(std::__declval<_Tp>(0)) declval() noexcept {
  static_assert(!__is_same(_Tp, _Tp),
                "std::declval can only be used in an unevaluated context. "
                "It's likely that your current usage is trying to extract a value from the function.");
}

}}
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/promote.h" 2 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/promote.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct __numeric_type {
  static void __test(...);
  static float __test(float);
  static double __test(char);
  static double __test(int);
  static double __test(unsigned);
  static double __test(long);
  static double __test(unsigned long);
  static double __test(long long);
  static double __test(unsigned long long);

  static double __test(__int128_t);
  static double __test(__uint128_t);

  static double __test(double);
  static long double __test(long double);

  typedef decltype(__test(std::declval<_Tp>())) type;
  static const bool value = _IsNotSame<type, void>::value;
};

template <>
struct __numeric_type<void> {
  static const bool value = true;
};

template <class _A1,
          class _A2 = void,
          class _A3 = void,
          bool = __numeric_type<_A1>::value && __numeric_type<_A2>::value && __numeric_type<_A3>::value>
class __promote_imp {
public:
  static const bool value = false;
};

template <class _A1, class _A2, class _A3>
class __promote_imp<_A1, _A2, _A3, true> {
private:
  typedef typename __promote_imp<_A1>::type __type1;
  typedef typename __promote_imp<_A2>::type __type2;
  typedef typename __promote_imp<_A3>::type __type3;

public:
  typedef decltype(__type1() + __type2() + __type3()) type;
  static const bool value = true;
};

template <class _A1, class _A2>
class __promote_imp<_A1, _A2, void, true> {
private:
  typedef typename __promote_imp<_A1>::type __type1;
  typedef typename __promote_imp<_A2>::type __type2;

public:
  typedef decltype(__type1() + __type2()) type;
  static const bool value = true;
};

template <class _A1>
class __promote_imp<_A1, void, void, true> {
public:
  typedef typename __numeric_type<_A1>::type type;
  static const bool value = true;
};

template <class _A1, class _A2 = void, class _A3 = void>
class __promote : public __promote_imp<_A1, _A2, _A3> {};

}}
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__math/copysign.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/limits" 1 3
# 105 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__assert" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__assert" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__verbose_abort" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__verbose_abort" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__availability" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__availability" 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__verbose_abort" 2 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__verbose_abort" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



[[noreturn]] __attribute__((__visibility__("default")))
    __attribute__((__format__(__printf__, 1, 2))) void __libcpp_verbose_abort(const char* __format, ...);
# 51 "/data/data/com.termux/files/usr/include/c++/v1/__verbose_abort" 3
}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__assert" 2 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__assert" 3
# 106 "/data/data/com.termux/files/usr/include/c++/v1/limits" 2 3


# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_signed.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_signed.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_signed : _BoolConstant<__is_signed(_Tp)> {};


template <class _Tp>
inline constexpr bool is_signed_v = __is_signed(_Tp);
# 57 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_signed.h" 3
}}
# 109 "/data/data/com.termux/files/usr/include/c++/v1/limits" 2 3
# 113 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3



# 1 "/data/data/com.termux/files/usr/include/c++/v1/__undef_macros" 1 3
# 117 "/data/data/com.termux/files/usr/include/c++/v1/limits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/version" 1 3
# 252 "/data/data/com.termux/files/usr/include/c++/v1/version" 3
# 118 "/data/data/com.termux/files/usr/include/c++/v1/limits" 2 3

namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

enum float_round_style {
  round_indeterminate = -1,
  round_toward_zero = 0,
  round_to_nearest = 1,
  round_toward_infinity = 2,
  round_toward_neg_infinity = 3
};

enum float_denorm_style {
  denorm_indeterminate = -1,
  denorm_absent = 0,
  denorm_present = 1
};

template <class _Tp, bool = is_arithmetic<_Tp>::value>
class __libcpp_numeric_limits {
protected:
  typedef _Tp type;

  static constexpr const bool is_specialized = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return type(); }

  static constexpr const int digits = 0;
  static constexpr const int digits10 = 0;
  static constexpr const int max_digits10 = 0;
  static constexpr const bool is_signed = false;
  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 0;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return type(); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return type(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return type(); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = false;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;
  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <class _Tp, int __digits, bool _IsSigned>
struct __libcpp_compute_min {
  static constexpr const _Tp value = _Tp(_Tp(1) << __digits);
};

template <class _Tp, int __digits>
struct __libcpp_compute_min<_Tp, __digits, false> {
  static constexpr const _Tp value = _Tp(0);
};

template <class _Tp>
class __libcpp_numeric_limits<_Tp, true> {
protected:
  typedef _Tp type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = type(-1) < type(0);
  static constexpr const int digits = static_cast<int>(sizeof(type) * 8 - is_signed);
  static constexpr const int digits10 = digits * 3 / 10;
  static constexpr const int max_digits10 = 0;
  static constexpr const type __min = __libcpp_compute_min<type, digits, is_signed>::value;
  static constexpr const type __max = is_signed ? type(type(~0) ^ __min) : type(~0);
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return __min; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return __max; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return min(); }

  static constexpr const bool is_integer = true;
  static constexpr const bool is_exact = true;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return type(0); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return type(0); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = !std::is_signed<_Tp>::value;




  static constexpr const bool traps = false;

  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <>
class __libcpp_numeric_limits<bool, true> {
protected:
  typedef bool type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = false;
  static constexpr const int digits = 1;
  static constexpr const int digits10 = 0;
  static constexpr const int max_digits10 = 0;
  static constexpr const type __min = false;
  static constexpr const type __max = true;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return __min; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return __max; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return min(); }

  static constexpr const bool is_integer = true;
  static constexpr const bool is_exact = true;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return type(0); }

  static constexpr const int min_exponent = 0;
  static constexpr const int min_exponent10 = 0;
  static constexpr const int max_exponent = 0;
  static constexpr const int max_exponent10 = 0;

  static constexpr const bool has_infinity = false;
  static constexpr const bool has_quiet_NaN = false;
  static constexpr const bool has_signaling_NaN = false;
  static constexpr const float_denorm_style has_denorm = denorm_absent;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return type(0); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return type(0); }

  static constexpr const bool is_iec559 = false;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;
  static constexpr const bool tinyness_before = false;
  static constexpr const float_round_style round_style = round_toward_zero;
};

template <>
class __libcpp_numeric_limits<float, true> {
protected:
  typedef float type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 24;
  static constexpr const int digits10 = 6;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return 1.17549435e-38F; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return 3.40282347e+38F; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return 1.19209290e-7F; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return 0.5F; }

  static constexpr const int min_exponent = (-125);
  static constexpr const int min_exponent10 = (-37);
  static constexpr const int max_exponent = 128;
  static constexpr const int max_exponent10 = 38;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return __builtin_huge_valf(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return __builtin_nanf(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return __builtin_nansf(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return 1.40129846e-45F; }

  static constexpr const bool is_iec559 = true;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;

  static constexpr const bool tinyness_before = true;



  static constexpr const float_round_style round_style = round_to_nearest;
};

template <>
class __libcpp_numeric_limits<double, true> {
protected:
  typedef double type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 53;
  static constexpr const int digits10 = 15;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return 2.2250738585072014e-308; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return 1.7976931348623157e+308; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return 2.2204460492503131e-16; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return 0.5; }

  static constexpr const int min_exponent = (-1021);
  static constexpr const int min_exponent10 = (-307);
  static constexpr const int max_exponent = 1024;
  static constexpr const int max_exponent10 = 308;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return __builtin_huge_val(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return __builtin_nan(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return __builtin_nans(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return 4.9406564584124654e-324; }

  static constexpr const bool is_iec559 = true;
  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;

  static constexpr const bool tinyness_before = true;



  static constexpr const float_round_style round_style = round_to_nearest;
};

template <>
class __libcpp_numeric_limits<long double, true> {
protected:
  typedef long double type;

  static constexpr const bool is_specialized = true;

  static constexpr const bool is_signed = true;
  static constexpr const int digits = 113;
  static constexpr const int digits10 = 33;
  static constexpr const int max_digits10 = 2 + (digits * 30103l) / 100000l;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return 3.36210314311209350626267781732175260e-4932L; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return 1.18973149535723176508575932662800702e+4932L; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return -max(); }

  static constexpr const bool is_integer = false;
  static constexpr const bool is_exact = false;
  static constexpr const int radix = 2;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return 1.92592994438723585305597794258492732e-34L; }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return 0.5L; }

  static constexpr const int min_exponent = (-16381);
  static constexpr const int min_exponent10 = (-4931);
  static constexpr const int max_exponent = 16384;
  static constexpr const int max_exponent10 = 4932;

  static constexpr const bool has_infinity = true;
  static constexpr const bool has_quiet_NaN = true;
  static constexpr const bool has_signaling_NaN = true;
  static constexpr const float_denorm_style has_denorm = denorm_present;
  static constexpr const bool has_denorm_loss = false;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return __builtin_huge_vall(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return __builtin_nanl(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return __builtin_nansl(""); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return 6.47517511943802511092443895822764655e-4966L; }




  static constexpr const bool is_iec559 = true;

  static constexpr const bool is_bounded = true;
  static constexpr const bool is_modulo = false;

  static constexpr const bool traps = false;

  static constexpr const bool tinyness_before = true;



  static constexpr const float_round_style round_style = round_to_nearest;
};

template <class _Tp>
class numeric_limits : private __libcpp_numeric_limits<__remove_cv_t<_Tp> > {
  typedef __libcpp_numeric_limits<__remove_cv_t<_Tp> > __base;
  typedef typename __base::type type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return __base::min(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return __base::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return __base::epsilon(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return __base::round_error(); }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 467 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 467 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return __base::infinity(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return __base::denorm_min(); }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<_Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<_Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<_Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<_Tp>::round_style;

template <class _Tp>
class numeric_limits<const _Tp> : private numeric_limits<_Tp> {
  typedef numeric_limits<_Tp> __base;
  typedef _Tp type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return __base::min(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return __base::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return __base::epsilon(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return __base::round_error(); }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 561 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 561 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return __base::infinity(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return __base::denorm_min(); }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<const _Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<const _Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<const _Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<const _Tp>::round_style;

template <class _Tp>
class numeric_limits<volatile _Tp> : private numeric_limits<_Tp> {
  typedef numeric_limits<_Tp> __base;
  typedef _Tp type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return __base::min(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return __base::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return __base::epsilon(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return __base::round_error(); }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 655 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 655 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return __base::infinity(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return __base::denorm_min(); }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<volatile _Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<volatile _Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<volatile _Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<volatile _Tp>::round_style;

template <class _Tp>
class numeric_limits<const volatile _Tp> : private numeric_limits<_Tp> {
  typedef numeric_limits<_Tp> __base;
  typedef _Tp type;

public:
  static constexpr const bool is_specialized = __base::is_specialized;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type min() noexcept { return __base::min(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type max() noexcept { return __base::max(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type lowest() noexcept { return __base::lowest(); }

  static constexpr const int digits = __base::digits;
  static constexpr const int digits10 = __base::digits10;
  static constexpr const int max_digits10 = __base::max_digits10;
  static constexpr const bool is_signed = __base::is_signed;
  static constexpr const bool is_integer = __base::is_integer;
  static constexpr const bool is_exact = __base::is_exact;
  static constexpr const int radix = __base::radix;
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type epsilon() noexcept { return __base::epsilon(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type round_error() noexcept { return __base::round_error(); }

  static constexpr const int min_exponent = __base::min_exponent;
  static constexpr const int min_exponent10 = __base::min_exponent10;
  static constexpr const int max_exponent = __base::max_exponent;
  static constexpr const int max_exponent10 = __base::max_exponent10;

  static constexpr const bool has_infinity = __base::has_infinity;
  static constexpr const bool has_quiet_NaN = __base::has_quiet_NaN;
  static constexpr const bool has_signaling_NaN = __base::has_signaling_NaN;
#pragma GCC diagnostic push
# 749 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 749 "/data/data/com.termux/files/usr/include/c++/v1/limits" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  static constexpr const float_denorm_style has_denorm = __base::has_denorm;
  static constexpr const bool has_denorm_loss = __base::has_denorm_loss;
#pragma GCC diagnostic pop
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type infinity() noexcept { return __base::infinity(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type quiet_NaN() noexcept { return __base::quiet_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type signaling_NaN() noexcept { return __base::signaling_NaN(); }
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static constexpr type denorm_min() noexcept { return __base::denorm_min(); }

  static constexpr const bool is_iec559 = __base::is_iec559;
  static constexpr const bool is_bounded = __base::is_bounded;
  static constexpr const bool is_modulo = __base::is_modulo;

  static constexpr const bool traps = __base::traps;
  static constexpr const bool tinyness_before = __base::tinyness_before;
  static constexpr const float_round_style round_style = __base::round_style;
};

template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_specialized;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::digits;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::digits10;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::max_digits10;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_signed;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_integer;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_exact;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::radix;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::min_exponent;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::min_exponent10;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::max_exponent;
template <class _Tp>
constexpr const int numeric_limits<const volatile _Tp>::max_exponent10;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::has_infinity;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::has_quiet_NaN;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::has_signaling_NaN;
template <class _Tp>
constexpr const float_denorm_style numeric_limits<const volatile _Tp>::has_denorm;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::has_denorm_loss;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_iec559;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_bounded;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::is_modulo;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::traps;
template <class _Tp>
constexpr const bool numeric_limits<const volatile _Tp>::tinyness_before;
template <class _Tp>
constexpr const float_round_style numeric_limits<const volatile _Tp>::round_style;

}}




# 1 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 1 3
# 421 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__fwd/hash.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__fwd/hash.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class>
struct hash;

}}
# 422 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_const.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct add_const {
  typedef __attribute__((__nodebug__)) const _Tp type;
};


template <class _Tp>
using add_const_t = typename add_const<_Tp>::type;


}}
# 423 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_cv.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_cv.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct add_cv {
  typedef __attribute__((__nodebug__)) const volatile _Tp type;
};


template <class _Tp>
using add_cv_t = typename add_cv<_Tp>::type;


}}
# 424 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_lvalue_reference.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_lvalue_reference.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_referenceable.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_referenceable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct __libcpp_is_referenceable : integral_constant<bool, __is_referenceable(_Tp)> {};
# 39 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_referenceable.h" 3
}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_lvalue_reference.h" 2 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_lvalue_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
using __add_lvalue_reference_t = __add_lvalue_reference(_Tp);
# 42 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_lvalue_reference.h" 3
template <class _Tp>
struct add_lvalue_reference {
  using type __attribute__((__nodebug__)) = __add_lvalue_reference_t<_Tp>;
};


template <class _Tp>
using add_lvalue_reference_t = __add_lvalue_reference_t<_Tp>;


}}
# 425 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_pointer.h" 1 3
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_pointer.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_void.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_void.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_void : _BoolConstant<__is_void(_Tp)> {};


template <class _Tp>
inline constexpr bool is_void_v = __is_void(_Tp);
# 45 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_void.h" 3
}}
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_pointer.h" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_reference.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_reference.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/cstddef" 1 3
# 43 "/data/data/com.termux/files/usr/include/c++/v1/cstddef" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3
# 44 "/data/data/com.termux/files/usr/include/c++/v1/cstddef" 2 3
# 55 "/data/data/com.termux/files/usr/include/c++/v1/cstddef" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

using ::nullptr_t;
using ::ptrdiff_t __attribute__((__using_if_exists__));
using ::size_t __attribute__((__using_if_exists__));


using ::max_align_t __attribute__((__using_if_exists__));


}}


namespace std
{
enum class byte : unsigned char {};

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) inline constexpr byte operator|(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) | static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) inline constexpr byte& operator|=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs | __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) inline constexpr byte operator&(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) & static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) inline constexpr byte& operator&=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs & __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) inline constexpr byte operator^(byte __lhs, byte __rhs) noexcept {
  return static_cast<byte>(
      static_cast<unsigned char>(static_cast<unsigned int>(__lhs) ^ static_cast<unsigned int>(__rhs)));
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) inline constexpr byte& operator^=(byte& __lhs, byte __rhs) noexcept {
  return __lhs = __lhs ^ __rhs;
}

__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) inline constexpr byte operator~(byte __b) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(~static_cast<unsigned int>(__b)));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr byte& operator<<=(byte& __lhs, _Integer __shift) noexcept {
  return __lhs = __lhs << __shift;
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr byte operator<<(byte __lhs, _Integer __shift) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(__lhs) << __shift));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr byte& operator>>=(byte& __lhs, _Integer __shift) noexcept {
  return __lhs = __lhs >> __shift;
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr byte operator>>(byte __lhs, _Integer __shift) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(__lhs) >> __shift));
}

template <class _Integer, __enable_if_t<is_integral<_Integer>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr _Integer to_integer(byte __b) noexcept {
  return static_cast<_Integer>(__b);
}

}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_reference.h" 2 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct remove_reference {
  using type __attribute__((__nodebug__)) = __remove_reference_t(_Tp);
};

template <class _Tp>
using __libcpp_remove_reference_t = __remove_reference_t(_Tp);
# 41 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_reference.h" 3
template <class _Tp>
using remove_reference_t = __libcpp_remove_reference_t<_Tp>;


}}
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_pointer.h" 2 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
using __add_pointer_t = __add_pointer(_Tp);
# 45 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_pointer.h" 3
template <class _Tp>
struct add_pointer {
  using type __attribute__((__nodebug__)) = __add_pointer_t<_Tp>;
};


template <class _Tp>
using add_pointer_t = __add_pointer_t<_Tp>;


}}
# 426 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_rvalue_reference.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_rvalue_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
using __add_rvalue_reference_t = __add_rvalue_reference(_Tp);
# 42 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_rvalue_reference.h" 3
template <class _Tp>
struct add_rvalue_reference {
  using type = __add_rvalue_reference_t<_Tp>;
};


template <class _Tp>
using add_rvalue_reference_t = __add_rvalue_reference_t<_Tp>;


}}
# 427 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_volatile.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/add_volatile.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct add_volatile {
  typedef __attribute__((__nodebug__)) volatile _Tp type;
};


template <class _Tp>
using add_volatile_t = typename add_volatile<_Tp>::type;


}}
# 428 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/conditional.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/conditional.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <bool>
struct _IfImpl;

template <>
struct _IfImpl<true> {
  template <class _IfRes, class _ElseRes>
  using _Select __attribute__((__nodebug__)) = _IfRes;
};

template <>
struct _IfImpl<false> {
  template <class _IfRes, class _ElseRes>
  using _Select __attribute__((__nodebug__)) = _ElseRes;
};

template <bool _Cond, class _IfRes, class _ElseRes>
using _If __attribute__((__nodebug__)) = typename _IfImpl<_Cond>::template _Select<_IfRes, _ElseRes>;

template <bool _Bp, class _If, class _Then>
struct conditional {
  using type __attribute__((__nodebug__)) = _If;
};
template <class _If, class _Then>
struct conditional<false, _If, _Then> {
  using type __attribute__((__nodebug__)) = _Then;
};


template <bool _Bp, class _IfRes, class _ElseRes>
using conditional_t __attribute__((__nodebug__)) = typename conditional<_Bp, _IfRes, _ElseRes>::type;



template <bool _Bp, class _If, class _Then>
using __conditional_t __attribute__((__nodebug__)) = typename conditional<_Bp, _If, _Then>::type;

}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/nat.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/nat.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

struct __nat {

  __nat() = delete;
  __nat(const __nat&) = delete;
  __nat& operator=(const __nat&) = delete;
  ~__nat() = delete;

};

}}
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/type_list.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/type_list.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Hp, class _Tp>
struct __type_list {
  typedef _Hp _Head;
  typedef _Tp _Tail;
};

template <class _TypeList, size_t _Size, bool = _Size <= sizeof(typename _TypeList::_Head)>
struct __find_first;

template <class _Hp, class _Tp, size_t _Size>
struct __find_first<__type_list<_Hp, _Tp>, _Size, true> {
  typedef __attribute__((__nodebug__)) _Hp type;
};

template <class _Hp, class _Tp, size_t _Size>
struct __find_first<__type_list<_Hp, _Tp>, _Size, false> {
  typedef __attribute__((__nodebug__)) typename __find_first<_Tp, _Size>::type type;
};

}}
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 2 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct __align_type {
  static const size_t value = __alignof(_Tp);
  typedef _Tp type;
};

struct __struct_double {
  long double __lx;
};
struct __struct_double4 {
  double __lx[4];
};


typedef __type_list<__align_type<unsigned char>,
        __type_list<__align_type<unsigned short>,
        __type_list<__align_type<unsigned int>,
        __type_list<__align_type<unsigned long>,
        __type_list<__align_type<unsigned long long>,
        __type_list<__align_type<double>,
        __type_list<__align_type<long double>,
        __type_list<__align_type<__struct_double>,
        __type_list<__align_type<__struct_double4>,
        __type_list<__align_type<int*>,
        __nat
        > > > > > > > > > > __all_types;


template <size_t _Align>
struct alignas(_Align) __fallback_overaligned {};

template <class _TL, size_t _Align>
struct __find_pod;

template <class _Hp, size_t _Align>
struct __find_pod<__type_list<_Hp, __nat>, _Align> {
  typedef __conditional_t<_Align == _Hp::value, typename _Hp::type, __fallback_overaligned<_Align> > type;
};

template <class _Hp, class _Tp, size_t _Align>
struct __find_pod<__type_list<_Hp, _Tp>, _Align> {
  typedef __conditional_t<_Align == _Hp::value, typename _Hp::type, typename __find_pod<_Tp, _Align>::type> type;
};

template <class _TL, size_t _Len>
struct __find_max_align;

template <class _Hp, size_t _Len>
struct __find_max_align<__type_list<_Hp, __nat>, _Len> : public integral_constant<size_t, _Hp::value> {};

template <size_t _Len, size_t _A1, size_t _A2>
struct __select_align {
private:
  static const size_t __min = _A2 < _A1 ? _A2 : _A1;
  static const size_t __max = _A1 < _A2 ? _A2 : _A1;

public:
  static const size_t value = _Len < __max ? __min : __max;
};

template <class _Hp, class _Tp, size_t _Len>
struct __find_max_align<__type_list<_Hp, _Tp>, _Len>
    : public integral_constant<size_t, __select_align<_Len, _Hp::value, __find_max_align<_Tp, _Len>::value>::value> {};

template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
struct aligned_storage {
  typedef typename __find_pod<__all_types, _Align>::type _Aligner;
  union type {
    _Aligner __align;
    unsigned char __data[(_Len + _Align - 1) / _Align * _Align];
  };
};



#pragma GCC diagnostic push
# 100 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated"
# 100 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 3
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template <size_t _Len, size_t _Align = __find_max_align<__all_types, _Len>::value>
using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;
#pragma GCC diagnostic pop
# 115 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_storage.h" 3
template <size_t _Len> struct aligned_storage<_Len, 0x1> { struct alignas(0x1) type { unsigned char __lx[(_Len + 0x1 - 1) / 0x1 * 0x1]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x2> { struct alignas(0x2) type { unsigned char __lx[(_Len + 0x2 - 1) / 0x2 * 0x2]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x4> { struct alignas(0x4) type { unsigned char __lx[(_Len + 0x4 - 1) / 0x4 * 0x4]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x8> { struct alignas(0x8) type { unsigned char __lx[(_Len + 0x8 - 1) / 0x8 * 0x8]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x10> { struct alignas(0x10) type { unsigned char __lx[(_Len + 0x10 - 1) / 0x10 * 0x10]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x20> { struct alignas(0x20) type { unsigned char __lx[(_Len + 0x20 - 1) / 0x20 * 0x20]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x40> { struct alignas(0x40) type { unsigned char __lx[(_Len + 0x40 - 1) / 0x40 * 0x40]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x80> { struct alignas(0x80) type { unsigned char __lx[(_Len + 0x80 - 1) / 0x80 * 0x80]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x100> { struct alignas(0x100) type { unsigned char __lx[(_Len + 0x100 - 1) / 0x100 * 0x100]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x200> { struct alignas(0x200) type { unsigned char __lx[(_Len + 0x200 - 1) / 0x200 * 0x200]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x400> { struct alignas(0x400) type { unsigned char __lx[(_Len + 0x400 - 1) / 0x400 * 0x400]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x800> { struct alignas(0x800) type { unsigned char __lx[(_Len + 0x800 - 1) / 0x800 * 0x800]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x1000> { struct alignas(0x1000) type { unsigned char __lx[(_Len + 0x1000 - 1) / 0x1000 * 0x1000]; }; };
template <size_t _Len> struct aligned_storage<_Len, 0x2000> { struct alignas(0x2000) type { unsigned char __lx[(_Len + 0x2000 - 1) / 0x2000 * 0x2000]; }; };


template <size_t _Len> struct aligned_storage<_Len, 0x4000> { struct alignas(0x4000) type { unsigned char __lx[(_Len + 0x4000 - 1) / 0x4000 * 0x4000]; }; };




}}
# 429 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_union.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/aligned_union.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <size_t _I0, size_t... _In>
struct __static_max;

template <size_t _I0>
struct __static_max<_I0> {
  static const size_t value = _I0;
};

template <size_t _I0, size_t _I1, size_t... _In>
struct __static_max<_I0, _I1, _In...> {
  static const size_t value = _I0 >= _I1 ? __static_max<_I0, _In...>::value : __static_max<_I1, _In...>::value;
};

template <size_t _Len, class _Type0, class... _Types>
struct aligned_union {
  static const size_t alignment_value =
      __static_max<__alignof(_Type0), __alignof(_Types)...>::value;
  static const size_t __len = __static_max<_Len, sizeof(_Type0), sizeof(_Types)...>::value;
  typedef typename aligned_storage<__len, alignment_value>::type type;
};


template <size_t _Len, class... _Types>
using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


}}
# 430 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/alignment_of.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/alignment_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct alignment_of : public integral_constant<size_t, alignof(_Tp)> {};


template <class _Tp>
inline constexpr size_t alignment_of_v = alignof(_Tp);


}}
# 431 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/apply_cv.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/apply_cv.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_const.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_const : _BoolConstant<__is_const(_Tp)> {};


template <class _Tp>
inline constexpr bool is_const_v = __is_const(_Tp);
# 45 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_const.h" 3
}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/apply_cv.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_volatile.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_volatile.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_volatile : _BoolConstant<__is_volatile(_Tp)> {};


template <class _Tp>
inline constexpr bool is_volatile_v = __is_volatile(_Tp);
# 45 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_volatile.h" 3
}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/apply_cv.h" 2 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/apply_cv.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp,
          bool = is_const<__libcpp_remove_reference_t<_Tp> >::value,
          bool = is_volatile<__libcpp_remove_reference_t<_Tp> >::value>
struct __apply_cv_impl {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = _Up;
};

template <class _Tp>
struct __apply_cv_impl<_Tp, true, false> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = const _Up;
};

template <class _Tp>
struct __apply_cv_impl<_Tp, false, true> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = volatile _Up;
};

template <class _Tp>
struct __apply_cv_impl<_Tp, true, true> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = const volatile _Up;
};

template <class _Tp>
struct __apply_cv_impl<_Tp&, false, false> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = _Up&;
};

template <class _Tp>
struct __apply_cv_impl<_Tp&, true, false> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = const _Up&;
};

template <class _Tp>
struct __apply_cv_impl<_Tp&, false, true> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = volatile _Up&;
};

template <class _Tp>
struct __apply_cv_impl<_Tp&, true, true> {
  template <class _Up>
  using __apply __attribute__((__nodebug__)) = const volatile _Up&;
};

template <class _Tp, class _Up>
using __apply_cv_t __attribute__((__nodebug__)) = typename __apply_cv_impl<_Tp>::template __apply<_Up>;

}}
# 432 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/can_extract_key.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/can_extract_key.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__fwd/pair.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__fwd/pair.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class, class>
struct pair;

}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/can_extract_key.h" 2 3




# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_const_ref.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_const_ref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
using __remove_const_ref_t = __remove_const_t<__libcpp_remove_reference_t<_Tp> >;

}}
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/can_extract_key.h" 2 3
# 22 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/can_extract_key.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


struct __extract_key_fail_tag {};
struct __extract_key_self_tag {};
struct __extract_key_first_tag {};

template <class _ValTy, class _Key, class _RawValTy = __remove_const_ref_t<_ValTy> >
struct __can_extract_key
    : __conditional_t<_IsSame<_RawValTy, _Key>::value, __extract_key_self_tag, __extract_key_fail_tag> {};

template <class _Pair, class _Key, class _First, class _Second>
struct __can_extract_key<_Pair, _Key, pair<_First, _Second> >
    : __conditional_t<_IsSame<__remove_const_t<_First>, _Key>::value, __extract_key_first_tag, __extract_key_fail_tag> {
};




template <class _ValTy, class _Key, class _ContainerValueTy, class _RawValTy = __remove_const_ref_t<_ValTy> >
struct __can_extract_map_key : integral_constant<bool, _IsSame<_RawValTy, _Key>::value> {};



template <class _ValTy, class _Key, class _RawValTy>
struct __can_extract_map_key<_ValTy, _Key, _Key, _RawValTy> : false_type {};

}}
# 433 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_reference.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_reference.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_type.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_type.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/decay.h" 1 3
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/decay.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_array.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_array.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {
# 36 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_array.h" 3
template <class _Tp>
struct is_array : public false_type {};
template <class _Tp>
struct is_array<_Tp[]> : public true_type {};
template <class _Tp, size_t _Np>
struct is_array<_Tp[_Np]> : public true_type {};


template <class _Tp>
inline constexpr bool is_array_v = is_array<_Tp>::value;




}}
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/decay.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_function.h" 1 3
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_function.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_reference.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_lvalue_reference : _BoolConstant<__is_lvalue_reference(_Tp)> {};

template <class _Tp>
struct is_rvalue_reference : _BoolConstant<__is_rvalue_reference(_Tp)> {};

template <class _Tp>
struct is_reference : _BoolConstant<__is_reference(_Tp)> {};


template <class _Tp>
inline constexpr bool is_reference_v = __is_reference(_Tp);
template <class _Tp>
inline constexpr bool is_lvalue_reference_v = __is_lvalue_reference(_Tp);
template <class _Tp>
inline constexpr bool is_rvalue_reference_v = __is_rvalue_reference(_Tp);
# 73 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_reference.h" 3
}}
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_function.h" 2 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_function.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_function : integral_constant<bool, __is_function(_Tp)> {};
# 37 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_function.h" 3
template <class _Tp>
inline constexpr bool is_function_v = is_function<_Tp>::value;


}}
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/decay.h" 2 3


# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_extent.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_extent.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct remove_extent {
  using type __attribute__((__nodebug__)) = __remove_extent(_Tp);
};

template <class _Tp>
using __remove_extent_t = __remove_extent(_Tp);
# 48 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_extent.h" 3
template <class _Tp>
using remove_extent_t = __remove_extent_t<_Tp>;


}}
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/decay.h" 2 3
# 24 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/decay.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
using __decay_t __attribute__((__nodebug__)) = __decay(_Tp);

template <class _Tp>
struct decay {
  using type __attribute__((__nodebug__)) = __decay_t<_Tp>;
};
# 67 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/decay.h" 3
template <class _Tp>
using decay_t = __decay_t<_Tp>;


}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_type.h" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cvref.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cvref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
using __remove_cvref_t __attribute__((__nodebug__)) = __remove_cvref(_Tp);





template <class _Tp, class _Up>
struct __is_same_uncvref : _IsSame<__remove_cvref_t<_Tp>, __remove_cvref_t<_Up> > {};
# 44 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_cvref.h" 3
}}
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_type.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/void_t.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/void_t.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class...>
using void_t = void;


template <class...>
using __void_t = void;

}}
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_type.h" 2 3
# 22 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {
# 43 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_type.h" 3
template <class _Tp, class _Up, class = void>
struct __common_type2_imp {};



template <class _Tp, class _Up>
struct __common_type2_imp<_Tp, _Up, __void_t<decltype(true ? std::declval<_Tp>() : std::declval<_Up>())> > {
  typedef __attribute__((__nodebug__)) __decay_t<decltype(true ? std::declval<_Tp>() : std::declval<_Up>())> type;
};

template <class, class = void>
struct __common_type_impl {};

template <class... _Tp>
struct __common_types;
template <class... _Tp>
struct common_type;

template <class _Tp, class _Up>
struct __common_type_impl< __common_types<_Tp, _Up>, __void_t<typename common_type<_Tp, _Up>::type> > {
  typedef typename common_type<_Tp, _Up>::type type;
};

template <class _Tp, class _Up, class _Vp, class... _Rest>
struct __common_type_impl<__common_types<_Tp, _Up, _Vp, _Rest...>, __void_t<typename common_type<_Tp, _Up>::type> >
    : __common_type_impl<__common_types<typename common_type<_Tp, _Up>::type, _Vp, _Rest...> > {};



template <>
struct common_type<> {};



template <class _Tp>
struct common_type<_Tp> : public common_type<_Tp, _Tp> {};




template <class _Tp, class _Up>
struct common_type<_Tp, _Up>
    : conditional<_IsSame<_Tp, __decay_t<_Tp> >::value && _IsSame<_Up, __decay_t<_Up> >::value,
                  __common_type2_imp<_Tp, _Up>,
                  common_type<__decay_t<_Tp>, __decay_t<_Up> > >::type {};



template <class _Tp, class _Up, class _Vp, class... _Rest>
struct common_type<_Tp, _Up, _Vp, _Rest...>
    : __common_type_impl<__common_types<_Tp, _Up, _Vp, _Rest...> > {};


template <class... _Tp>
using common_type_t = typename common_type<_Tp...>::type;


}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_reference.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/copy_cv.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/copy_cv.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _From, class _To>
struct __copy_cv {
  using type = _To;
};

template <class _From, class _To>
struct __copy_cv<const _From, _To> {
  using type = typename add_const<_To>::type;
};

template <class _From, class _To>
struct __copy_cv<volatile _From, _To> {
  using type = typename add_volatile<_To>::type;
};

template <class _From, class _To>
struct __copy_cv<const volatile _From, _To> {
  using type = typename add_cv<_To>::type;
};

template <class _From, class _To>
using __copy_cv_t = typename __copy_cv<_From, _To>::type;

}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_reference.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/copy_cvref.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/copy_cvref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _From, class _To>
struct __copy_cvref {
  using type = __copy_cv_t<_From, _To>;
};

template <class _From, class _To>
struct __copy_cvref<_From&, _To> {
  using type = __add_lvalue_reference_t<__copy_cv_t<_From, _To> >;
};

template <class _From, class _To>
struct __copy_cvref<_From&&, _To> {
  using type = __add_rvalue_reference_t<__copy_cv_t<_From, _To> >;
};

template <class _From, class _To>
using __copy_cvref_t = typename __copy_cvref<_From, _To>::type;

}}
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_reference.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_convertible.h" 1 3
# 23 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_convertible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _T1, class _T2>
struct is_convertible : public integral_constant<bool, __is_convertible(_T1, _T2)> {};


template <class _From, class _To>
inline constexpr bool is_convertible_v = __is_convertible(_From, _To);


}}
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_reference.h" 2 3
# 25 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_reference.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {
# 191 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/common_reference.h" 3
}}
# 434 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3


# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/conjunction.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/conjunction.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class...>
using __expand_to_true = true_type;

template <class... _Pred>
__expand_to_true<__enable_if_t<_Pred::value>...> __and_helper(int);

template <class...>
false_type __and_helper(...);






template <class... _Pred>
using _And __attribute__((__nodebug__)) = decltype(std::__and_helper<_Pred...>(0));



template <class...>
struct conjunction : true_type {};

template <class _Arg>
struct conjunction<_Arg> : _Arg {};

template <class _Arg, class... _Args>
struct conjunction<_Arg, _Args...> : conditional_t<!bool(_Arg::value), _Arg, conjunction<_Args...>> {};

template <class... _Args>
inline constexpr bool conjunction_v = conjunction<_Args...>::value;



}}
# 437 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/dependent_type.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/dependent_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, bool>
struct __dependent_type : public _Tp {};

}}
# 439 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/disjunction.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/disjunction.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <bool>
struct _OrImpl;

template <>
struct _OrImpl<true> {
  template <class _Res, class _First, class... _Rest>
  using _Result __attribute__((__nodebug__)) =
      typename _OrImpl<!bool(_First::value) && sizeof...(_Rest) != 0>::template _Result<_First, _Rest...>;
};

template <>
struct _OrImpl<false> {
  template <class _Res, class...>
  using _Result = _Res;
};







template <class... _Args>
using _Or __attribute__((__nodebug__)) = typename _OrImpl<sizeof...(_Args) != 0>::template _Result<false_type, _Args...>;



template <class... _Args>
struct disjunction : _Or<_Args...> {};

template <class... _Args>
inline constexpr bool disjunction_v = _Or<_Args...>::value;



}}
# 440 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/extent.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/extent.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp, size_t _Dim = 0>
struct extent : integral_constant<size_t, __array_extent(_Tp, _Dim)> {};


template <class _Tp, unsigned _Ip = 0>
inline constexpr size_t extent_v = __array_extent(_Tp, _Ip);
# 52 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/extent.h" 3
}}
# 442 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/has_unique_object_representation.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/has_unique_object_representation.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_all_extents.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_all_extents.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct remove_all_extents {
  using type __attribute__((__nodebug__)) = __remove_all_extents(_Tp);
};

template <class _Tp>
using __remove_all_extents_t = __remove_all_extents(_Tp);
# 48 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_all_extents.h" 3
template <class _Tp>
using remove_all_extents_t = __remove_all_extents_t<_Tp>;


}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/has_unique_object_representation.h" 2 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/has_unique_object_representation.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct has_unique_object_representations
    : public integral_constant<bool, __has_unique_object_representations(remove_cv_t<remove_all_extents_t<_Tp>>)> {};

template <class _Tp>
inline constexpr bool has_unique_object_representations_v = has_unique_object_representations<_Tp>::value;



}}
# 443 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/has_virtual_destructor.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/has_virtual_destructor.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct has_virtual_destructor : public integral_constant<bool, __has_virtual_destructor(_Tp)> {};


template <class _Tp>
inline constexpr bool has_virtual_destructor_v = __has_virtual_destructor(_Tp);


}}
# 444 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 1 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_base_of.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_base_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Bp, class _Dp>
struct is_base_of : public integral_constant<bool, __is_base_of(_Bp, _Dp)> {};


template <class _Bp, class _Dp>
inline constexpr bool is_base_of_v = __is_base_of(_Bp, _Dp);


}}
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_core_convertible.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_core_convertible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {






template <class _Tp, class _Up, class = void>
struct __is_core_convertible : public false_type {};

template <class _Tp, class _Up>
struct __is_core_convertible<_Tp, _Up, decltype(static_cast<void (*)(_Up)>(0)(static_cast<_Tp (*)()>(0)()))>
    : public true_type {};

}}
# 22 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_function_pointer.h" 1 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_function_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct __libcpp_is_member_pointer {
  enum { __is_member = false, __is_func = false, __is_obj = false };
};
template <class _Tp, class _Up>
struct __libcpp_is_member_pointer<_Tp _Up::*> {
  enum {
    __is_member = true,
    __is_func = is_function<_Tp>::value,
    __is_obj = !__is_func,
  };
};



template <class _Tp>
struct is_member_function_pointer : _BoolConstant<__is_member_function_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_member_function_pointer_v = __is_member_function_pointer(_Tp);
# 60 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_function_pointer.h" 3
}}
# 23 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_object_pointer.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_object_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_member_object_pointer : _BoolConstant<__is_member_object_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_member_object_pointer_v = __is_member_object_pointer(_Tp);
# 44 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_object_pointer.h" 3
}}
# 24 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_reference_wrapper.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_reference_wrapper.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
class reference_wrapper;

template <class _Tp>
struct __is_reference_wrapper_impl : public false_type {};
template <class _Tp>
struct __is_reference_wrapper_impl<reference_wrapper<_Tp> > : public true_type {};
template <class _Tp>
struct __is_reference_wrapper : public __is_reference_wrapper_impl<__remove_cv_t<_Tp> > {};

}}
# 25 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 2 3





# 1 "/data/data/com.termux/files/usr/include/c++/v1/__utility/forward.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__utility/forward.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr _Tp&&
forward([[_Clang::__lifetimebound__]] __libcpp_remove_reference_t<_Tp>& __t) noexcept {
  return static_cast<_Tp&&>(__t);
}

template <class _Tp>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr _Tp&&
forward([[_Clang::__lifetimebound__]] __libcpp_remove_reference_t<_Tp>&& __t) noexcept {
  static_assert(!is_lvalue_reference<_Tp>::value, "cannot forward an rvalue as an lvalue");
  return static_cast<_Tp&&>(__t);
}

}}
# 31 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 2 3
# 34 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/invoke.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

struct __any {
  __any(...);
};

template <class _MP, bool _IsMemberFunctionPtr, bool _IsMemberObjectPtr>
struct __member_pointer_traits_imp {};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...), true, false> {
  typedef _Class _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...), true, false> {
  typedef _Class _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const, true, false> {
  typedef _Class const _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const, true, false> {
  typedef _Class const _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile, true, false> {
  typedef _Class volatile _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile, true, false> {
  typedef _Class volatile _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile, true, false> {
  typedef _Class const volatile _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile, true, false> {
  typedef _Class const volatile _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...)&, true, false> {
  typedef _Class& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...)&, true, false> {
  typedef _Class& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&, true, false> {
  typedef _Class const& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&, true, false> {
  typedef _Class const& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&, true, false> {
  typedef _Class volatile& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&, true, false> {
  typedef _Class volatile& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&, true, false> {
  typedef _Class const volatile& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&, true, false> {
  typedef _Class const volatile& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...)&&, true, false> {
  typedef _Class&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...)&&, true, false> {
  typedef _Class&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const&&, true, false> {
  typedef _Class const&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const&&, true, false> {
  typedef _Class const&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) volatile&&, true, false> {
  typedef _Class volatile&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) volatile&&, true, false> {
  typedef _Class volatile&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param...) const volatile&&, true, false> {
  typedef _Class const volatile&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param...);
};

template <class _Rp, class _Class, class... _Param>
struct __member_pointer_traits_imp<_Rp (_Class::*)(_Param..., ...) const volatile&&, true, false> {
  typedef _Class const volatile&& _ClassType;
  typedef _Rp _ReturnType;
  typedef _Rp(_FnType)(_Param..., ...);
};

template <class _Rp, class _Class>
struct __member_pointer_traits_imp<_Rp _Class::*, false, true> {
  typedef _Class _ClassType;
  typedef _Rp _ReturnType;
};

template <class _MP>
struct __member_pointer_traits
    : public __member_pointer_traits_imp<__remove_cv_t<_MP>,
                                         is_member_function_pointer<_MP>::value,
                                         is_member_object_pointer<_MP>::value> {



};

template <class _DecayedFp>
struct __member_pointer_class_type {};

template <class _Ret, class _ClassType>
struct __member_pointer_class_type<_Ret _ClassType::*> {
  typedef _ClassType type;
};

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet1 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value &&
                  (is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value)>;

template <class _Fp, class _A0, class _DecayFp = __decay_t<_Fp>, class _DecayA0 = __decay_t<_A0> >
using __enable_if_bullet2 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet3 =
    __enable_if_t<is_member_function_pointer<_DecayFp>::value &&
                  !(is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value) &&
                  !__is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet4 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value &&
                  (is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value)>;

template <class _Fp, class _A0, class _DecayFp = __decay_t<_Fp>, class _DecayA0 = __decay_t<_A0> >
using __enable_if_bullet5 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value && __is_reference_wrapper<_DecayA0>::value>;

template <class _Fp,
          class _A0,
          class _DecayFp = __decay_t<_Fp>,
          class _DecayA0 = __decay_t<_A0>,
          class _ClassT = typename __member_pointer_class_type<_DecayFp>::type>
using __enable_if_bullet6 =
    __enable_if_t<is_member_object_pointer<_DecayFp>::value &&
                  !(is_same<_ClassT, _DecayA0>::value || is_base_of<_ClassT, _DecayA0>::value) &&
                  !__is_reference_wrapper<_DecayA0>::value>;





template <class... _Args>
__nat __invoke(__any, _Args&&... __args);




template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet1<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr
decltype((std::declval<_A0>().*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept((static_cast<_A0&&>(__a0).*__f)(static_cast<_Args&&>(__args)...)))
               { return (static_cast<_A0&&>(__a0).*__f)(static_cast<_Args&&>(__args)...); }

template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet2<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr
decltype((std::declval<_A0>().get().*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept((__a0.get().*__f)(static_cast<_Args&&>(__args)...)))
               { return (__a0.get().*__f)(static_cast<_Args&&>(__args)...); }

template <class _Fp, class _A0, class... _Args, class = __enable_if_bullet3<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr
decltype(((*std::declval<_A0>()).*std::declval<_Fp>())(std::declval<_Args>()...))
__invoke(_Fp&& __f, _A0&& __a0, _Args&&... __args)
    noexcept(noexcept(((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...)))
               { return ((*static_cast<_A0&&>(__a0)).*__f)(static_cast<_Args&&>(__args)...); }



template <class _Fp, class _A0, class = __enable_if_bullet4<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr
decltype(std::declval<_A0>().*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept(static_cast<_A0&&>(__a0).*__f))
               { return static_cast<_A0&&>(__a0).*__f; }

template <class _Fp, class _A0, class = __enable_if_bullet5<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr
decltype(std::declval<_A0>().get().*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept(__a0.get().*__f))
               { return __a0.get().*__f; }

template <class _Fp, class _A0, class = __enable_if_bullet6<_Fp, _A0> >
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr
decltype((*std::declval<_A0>()).*std::declval<_Fp>())
__invoke(_Fp&& __f, _A0&& __a0)
    noexcept(noexcept((*static_cast<_A0&&>(__a0)).*__f))
               { return (*static_cast<_A0&&>(__a0)).*__f; }



template <class _Fp, class... _Args>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr
decltype(std::declval<_Fp>()(std::declval<_Args>()...))
__invoke(_Fp&& __f, _Args&&... __args)
    noexcept(noexcept(static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...)))
               { return static_cast<_Fp&&>(__f)(static_cast<_Args&&>(__args)...); }



template <class _Ret, class _Fp, class... _Args>
struct __invokable_r {
  template <class _XFp, class... _XArgs>
  static decltype(std::__invoke(std::declval<_XFp>(), std::declval<_XArgs>()...)) __try_call(int);
  template <class _XFp, class... _XArgs>
  static __nat __try_call(...);



  using _Result = decltype(__try_call<_Fp, _Args...>(0));

  using type = __conditional_t<_IsNotSame<_Result, __nat>::value,
                               __conditional_t<is_void<_Ret>::value, true_type, __is_core_convertible<_Result, _Ret> >,
                               false_type>;
  static const bool value = type::value;
};
template <class _Fp, class... _Args>
using __invokable = __invokable_r<void, _Fp, _Args...>;

template <bool _IsInvokable, bool _IsCVVoid, class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp {
  static const bool value = false;
};

template <class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp<true, false, _Ret, _Fp, _Args...> {
  typedef __nothrow_invokable_r_imp _ThisT;

  template <class _Tp>
  static void __test_noexcept(_Tp) noexcept;




  static const bool value =
      noexcept(_ThisT::__test_noexcept<_Ret>(std::__invoke(std::declval<_Fp>(), std::declval<_Args>()...)));

};

template <class _Ret, class _Fp, class... _Args>
struct __nothrow_invokable_r_imp<true, true, _Ret, _Fp, _Args...> {



  static const bool value = noexcept(std::__invoke(std::declval<_Fp>(), std::declval<_Args>()...));

};

template <class _Ret, class _Fp, class... _Args>
using __nothrow_invokable_r =
    __nothrow_invokable_r_imp<__invokable_r<_Ret, _Fp, _Args...>::value, is_void<_Ret>::value, _Ret, _Fp, _Args...>;

template <class _Fp, class... _Args>
using __nothrow_invokable = __nothrow_invokable_r_imp<__invokable<_Fp, _Args...>::value, true, void, _Fp, _Args...>;

template <class _Fp, class... _Args>
struct __invoke_of
    : public enable_if<__invokable<_Fp, _Args...>::value, typename __invokable_r<void, _Fp, _Args...>::_Result> {};

template <class _Ret, bool = is_void<_Ret>::value>
struct __invoke_void_return_wrapper {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static _Ret __call(_Args&&... __args) {
    return std::__invoke(std::forward<_Args>(__args)...);
  }
};

template <class _Ret>
struct __invoke_void_return_wrapper<_Ret, true> {
  template <class... _Args>
  __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) static void __call(_Args&&... __args) {
    std::__invoke(std::forward<_Args>(__args)...);
  }
};





template <class _Fn, class... _Args>
struct is_invocable : integral_constant<bool, __invokable<_Fn, _Args...>::value> {};

template <class _Ret, class _Fn, class... _Args>
struct is_invocable_r : integral_constant<bool, __invokable_r<_Ret, _Fn, _Args...>::value> {};

template <class _Fn, class... _Args>
inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;

template <class _Ret, class _Fn, class... _Args>
inline constexpr bool is_invocable_r_v = is_invocable_r<_Ret, _Fn, _Args...>::value;



template <class _Fn, class... _Args>
struct is_nothrow_invocable : integral_constant<bool, __nothrow_invokable<_Fn, _Args...>::value> {
};

template <class _Ret, class _Fn, class... _Args>
struct is_nothrow_invocable_r
    : integral_constant<bool, __nothrow_invokable_r<_Ret, _Fn, _Args...>::value> {};

template <class _Fn, class... _Args>
inline constexpr bool is_nothrow_invocable_v = is_nothrow_invocable<_Fn, _Args...>::value;

template <class _Ret, class _Fn, class... _Args>
inline constexpr bool is_nothrow_invocable_r_v = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;

template <class _Fn, class... _Args>
struct invoke_result : __invoke_of<_Fn, _Args...> {};

template <class _Fn, class... _Args>
using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;



}}
# 446 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_abstract.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_abstract.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_abstract : public integral_constant<bool, __is_abstract(_Tp)> {};


template <class _Tp>
inline constexpr bool is_abstract_v = __is_abstract(_Tp);


}}
# 447 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_aggregate.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_aggregate.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_aggregate : public integral_constant<bool, __is_aggregate(_Tp)> {};

template <class _Tp>
inline constexpr bool is_aggregate_v = __is_aggregate(_Tp);



}}
# 448 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3


# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_assignable.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, class _Up>
struct is_assignable : _BoolConstant<__is_assignable(_Tp, _Up)> {};


template <class _Tp, class _Arg>
inline constexpr bool is_assignable_v = __is_assignable(_Tp, _Arg);


}}
# 451 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_bounded_array.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_bounded_array.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class>
struct __libcpp_is_bounded_array : false_type {};
template <class _Tp, size_t _Np>
struct __libcpp_is_bounded_array<_Tp[_Np]> : true_type {};
# 39 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_bounded_array.h" 3
}}
# 453 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_callable.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_callable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Func, class... _Args, class = decltype(std::declval<_Func>()(std::declval<_Args>()...))>
true_type __is_callable_helper(int);
template <class...>
false_type __is_callable_helper(...);

template <class _Func, class... _Args>
struct __is_callable : decltype(std::__is_callable_helper<_Func, _Args...>(0)) {};

}}
# 454 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_char_like_type.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_char_like_type.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_standard_layout.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_standard_layout.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_standard_layout : public integral_constant<bool, __is_standard_layout(_Tp)> {};


template <class _Tp>
inline constexpr bool is_standard_layout_v = __is_standard_layout(_Tp);


}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_char_like_type.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivial.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivial.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_trivial : public integral_constant<bool, __is_trivial(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivial_v = __is_trivial(_Tp);


}}
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_char_like_type.h" 2 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_char_like_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _CharT>
using _IsCharLikeType = _And<is_standard_layout<_CharT>, is_trivial<_CharT> >;

}}
# 455 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_class.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_class.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_class : public integral_constant<bool, __is_class(_Tp)> {};


template <class _Tp>
inline constexpr bool is_class_v = __is_class(_Tp);


}}
# 456 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_compound.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_compound.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_fundamental.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_fundamental.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_null_pointer.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_null_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct __is_nullptr_t_impl : public false_type {};
template <>
struct __is_nullptr_t_impl<nullptr_t> : public true_type {};

template <class _Tp>
struct __is_nullptr_t : public __is_nullptr_t_impl<__remove_cv_t<_Tp> > {};


template <class _Tp>
struct is_null_pointer : public __is_nullptr_t_impl<__remove_cv_t<_Tp> > {};


template <class _Tp>
inline constexpr bool is_null_pointer_v = is_null_pointer<_Tp>::value;



}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_fundamental.h" 2 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_fundamental.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_fundamental : _BoolConstant<__is_fundamental(_Tp)> {};


template <class _Tp>
inline constexpr bool is_fundamental_v = __is_fundamental(_Tp);
# 46 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_fundamental.h" 3
}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_compound.h" 2 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_compound.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_compound : _BoolConstant<__is_compound(_Tp)> {};


template <class _Tp>
inline constexpr bool is_compound_v = __is_compound(_Tp);
# 44 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_compound.h" 3
}}
# 457 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_constant_evaluated.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_constant_evaluated.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {







__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) inline constexpr bool __libcpp_is_constant_evaluated() noexcept {
  return __builtin_is_constant_evaluated();
}

}}
# 459 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_constructible.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, class... _Args>
struct is_constructible : public integral_constant<bool, __is_constructible(_Tp, _Args...)> {};


template <class _Tp, class... _Args>
inline constexpr bool is_constructible_v = __is_constructible(_Tp, _Args...);


}}
# 460 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_copy_assignable.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_copy_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_copy_assignable
    : public integral_constant<
          bool,
          __is_assignable(__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<typename add_const<_Tp>::type>)> {};


template <class _Tp>
inline constexpr bool is_copy_assignable_v = is_copy_assignable<_Tp>::value;


}}
# 462 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_copy_constructible.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_copy_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_copy_constructible
    : public integral_constant<bool, __is_constructible(_Tp, __add_lvalue_reference_t<typename add_const<_Tp>::type>)> {
};


template <class _Tp>
inline constexpr bool is_copy_constructible_v = is_copy_constructible<_Tp>::value;


}}
# 463 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_default_constructible.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_default_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_default_constructible : public integral_constant<bool, __is_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);


}}
# 464 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_destructible.h" 1 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_destructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_destructible : _BoolConstant<__is_destructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_destructible_v = __is_destructible(_Tp);
# 95 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_destructible.h" 3
}}
# 465 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_empty.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_empty.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_empty : public integral_constant<bool, __is_empty(_Tp)> {};


template <class _Tp>
inline constexpr bool is_empty_v = __is_empty(_Tp);


}}
# 466 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_enum.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_enum.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_enum : public integral_constant<bool, __is_enum(_Tp)> {};


template <class _Tp>
inline constexpr bool is_enum_v = __is_enum(_Tp);


}}
# 467 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_final.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_final.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct __libcpp_is_final : public integral_constant<bool, __is_final(_Tp)> {};


template <class _Tp>
struct is_final : public integral_constant<bool, __is_final(_Tp)> {};



template <class _Tp>
inline constexpr bool is_final_v = __is_final(_Tp);


}}
# 468 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3



# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_implicitly_default_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {






template <class _Tp>
void __test_implicit_default_constructible(_Tp);

template <class _Tp, class = void, class = typename is_default_constructible<_Tp>::type>
struct __is_implicitly_default_constructible : false_type {};

template <class _Tp>
struct __is_implicitly_default_constructible<_Tp,
                                             decltype(std::__test_implicit_default_constructible<_Tp const&>({})),
                                             true_type> : true_type {};

template <class _Tp>
struct __is_implicitly_default_constructible<_Tp,
                                             decltype(std::__test_implicit_default_constructible<_Tp const&>({})),
                                             false_type> : false_type {};


}}
# 472 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_literal_type.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_literal_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct __attribute__((__deprecated__)) is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)> {};


template <class _Tp>
__attribute__((__deprecated__)) inline constexpr bool is_literal_type_v = __is_literal_type(_Tp);



}}
# 474 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3


# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_pointer.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_member_pointer : _BoolConstant<__is_member_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_member_pointer_v = __is_member_pointer(_Tp);
# 45 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_member_pointer.h" 3
}}
# 477 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_move_assignable.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_move_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_move_assignable
    : public integral_constant<bool, __is_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_move_assignable_v = is_move_assignable<_Tp>::value;


}}
# 478 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_move_constructible.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_move_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_move_constructible
    : public integral_constant<bool, __is_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_move_constructible_v = is_move_constructible<_Tp>::value;


}}
# 479 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_assignable.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, class _Arg>
struct is_nothrow_assignable : public integral_constant<bool, __is_nothrow_assignable(_Tp, _Arg)> {
};


template <class _Tp, class _Arg>
inline constexpr bool is_nothrow_assignable_v = __is_nothrow_assignable(_Tp, _Arg);


}}
# 480 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_constructible.h" 1 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {




template < class _Tp, class... _Args>
struct is_nothrow_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp, _Args...)> {};
# 65 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_constructible.h" 3
template <class _Tp, class... _Args>
inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Tp, _Args...>::value;


}}
# 481 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_convertible.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_convertible.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/lazy.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/lazy.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <template <class...> class _Func, class... _Args>
struct _Lazy : _Func<_Args...> {};

}}
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_convertible.h" 2 3
# 23 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_convertible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {
# 48 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_convertible.h" 3
}}
# 482 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_copy_assignable.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_copy_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_nothrow_copy_assignable
    : public integral_constant<bool,
                               __is_nothrow_assignable(__add_lvalue_reference_t<_Tp>,
                                                       __add_lvalue_reference_t<typename add_const<_Tp>::type>)> {};


template <class _Tp>
inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Tp>::value;


}}
# 483 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_copy_constructible.h" 1 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_copy_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {
# 33 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_copy_constructible.h" 3
template <class _Tp>
struct is_nothrow_copy_constructible
    : public integral_constant<
          bool,
          __is_nothrow_constructible(_Tp, typename add_lvalue_reference<typename add_const<_Tp>::type>::type)> {};




template <class _Tp>
inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Tp>::value;


}}
# 484 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_default_constructible.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_default_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_nothrow_default_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_nothrow_default_constructible_v = __is_nothrow_constructible(_Tp);


}}
# 485 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_destructible.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scalar.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scalar.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_pointer.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_pointer : _BoolConstant<__is_pointer(_Tp)> {};


template <class _Tp>
inline constexpr bool is_pointer_v = __is_pointer(_Tp);
# 63 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_pointer.h" 3
}}
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scalar.h" 2 3
# 22 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scalar.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_scalar : _BoolConstant<__is_scalar(_Tp)> {};


template <class _Tp>
inline constexpr bool is_scalar_v = __is_scalar(_Tp);
# 67 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scalar.h" 3
}}
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_destructible.h" 2 3
# 23 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_destructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <bool, class _Tp>
struct __libcpp_is_nothrow_destructible;

template <class _Tp>
struct __libcpp_is_nothrow_destructible<false, _Tp> : public false_type {};

template <class _Tp>
struct __libcpp_is_nothrow_destructible<true, _Tp>
    : public integral_constant<bool, noexcept(std::declval<_Tp>().~_Tp()) > {};

template <class _Tp>
struct is_nothrow_destructible
    : public __libcpp_is_nothrow_destructible<is_destructible<_Tp>::value, _Tp> {};

template <class _Tp, size_t _Ns>
struct is_nothrow_destructible<_Tp[_Ns]> : public is_nothrow_destructible<_Tp> {};

template <class _Tp>
struct is_nothrow_destructible<_Tp&> : public true_type {};

template <class _Tp>
struct is_nothrow_destructible<_Tp&&> : public true_type {};
# 68 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_destructible.h" 3
template <class _Tp>
inline constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Tp>::value;


}}
# 486 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_move_assignable.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_move_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_nothrow_move_assignable
    : public integral_constant<bool,
                               __is_nothrow_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {
};


template <class _Tp>
inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Tp>::value;


}}
# 487 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_move_constructible.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_move_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {




template <class _Tp>
struct is_nothrow_move_constructible
    : public integral_constant<bool, __is_nothrow_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};
# 39 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_nothrow_move_constructible.h" 3
template <class _Tp>
inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Tp>::value;


}}
# 488 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_object.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_object.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_union.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_union.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_union : public integral_constant<bool, __is_union(_Tp)> {};


template <class _Tp>
inline constexpr bool is_union_v = __is_union(_Tp);


}}
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_object.h" 2 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_object.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_object : _BoolConstant<__is_object(_Tp)> {};


template <class _Tp>
inline constexpr bool is_object_v = __is_object(_Tp);
# 50 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_object.h" 3
}}
# 490 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_pod.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_pod.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_pod : public integral_constant<bool, __is_pod(_Tp)> {};


template <class _Tp>
inline constexpr bool is_pod_v = __is_pod(_Tp);


}}
# 491 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_polymorphic.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_polymorphic.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_polymorphic : public integral_constant<bool, __is_polymorphic(_Tp)> {};


template <class _Tp>
inline constexpr bool is_polymorphic_v = __is_polymorphic(_Tp);


}}
# 493 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3





# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scoped_enum.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scoped_enum.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/underlying_type.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/underlying_type.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, bool = is_enum<_Tp>::value>
struct __underlying_type_impl;

template <class _Tp>
struct __underlying_type_impl<_Tp, false> {};

template <class _Tp>
struct __underlying_type_impl<_Tp, true> {
  typedef __underlying_type(_Tp) type;
};

template <class _Tp>
struct underlying_type : __underlying_type_impl<_Tp, is_enum<_Tp>::value> {};


template <class _Tp>
using underlying_type_t = typename underlying_type<_Tp>::type;


}}
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scoped_enum.h" 2 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scoped_enum.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {
# 38 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_scoped_enum.h" 3
}}
# 499 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_specialization.h" 1 3
# 29 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_specialization.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp, template <class...> class _Template>
inline constexpr bool __is_specialization_v = false;

template <template <class...> class _Template, class... _Args>
inline constexpr bool __is_specialization_v<_Template<_Args...>, _Template> = true;



}}
# 501 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_swappable.h" 1 3
# 29 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_swappable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct __is_swappable;
template <class _Tp>
struct __is_nothrow_swappable;


template <class _Tp>
using __swap_result_t = __enable_if_t<is_move_constructible<_Tp>::value && is_move_assignable<_Tp>::value>;





template <class _Tp>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __swap_result_t<_Tp> swap(_Tp& __x, _Tp& __y)
    noexcept(is_nothrow_move_constructible<_Tp>::value&& is_nothrow_move_assignable<_Tp>::value);

template <class _Tp, size_t _Np, __enable_if_t<__is_swappable<_Tp>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) void swap(_Tp (&__a)[_Np], _Tp (&__b)[_Np])
    noexcept(__is_nothrow_swappable<_Tp>::value);

namespace __detail {


template <class _Tp, class _Up = _Tp, bool _NotVoid = !is_void<_Tp>::value && !is_void<_Up>::value>
struct __swappable_with {
  template <class _LHS, class _RHS>
  static decltype(swap(std::declval<_LHS>(), std::declval<_RHS>())) __test_swap(int);
  template <class, class>
  static __nat __test_swap(long);


  typedef decltype((__test_swap<_Tp, _Up>(0))) __swap1;
  typedef decltype((__test_swap<_Up, _Tp>(0))) __swap2;

  static const bool value = _IsNotSame<__swap1, __nat>::value && _IsNotSame<__swap2, __nat>::value;
};

template <class _Tp, class _Up>
struct __swappable_with<_Tp, _Up, false> : false_type {};

template <class _Tp, class _Up = _Tp, bool _Swappable = __swappable_with<_Tp, _Up>::value>
struct __nothrow_swappable_with {
  static const bool value =

      noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))&& noexcept(
          swap(std::declval<_Up>(), std::declval<_Tp>()));



};

template <class _Tp, class _Up>
struct __nothrow_swappable_with<_Tp, _Up, false> : false_type {};

}

template <class _Tp>
struct __is_swappable : public integral_constant<bool, __detail::__swappable_with<_Tp&>::value> {};

template <class _Tp>
struct __is_nothrow_swappable : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp&>::value> {};



template <class _Tp, class _Up>
struct is_swappable_with
    : public integral_constant<bool, __detail::__swappable_with<_Tp, _Up>::value> {};

template <class _Tp>
struct is_swappable
    : public __conditional_t<__libcpp_is_referenceable<_Tp>::value,
                             is_swappable_with<__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<_Tp> >,
                             false_type> {};

template <class _Tp, class _Up>
struct is_nothrow_swappable_with
    : public integral_constant<bool, __detail::__nothrow_swappable_with<_Tp, _Up>::value> {};

template <class _Tp>
struct is_nothrow_swappable
    : public __conditional_t<__libcpp_is_referenceable<_Tp>::value,
                             is_nothrow_swappable_with<__add_lvalue_reference_t<_Tp>, __add_lvalue_reference_t<_Tp> >,
                             false_type> {};

template <class _Tp, class _Up>
inline constexpr bool is_swappable_with_v = is_swappable_with<_Tp, _Up>::value;

template <class _Tp>
inline constexpr bool is_swappable_v = is_swappable<_Tp>::value;

template <class _Tp, class _Up>
inline constexpr bool is_nothrow_swappable_with_v = is_nothrow_swappable_with<_Tp, _Up>::value;

template <class _Tp>
inline constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<_Tp>::value;



}}
# 503 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_assignable.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, class _Arg>
struct is_trivially_assignable : integral_constant<bool, __is_trivially_assignable(_Tp, _Arg)> {};


template <class _Tp, class _Arg>
inline constexpr bool is_trivially_assignable_v = __is_trivially_assignable(_Tp, _Arg);


}}
# 505 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_constructible.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp, class... _Args>
struct is_trivially_constructible
    : integral_constant<bool, __is_trivially_constructible(_Tp, _Args...)> {};


template <class _Tp, class... _Args>
inline constexpr bool is_trivially_constructible_v = __is_trivially_constructible(_Tp, _Args...);


}}
# 506 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_copy_assignable.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_copy_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_trivially_copy_assignable
    : public integral_constant<bool,
                               __is_trivially_assignable(__add_lvalue_reference_t<_Tp>,
                                                         __add_lvalue_reference_t<typename add_const<_Tp>::type>)> {};


template <class _Tp>
inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Tp>::value;


}}
# 507 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_copy_constructible.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_copy_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_trivially_copy_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp, __add_lvalue_reference_t<const _Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Tp>::value;


}}
# 508 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_copyable.h" 1 3
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_copyable.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/cstdint" 1 3
# 158 "/data/data/com.termux/files/usr/include/c++/v1/cstdint" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

using ::int8_t __attribute__((__using_if_exists__));
using ::int16_t __attribute__((__using_if_exists__));
using ::int32_t __attribute__((__using_if_exists__));
using ::int64_t __attribute__((__using_if_exists__));

using ::uint8_t __attribute__((__using_if_exists__));
using ::uint16_t __attribute__((__using_if_exists__));
using ::uint32_t __attribute__((__using_if_exists__));
using ::uint64_t __attribute__((__using_if_exists__));

using ::int_least8_t __attribute__((__using_if_exists__));
using ::int_least16_t __attribute__((__using_if_exists__));
using ::int_least32_t __attribute__((__using_if_exists__));
using ::int_least64_t __attribute__((__using_if_exists__));

using ::uint_least8_t __attribute__((__using_if_exists__));
using ::uint_least16_t __attribute__((__using_if_exists__));
using ::uint_least32_t __attribute__((__using_if_exists__));
using ::uint_least64_t __attribute__((__using_if_exists__));

using ::int_fast8_t __attribute__((__using_if_exists__));
using ::int_fast16_t __attribute__((__using_if_exists__));
using ::int_fast32_t __attribute__((__using_if_exists__));
using ::int_fast64_t __attribute__((__using_if_exists__));

using ::uint_fast8_t __attribute__((__using_if_exists__));
using ::uint_fast16_t __attribute__((__using_if_exists__));
using ::uint_fast32_t __attribute__((__using_if_exists__));
using ::uint_fast64_t __attribute__((__using_if_exists__));

using ::intptr_t __attribute__((__using_if_exists__));
using ::uintptr_t __attribute__((__using_if_exists__));

using ::intmax_t __attribute__((__using_if_exists__));
using ::uintmax_t __attribute__((__using_if_exists__));

}}
# 15 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_copyable.h" 2 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_copyable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_trivially_copyable : public integral_constant<bool, __is_trivially_copyable(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Tp);







}}
# 509 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_default_constructible.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_default_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_trivially_default_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp)> {};


template <class _Tp>
inline constexpr bool is_trivially_default_constructible_v = __is_trivially_constructible(_Tp);


}}
# 510 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_destructible.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_destructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_trivially_destructible
    : public integral_constant<bool, __is_trivially_destructible(_Tp)> {};
# 41 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_destructible.h" 3
template <class _Tp>
inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Tp>::value;


}}
# 511 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_move_assignable.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_move_assignable.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_trivially_move_assignable
    : public integral_constant<
          bool,
          __is_trivially_assignable(__add_lvalue_reference_t<_Tp>, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Tp>::value;


}}
# 512 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_move_constructible.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_trivially_move_constructible.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct is_trivially_move_constructible
    : public integral_constant<bool, __is_trivially_constructible(_Tp, __add_rvalue_reference_t<_Tp>)> {};


template <class _Tp>
inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Tp>::value;


}}
# 513 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_unbounded_array.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_unbounded_array.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class>
struct __libcpp_is_unbounded_array : false_type {};
template <class _Tp>
struct __libcpp_is_unbounded_array<_Tp[]> : true_type {};
# 38 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_unbounded_array.h" 3
}}
# 514 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_unsigned.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_unsigned.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
struct is_unsigned : _BoolConstant<__is_unsigned(_Tp)> {};


template <class _Tp>
inline constexpr bool is_unsigned_v = __is_unsigned(_Tp);
# 57 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/is_unsigned.h" 3
}}
# 516 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3


# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/make_const_lvalue_ref.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/make_const_lvalue_ref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
using __make_const_lvalue_ref = const __libcpp_remove_reference_t<_Tp>&;

}}
# 519 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/make_signed.h" 1 3
# 22 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/make_signed.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
using __make_signed_t = __make_signed(_Tp);
# 77 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/make_signed.h" 3
template <class _Tp>
struct make_signed {
  using type __attribute__((__nodebug__)) = __make_signed_t<_Tp>;
};


template <class _Tp>
using make_signed_t = __make_signed_t<_Tp>;


}}
# 520 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/make_unsigned.h" 1 3
# 24 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/make_unsigned.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Tp>
using __make_unsigned_t = __make_unsigned(_Tp);
# 79 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/make_unsigned.h" 3
template <class _Tp>
struct make_unsigned {
  using type __attribute__((__nodebug__)) = __make_unsigned_t<_Tp>;
};


template <class _Tp>
using make_unsigned_t = __make_unsigned_t<_Tp>;



template <class _Tp>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) constexpr __make_unsigned_t<_Tp> __to_unsigned_like(_Tp __x) noexcept {
  return static_cast<__make_unsigned_t<_Tp> >(__x);
}


template <class _Tp, class _Up>
using __copy_unsigned_t = __conditional_t<is_unsigned<_Tp>::value, __make_unsigned_t<_Up>, _Up>;

}}
# 521 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/maybe_const.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/maybe_const.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <bool _Const, class _Tp>
using __maybe_const = __conditional_t<_Const, const _Tp, _Tp>;

}}
# 522 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/negation.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/negation.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Pred>
struct _Not : _BoolConstant<!_Pred::value> {};


template <class _Tp>
struct negation : _Not<_Tp> {};
template <class _Tp>
inline constexpr bool negation_v = !_Tp::value;


}}
# 523 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/rank.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/rank.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {
# 30 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/rank.h" 3
template <class _Tp>
struct rank : public integral_constant<size_t, 0> {};
template <class _Tp>
struct rank<_Tp[]> : public integral_constant<size_t, rank<_Tp>::value + 1> {};
template <class _Tp, size_t _Np>
struct rank<_Tp[_Np]> : public integral_constant<size_t, rank<_Tp>::value + 1> {};




template <class _Tp>
inline constexpr size_t rank_v = rank<_Tp>::value;


}}
# 524 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3





# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_pointer.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_pointer.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {


template <class _Tp>
struct remove_pointer {
  using type __attribute__((__nodebug__)) = __remove_pointer(_Tp);
};

template <class _Tp>
using __remove_pointer_t = __remove_pointer(_Tp);
# 42 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/remove_pointer.h" 3
template <class _Tp>
using remove_pointer_t = __remove_pointer_t<_Tp>;


}}
# 530 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3


# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/result_of.h" 1 3
# 13 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/result_of.h" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__functional/invoke.h" 1 3
# 19 "/data/data/com.termux/files/usr/include/c++/v1/__functional/invoke.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {



template <class _Fn, class... _Args>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) invoke_result_t<_Fn, _Args...>
invoke(_Fn&& __f, _Args&&... __args) noexcept(is_nothrow_invocable_v<_Fn, _Args...>) {
  return std::__invoke(std::forward<_Fn>(__f), std::forward<_Args>(__args)...);
}
# 52 "/data/data/com.termux/files/usr/include/c++/v1/__functional/invoke.h" 3
}}
# 14 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/result_of.h" 2 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/result_of.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {




template <class _Callable>
class __attribute__((__deprecated__)) result_of;

template <class _Fp, class... _Args>
class result_of<_Fp(_Args...)> : public __invoke_of<_Fp, _Args...> {};


template <class _Tp>
using result_of_t __attribute__((__deprecated__)) = typename result_of<_Tp>::type;



}}
# 533 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/type_identity.h" 1 3
# 16 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/type_identity.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct __type_identity {
  typedef _Tp type;
};

template <class _Tp>
using __type_identity_t __attribute__((__nodebug__)) = typename __type_identity<_Tp>::type;
# 37 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/type_identity.h" 3
}}
# 534 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3

# 1 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/unwrap_ref.h" 1 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/unwrap_ref.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

template <class _Tp>
struct __unwrap_reference {
  typedef __attribute__((__nodebug__)) _Tp type;
};

template <class _Tp>
class reference_wrapper;

template <class _Tp>
struct __unwrap_reference<reference_wrapper<_Tp> > {
  typedef __attribute__((__nodebug__)) _Tp& type;
};

template <class _Tp>
struct decay;
# 51 "/data/data/com.termux/files/usr/include/c++/v1/__type_traits/unwrap_ref.h" 3
template <class _Tp>
struct __unwrap_ref_decay



    : __unwrap_reference<__decay_t<_Tp> >

{
};

}}
# 536 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 2 3
# 544 "/data/data/com.termux/files/usr/include/c++/v1/type_traits" 3
# 820 "/data/data/com.termux/files/usr/include/c++/v1/limits" 2 3
# 17 "/data/data/com.termux/files/usr/include/c++/v1/__math/copysign.h" 2 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__math/copysign.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float copysign(float __x, float __y) noexcept {
  return ::__builtin_copysignf(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double copysign(long double __x, long double __y) noexcept {
  return ::__builtin_copysignl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type
copysign(_A1 __x, _A2 __y) noexcept {
  return ::__builtin_copysign(__x, __y);
}

}

}}
# 360 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/error_functions.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__math/error_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float erf(float __x) noexcept { return __builtin_erff(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double erf(double __x) noexcept {
  return __builtin_erf(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double erf(long double __x) noexcept { return __builtin_erfl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double erf(_A1 __x) noexcept {
  return __builtin_erf((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float erfc(float __x) noexcept { return __builtin_erfcf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double erfc(double __x) noexcept {
  return __builtin_erfc(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double erfc(long double __x) noexcept { return __builtin_erfcl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double erfc(_A1 __x) noexcept {
  return __builtin_erfc((double)__x);
}

}

}}
# 361 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/exponential_functions.h" 1 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__math/exponential_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float exp(float __x) noexcept { return __builtin_expf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double exp(double __x) noexcept {
  return __builtin_exp(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double exp(long double __x) noexcept { return __builtin_expl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double exp(_A1 __x) noexcept {
  return __builtin_exp((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float frexp(float __x, int* __e) noexcept { return __builtin_frexpf(__x, __e); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double frexp(double __x, int* __e) noexcept {
  return __builtin_frexp(__x, __e);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double frexp(long double __x, int* __e) noexcept {
  return __builtin_frexpl(__x, __e);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double frexp(_A1 __x, int* __e) noexcept {
  return __builtin_frexp((double)__x, __e);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float ldexp(float __x, int __e) noexcept { return __builtin_ldexpf(__x, __e); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double ldexp(double __x, int __e) noexcept {
  return __builtin_ldexp(__x, __e);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double ldexp(long double __x, int __e) noexcept {
  return __builtin_ldexpl(__x, __e);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double ldexp(_A1 __x, int __e) noexcept {
  return __builtin_ldexp((double)__x, __e);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float exp2(float __x) noexcept { return __builtin_exp2f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double exp2(double __x) noexcept {
  return __builtin_exp2(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double exp2(long double __x) noexcept { return __builtin_exp2l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double exp2(_A1 __x) noexcept {
  return __builtin_exp2((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float expm1(float __x) noexcept { return __builtin_expm1f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double expm1(double __x) noexcept {
  return __builtin_expm1(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double expm1(long double __x) noexcept { return __builtin_expm1l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double expm1(_A1 __x) noexcept {
  return __builtin_expm1((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float scalbln(float __x, long __y) noexcept { return __builtin_scalblnf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double scalbln(double __x, long __y) noexcept {
  return __builtin_scalbln(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double scalbln(long double __x, long __y) noexcept {
  return __builtin_scalblnl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double scalbln(_A1 __x, long __y) noexcept {
  return __builtin_scalbln((double)__x, __y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float scalbn(float __x, int __y) noexcept { return __builtin_scalbnf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double scalbn(double __x, int __y) noexcept {
  return __builtin_scalbn(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double scalbn(long double __x, int __y) noexcept {
  return __builtin_scalbnl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double scalbn(_A1 __x, int __y) noexcept {
  return __builtin_scalbn((double)__x, __y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float pow(float __x, float __y) noexcept { return __builtin_powf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double pow(double __x, double __y) noexcept {
  return __builtin_pow(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double pow(long double __x, long double __y) noexcept {
  return __builtin_powl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type pow(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::pow((__result_type)__x, (__result_type)__y);
}

}

}}
# 362 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/fdim.h" 1 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__math/fdim.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float fdim(float __x, float __y) noexcept { return __builtin_fdimf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double fdim(double __x, double __y) noexcept {
  return __builtin_fdim(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double fdim(long double __x, long double __y) noexcept {
  return __builtin_fdiml(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type fdim(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::fdim((__result_type)__x, (__result_type)__y);
}

}

}}
# 363 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/fma.h" 1 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__math/fma.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float fma(float __x, float __y, float __z) noexcept {
  return __builtin_fmaf(__x, __y, __z);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double fma(double __x, double __y, double __z) noexcept {
  return __builtin_fma(__x, __y, __z);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double fma(long double __x, long double __y, long double __z) noexcept {
  return __builtin_fmal(__x, __y, __z);
}

template <class _A1,
          class _A2,
          class _A3,
          __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value && is_arithmetic<_A3>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2, _A3>::type fma(_A1 __x, _A2 __y, _A3 __z) noexcept {
  using __result_type = typename __promote<_A1, _A2, _A3>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value &&
                   _IsSame<_A3, __result_type>::value)),
                "");
  return __builtin_fma((__result_type)__x, (__result_type)__y, (__result_type)__z);
}

}

}}
# 364 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/gamma.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__math/gamma.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float lgamma(float __x) noexcept { return __builtin_lgammaf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double lgamma(double __x) noexcept {
  return __builtin_lgamma(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double lgamma(long double __x) noexcept { return __builtin_lgammal(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double lgamma(_A1 __x) noexcept {
  return __builtin_lgamma((double)__x);
}





inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float tgamma(float __x) noexcept { return __builtin_tgammaf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double tgamma(double __x) noexcept {
  return __builtin_tgamma(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double tgamma(long double __x) noexcept { return __builtin_tgammal(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double tgamma(_A1 __x) noexcept {
  return __builtin_tgamma((double)__x);
}

}

}}
# 365 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/hyperbolic_functions.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__math/hyperbolic_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float cosh(float __x) noexcept { return __builtin_coshf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double cosh(double __x) noexcept {
  return __builtin_cosh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double cosh(long double __x) noexcept { return __builtin_coshl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double cosh(_A1 __x) noexcept {
  return __builtin_cosh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float sinh(float __x) noexcept { return __builtin_sinhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double sinh(double __x) noexcept {
  return __builtin_sinh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double sinh(long double __x) noexcept { return __builtin_sinhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double sinh(_A1 __x) noexcept {
  return __builtin_sinh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float tanh(float __x) noexcept { return __builtin_tanhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double tanh(double __x) noexcept {
  return __builtin_tanh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double tanh(long double __x) noexcept { return __builtin_tanhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double tanh(_A1 __x) noexcept {
  return __builtin_tanh((double)__x);
}

}

}}
# 366 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/hypot.h" 1 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__math/hypot.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float hypot(float __x, float __y) noexcept { return __builtin_hypotf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double hypot(double __x, double __y) noexcept {
  return __builtin_hypot(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double hypot(long double __x, long double __y) noexcept {
  return __builtin_hypotl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type hypot(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::hypot((__result_type)__x, (__result_type)__y);
}

}

}}
# 367 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/inverse_hyperbolic_functions.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__math/inverse_hyperbolic_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float acosh(float __x) noexcept { return __builtin_acoshf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double acosh(double __x) noexcept {
  return __builtin_acosh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double acosh(long double __x) noexcept { return __builtin_acoshl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double acosh(_A1 __x) noexcept {
  return __builtin_acosh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float asinh(float __x) noexcept { return __builtin_asinhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double asinh(double __x) noexcept {
  return __builtin_asinh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double asinh(long double __x) noexcept { return __builtin_asinhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double asinh(_A1 __x) noexcept {
  return __builtin_asinh((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float atanh(float __x) noexcept { return __builtin_atanhf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double atanh(double __x) noexcept {
  return __builtin_atanh(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double atanh(long double __x) noexcept { return __builtin_atanhl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double atanh(_A1 __x) noexcept {
  return __builtin_atanh((double)__x);
}

}

}}
# 368 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/inverse_trigonometric_functions.h" 1 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__math/inverse_trigonometric_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float acos(float __x) noexcept { return __builtin_acosf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double acos(double __x) noexcept {
  return __builtin_acos(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double acos(long double __x) noexcept { return __builtin_acosl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double acos(_A1 __x) noexcept {
  return __builtin_acos((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float asin(float __x) noexcept { return __builtin_asinf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double asin(double __x) noexcept {
  return __builtin_asin(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double asin(long double __x) noexcept { return __builtin_asinl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double asin(_A1 __x) noexcept {
  return __builtin_asin((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float atan(float __x) noexcept { return __builtin_atanf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double atan(double __x) noexcept {
  return __builtin_atan(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double atan(long double __x) noexcept { return __builtin_atanl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double atan(_A1 __x) noexcept {
  return __builtin_atan((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float atan2(float __y, float __x) noexcept { return __builtin_atan2f(__y, __x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double atan2(double __x, double __y) noexcept {
  return __builtin_atan2(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double atan2(long double __y, long double __x) noexcept {
  return __builtin_atan2l(__y, __x);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type atan2(_A1 __y, _A2 __x) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::atan2((__result_type)__y, (__result_type)__x);
}

}

}}
# 369 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/logarithms.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__math/logarithms.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float log(float __x) noexcept { return __builtin_logf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double log(double __x) noexcept {
  return __builtin_log(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double log(long double __x) noexcept { return __builtin_logl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double log(_A1 __x) noexcept {
  return __builtin_log((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float log10(float __x) noexcept { return __builtin_log10f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double log10(double __x) noexcept {
  return __builtin_log10(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double log10(long double __x) noexcept { return __builtin_log10l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double log10(_A1 __x) noexcept {
  return __builtin_log10((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) int ilogb(float __x) noexcept { return __builtin_ilogbf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double ilogb(double __x) noexcept {
  return __builtin_ilogb(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) int ilogb(long double __x) noexcept { return __builtin_ilogbl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) int ilogb(_A1 __x) noexcept {
  return __builtin_ilogb((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float log1p(float __x) noexcept { return __builtin_log1pf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double log1p(double __x) noexcept {
  return __builtin_log1p(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double log1p(long double __x) noexcept { return __builtin_log1pl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double log1p(_A1 __x) noexcept {
  return __builtin_log1p((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float log2(float __x) noexcept { return __builtin_log2f(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double log2(double __x) noexcept {
  return __builtin_log2(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double log2(long double __x) noexcept { return __builtin_log2l(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double log2(_A1 __x) noexcept {
  return __builtin_log2((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float logb(float __x) noexcept { return __builtin_logbf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double logb(double __x) noexcept {
  return __builtin_logb(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double logb(long double __x) noexcept { return __builtin_logbl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double logb(_A1 __x) noexcept {
  return __builtin_logb((double)__x);
}

}

}}
# 370 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/min_max.h" 1 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__math/min_max.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float fmax(float __x, float __y) noexcept {
  return __builtin_fmaxf(__x, __y);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double fmax(double __x, double __y) noexcept {
  return __builtin_fmax(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double fmax(long double __x, long double __y) noexcept {
  return __builtin_fmaxl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type fmax(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::fmax((__result_type)__x, (__result_type)__y);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float fmin(float __x, float __y) noexcept {
  return __builtin_fminf(__x, __y);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double fmin(double __x, double __y) noexcept {
  return __builtin_fmin(__x, __y);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double fmin(long double __x, long double __y) noexcept {
  return __builtin_fminl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type fmin(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::fmin((__result_type)__x, (__result_type)__y);
}

}

}}
# 371 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/modulo.h" 1 3
# 20 "/data/data/com.termux/files/usr/include/c++/v1/__math/modulo.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float fmod(float __x, float __y) noexcept { return __builtin_fmodf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double fmod(double __x, double __y) noexcept {
  return __builtin_fmod(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double fmod(long double __x, long double __y) noexcept {
  return __builtin_fmodl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type fmod(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::fmod((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float modf(float __x, float* __y) noexcept { return __builtin_modff(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double modf(double __x, double* __y) noexcept {
  return __builtin_modf(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double modf(long double __x, long double* __y) noexcept {
  return __builtin_modfl(__x, __y);
}

}

}}
# 372 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/remainder.h" 1 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__math/remainder.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float remainder(float __x, float __y) noexcept { return __builtin_remainderf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double remainder(double __x, double __y) noexcept {
  return __builtin_remainder(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double remainder(long double __x, long double __y) noexcept {
  return __builtin_remainderl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type remainder(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::remainder((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float remquo(float __x, float __y, int* __z) noexcept {
  return __builtin_remquof(__x, __y, __z);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double remquo(double __x, double __y, int* __z) noexcept {
  return __builtin_remquo(__x, __y, __z);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double remquo(long double __x, long double __y, int* __z) noexcept {
  return __builtin_remquol(__x, __y, __z);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type remquo(_A1 __x, _A2 __y, int* __z) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::remquo((__result_type)__x, (__result_type)__y, __z);
}

}

}}
# 373 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/roots.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__math/roots.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float sqrt(float __x) noexcept { return __builtin_sqrtf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double sqrt(double __x) noexcept {
  return __builtin_sqrt(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double sqrt(long double __x) noexcept { return __builtin_sqrtl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double sqrt(_A1 __x) noexcept {
  return __builtin_sqrt((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float cbrt(float __x) noexcept { return __builtin_cbrtf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double cbrt(double __x) noexcept {
  return __builtin_cbrt(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double cbrt(long double __x) noexcept {
  return __builtin_cbrtl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double cbrt(_A1 __x) noexcept {
  return __builtin_cbrt((double)__x);
}

}

}}
# 374 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/rounding_functions.h" 1 3
# 21 "/data/data/com.termux/files/usr/include/c++/v1/__math/rounding_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float ceil(float __x) noexcept { return __builtin_ceilf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double ceil(double __x) noexcept {
  return __builtin_ceil(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double ceil(long double __x) noexcept {
  return __builtin_ceill(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double ceil(_A1 __x) noexcept {
  return __builtin_ceil((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float floor(float __x) noexcept { return __builtin_floorf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double floor(double __x) noexcept {
  return __builtin_floor(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double floor(long double __x) noexcept {
  return __builtin_floorl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double floor(_A1 __x) noexcept {
  return __builtin_floor((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long llrint(float __x) noexcept { return __builtin_llrintf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long llrint(double __x) noexcept {
  return __builtin_llrint(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long llrint(long double __x) noexcept { return __builtin_llrintl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long llrint(_A1 __x) noexcept {
  return __builtin_llrint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long llround(float __x) noexcept { return __builtin_llroundf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long llround(double __x) noexcept {
  return __builtin_llround(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long llround(long double __x) noexcept { return __builtin_llroundl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long long llround(_A1 __x) noexcept {
  return __builtin_llround((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long lrint(float __x) noexcept { return __builtin_lrintf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long lrint(double __x) noexcept {
  return __builtin_lrint(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long lrint(long double __x) noexcept { return __builtin_lrintl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long lrint(_A1 __x) noexcept {
  return __builtin_lrint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long lround(float __x) noexcept { return __builtin_lroundf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long lround(double __x) noexcept {
  return __builtin_lround(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long lround(long double __x) noexcept { return __builtin_lroundl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long lround(_A1 __x) noexcept {
  return __builtin_lround((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float nearbyint(float __x) noexcept {
  return __builtin_nearbyintf(__x);
}

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double nearbyint(double __x) noexcept {
  return __builtin_nearbyint(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double nearbyint(long double __x) noexcept {
  return __builtin_nearbyintl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double nearbyint(_A1 __x) noexcept {
  return __builtin_nearbyint((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float nextafter(float __x, float __y) noexcept { return __builtin_nextafterf(__x, __y); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double nextafter(double __x, double __y) noexcept {
  return __builtin_nextafter(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double nextafter(long double __x, long double __y) noexcept {
  return __builtin_nextafterl(__x, __y);
}

template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) typename __promote<_A1, _A2>::type nextafter(_A1 __x, _A2 __y) noexcept {
  using __result_type = typename __promote<_A1, _A2>::type;
  static_assert((!(_IsSame<_A1, __result_type>::value && _IsSame<_A2, __result_type>::value)), "");
  return __math::nextafter((__result_type)__x, (__result_type)__y);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float nexttoward(float __x, long double __y) noexcept {
  return __builtin_nexttowardf(__x, __y);
}

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double nexttoward(double __x, long double __y) noexcept {
  return __builtin_nexttoward(__x, __y);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double nexttoward(long double __x, long double __y) noexcept {
  return __builtin_nexttowardl(__x, __y);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double nexttoward(_A1 __x, long double __y) noexcept {
  return __builtin_nexttoward((double)__x, __y);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float rint(float __x) noexcept { return __builtin_rintf(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double rint(double __x) noexcept {
  return __builtin_rint(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double rint(long double __x) noexcept {
  return __builtin_rintl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double rint(_A1 __x) noexcept {
  return __builtin_rint((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float round(float __x) noexcept { return __builtin_round(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double round(double __x) noexcept {
  return __builtin_round(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double round(long double __x) noexcept {
  return __builtin_roundl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double round(_A1 __x) noexcept {
  return __builtin_round((double)__x);
}



[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float trunc(float __x) noexcept { return __builtin_trunc(__x); }

template <class = int>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double trunc(double __x) noexcept {
  return __builtin_trunc(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double trunc(long double __x) noexcept {
  return __builtin_truncl(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double trunc(_A1 __x) noexcept {
  return __builtin_trunc((double)__x);
}

}

}}
# 375 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/traits.h" 1 3
# 23 "/data/data/com.termux/files/usr/include/c++/v1/__math/traits.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool signbit(_A1 __x) noexcept {
  return __builtin_signbit(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value && is_signed<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool signbit(_A1 __x) noexcept {
  return __x < 0;
}

template <class _A1, __enable_if_t<is_integral<_A1>::value && !is_signed<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool signbit(_A1) noexcept {
  return false;
}



template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isfinite(_A1 __x) noexcept {
  return __builtin_isfinite((typename __promote<_A1>::type)__x);
}

template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && !numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isfinite(_A1) noexcept {
  return true;
}



template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isinf(_A1 __x) noexcept {
  return __builtin_isinf((typename __promote<_A1>::type)__x);
}

template <class _A1, __enable_if_t<is_arithmetic<_A1>::value && !numeric_limits<_A1>::has_infinity, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isinf(_A1) noexcept {
  return false;
}


[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isinf(float __x) noexcept {
  return __builtin_isinf(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) bool
isinf(double __x) noexcept {
  return __builtin_isinf(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isinf(long double __x) noexcept {
  return __builtin_isinf(__x);
}




template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isnan(_A1 __x) noexcept {
  return __builtin_isnan(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isnan(_A1) noexcept {
  return false;
}


[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isnan(float __x) noexcept {
  return __builtin_isnan(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) __attribute__((__enable_if__(true, ""))) bool
isnan(double __x) noexcept {
  return __builtin_isnan(__x);
}

[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isnan(long double __x) noexcept {
  return __builtin_isnan(__x);
}




template <class _A1, __enable_if_t<is_floating_point<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isnormal(_A1 __x) noexcept {
  return __builtin_isnormal(__x);
}

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isnormal(_A1 __x) noexcept {
  return __x != 0;
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isgreater(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isgreater((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isgreaterequal(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isgreaterequal((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isless(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isless((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool islessequal(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_islessequal((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool islessgreater(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_islessgreater((type)__x, (type)__y);
}



template <class _A1, class _A2, __enable_if_t<is_arithmetic<_A1>::value && is_arithmetic<_A2>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) bool isunordered(_A1 __x, _A2 __y) noexcept {
  using type = typename __promote<_A1, _A2>::type;
  return __builtin_isunordered((type)__x, (type)__y);
}

}

}}
# 376 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/__math/trigonometric_functions.h" 1 3
# 18 "/data/data/com.termux/files/usr/include/c++/v1/__math/trigonometric_functions.h" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float cos(float __x) noexcept { return __builtin_cosf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double cos(double __x) noexcept {
  return __builtin_cos(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double cos(long double __x) noexcept { return __builtin_cosl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double cos(_A1 __x) noexcept {
  return __builtin_cos((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float sin(float __x) noexcept { return __builtin_sinf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double sin(double __x) noexcept {
  return __builtin_sin(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double sin(long double __x) noexcept { return __builtin_sinl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double sin(_A1 __x) noexcept {
  return __builtin_sin((double)__x);
}



inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) float tan(float __x) noexcept { return __builtin_tanf(__x); }

template <class = int>
__attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double tan(double __x) noexcept {
  return __builtin_tan(__x);
}

inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) long double tan(long double __x) noexcept { return __builtin_tanl(__x); }

template <class _A1, __enable_if_t<is_integral<_A1>::value, int> = 0>
inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) double tan(_A1 __x) noexcept {
  return __builtin_tan((double)__x);
}

}

}}
# 377 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3



# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 1 3
# 381 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 2 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

namespace __math {




template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) int fpclassify(float __x) noexcept {
  return __builtin_fpclassify(0x02, 0x01, 0x04, 0x08, 0x10, __x);
}

template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) int fpclassify(double __x) noexcept {
  return __builtin_fpclassify(0x02, 0x01, 0x04, 0x08, 0x10, __x);
}

template <class = int>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) int fpclassify(long double __x) noexcept {
  return __builtin_fpclassify(0x02, 0x01, 0x04, 0x08, 0x10, __x);
}

template <class _A1, std::__enable_if_t<std::is_integral<_A1>::value, int> = 0>
[[__nodiscard__]] inline __attribute__((__visibility__("hidden"))) __attribute__((__exclude_from_explicit_instantiation__)) __attribute__((__abi_tag__("ne180000"))) int fpclassify(_A1 __x) noexcept {
  return __x == 0 ? 0x10 : 0x04;
}

}

}}

using std::__math::fpclassify;
using std::__math::signbit;



using std::__math::isfinite;
using std::__math::isgreater;
using std::__math::isgreaterequal;
using std::__math::isinf;
using std::__math::isless;
using std::__math::islessequal;
using std::__math::islessgreater;
using std::__math::isnan;
using std::__math::isnormal;
using std::__math::isunordered;
# 444 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 3
using std::__math::acos;
using std::__math::acosh;
using std::__math::asin;
using std::__math::asinh;
using std::__math::atan;
using std::__math::atan2;
using std::__math::atanh;
using std::__math::cbrt;
using std::__math::ceil;
using std::__math::copysign;
using std::__math::cos;
using std::__math::cosh;
using std::__math::erf;
using std::__math::erfc;
using std::__math::exp;
using std::__math::exp2;
using std::__math::expm1;
using std::__math::fabs;
using std::__math::fdim;
using std::__math::floor;
using std::__math::fma;
using std::__math::fmax;
using std::__math::fmin;
using std::__math::fmod;
using std::__math::frexp;
using std::__math::hypot;
using std::__math::ilogb;
using std::__math::ldexp;
using std::__math::lgamma;
using std::__math::llrint;
using std::__math::llround;
using std::__math::log;
using std::__math::log10;
using std::__math::log1p;
using std::__math::log2;
using std::__math::logb;
using std::__math::lrint;
using std::__math::lround;
using std::__math::modf;
using std::__math::nearbyint;
using std::__math::nextafter;
using std::__math::nexttoward;
using std::__math::pow;
using std::__math::remainder;
using std::__math::remquo;
using std::__math::rint;
using std::__math::round;
using std::__math::scalbln;
using std::__math::scalbn;
using std::__math::signbit;
using std::__math::sin;
using std::__math::sinh;
using std::__math::sqrt;
using std::__math::tan;
using std::__math::tanh;
using std::__math::tgamma;
using std::__math::trunc;

}
# 196 "/data/data/com.termux/files/usr/include/python3.12/pyport.h" 2
# 221 "/data/data/com.termux/files/usr/include/python3.12/pyport.h"
# 1 "/data/data/com.termux/files/usr/include/sys/stat.h" 1 3 4
# 37 "/data/data/com.termux/files/usr/include/sys/stat.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/stat.h" 1 3 4
# 42 "/data/data/com.termux/files/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
  __s64 tv_sec;
  __u32 tv_nsec;
  __s32 __reserved;
};
struct statx {
  __u32 stx_mask;
  __u32 stx_blksize;
  __u64 stx_attributes;
  __u32 stx_nlink;
  __u32 stx_uid;
  __u32 stx_gid;
  __u16 stx_mode;
  __u16 __spare0[1];
  __u64 stx_ino;
  __u64 stx_size;
  __u64 stx_blocks;
  __u64 stx_attributes_mask;
  struct statx_timestamp stx_atime;
  struct statx_timestamp stx_btime;
  struct statx_timestamp stx_ctime;
  struct statx_timestamp stx_mtime;
  __u32 stx_rdev_major;
  __u32 stx_rdev_minor;
  __u32 stx_dev_major;
  __u32 stx_dev_minor;
  __u64 stx_mnt_id;
  __u32 stx_dio_mem_align;
  __u32 stx_dio_offset_align;
  __u64 __spare3[12];
};
# 38 "/data/data/com.termux/files/usr/include/sys/stat.h" 2 3 4



extern "C" {
# 102 "/data/data/com.termux/files/usr/include/sys/stat.h" 3 4
struct stat { dev_t st_dev; ino_t st_ino; mode_t st_mode; nlink_t st_nlink; uid_t st_uid; gid_t st_gid; dev_t st_rdev; unsigned long __pad1; off_t st_size; int st_blksize; int __pad2; long st_blocks; struct timespec st_atim; struct timespec st_mtim; struct timespec st_ctim; unsigned int __unused4; unsigned int __unused5; };
struct stat64 { dev_t st_dev; ino_t st_ino; mode_t st_mode; nlink_t st_nlink; uid_t st_uid; gid_t st_gid; dev_t st_rdev; unsigned long __pad1; off_t st_size; int st_blksize; int __pad2; long st_blocks; struct timespec st_atim; struct timespec st_mtim; struct timespec st_ctim; unsigned int __unused4; unsigned int __unused5; };
# 139 "/data/data/com.termux/files/usr/include/sys/stat.h" 3 4
int chmod(const char* _Nonnull __path, mode_t __mode);
int fchmod(int __fd, mode_t __mode);
int mkdir(const char* _Nonnull __path, mode_t __mode);

int fstat(int __fd, struct stat* _Nonnull __buf);
int fstat64(int __fd, struct stat64* _Nonnull __buf);
int fstatat(int __dir_fd, const char* _Nonnull __path, struct stat* _Nonnull __buf, int __flags);
int fstatat64(int __dir_fd, const char* _Nonnull __path, struct stat64* _Nonnull __buf, int __flags);
int lstat(const char* _Nonnull __path, struct stat* _Nonnull __buf);
int lstat64(const char* _Nonnull __path, struct stat64* _Nonnull __buf);
int stat(const char* _Nonnull __path, struct stat* _Nonnull __buf);
int stat64(const char* _Nonnull __path, struct stat64* _Nonnull __buf);

int mknod(const char* _Nonnull __path, mode_t __mode, dev_t __dev);
mode_t umask(mode_t __mask);





int mkfifo(const char* _Nonnull __path, mode_t __mode);


int mkfifoat(int __dir_fd, const char* _Nonnull __path, mode_t __mode) __attribute__((__availability__(android,strict,introduced=23 )));



int fchmodat(int __dir_fd, const char* _Nonnull __path, mode_t __mode, int __flags);
int mkdirat(int __dir_fd, const char* _Nonnull __path, mode_t __mode);
int mknodat(int __dir_fd, const char* _Nonnull __path, mode_t __mode, dev_t __dev);
# 196 "/data/data/com.termux/files/usr/include/sys/stat.h" 3 4
int utimensat(int __dir_fd, const char* _Null_unspecified __path, const struct timespec __times[_Nullable 2], int __flags);
# 208 "/data/data/com.termux/files/usr/include/sys/stat.h" 3 4
int futimens(int __fd, const struct timespec __times[_Nullable 2]);
# 226 "/data/data/com.termux/files/usr/include/sys/stat.h" 3 4
}
# 222 "/data/data/com.termux/files/usr/include/python3.12/pyport.h" 2
# 256 "/data/data/com.termux/files/usr/include/python3.12/pyport.h"
extern "C" {
# 506 "/data/data/com.termux/files/usr/include/python3.12/pyport.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/exports.h" 1
# 507 "/data/data/com.termux/files/usr/include/python3.12/pyport.h" 2
# 590 "/data/data/com.termux/files/usr/include/python3.12/pyport.h"
}
# 39 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pymacro.h" 1
# 40 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pymath.h" 1
# 41 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pymem.h" 1
# 11 "/data/data/com.termux/files/usr/include/python3.12/pymem.h"
extern "C" {
# 52 "/data/data/com.termux/files/usr/include/python3.12/pymem.h"
__attribute__ ((visibility ("default"))) void * PyMem_Malloc(size_t size);
__attribute__ ((visibility ("default"))) void * PyMem_Calloc(size_t nelem, size_t elsize);
__attribute__ ((visibility ("default"))) void * PyMem_Realloc(void *ptr, size_t new_size);
__attribute__ ((visibility ("default"))) void PyMem_Free(void *ptr);
# 96 "/data/data/com.termux/files/usr/include/python3.12/pymem.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pymem.h" 1




__attribute__ ((visibility ("default"))) void * PyMem_RawMalloc(size_t size);
__attribute__ ((visibility ("default"))) void * PyMem_RawCalloc(size_t nelem, size_t elsize);
__attribute__ ((visibility ("default"))) void * PyMem_RawRealloc(void *ptr, size_t new_size);
__attribute__ ((visibility ("default"))) void PyMem_RawFree(void *ptr);


__attribute__ ((visibility ("default"))) const char* _PyMem_GetCurrentAllocatorName(void);


__attribute__ ((visibility ("default"))) char * _PyMem_RawStrdup(const char *str);


__attribute__ ((visibility ("default"))) char * _PyMem_Strdup(const char *str);


__attribute__ ((visibility ("default"))) wchar_t* _PyMem_RawWcsdup(const wchar_t *str);


typedef enum {

    PYMEM_DOMAIN_RAW,


    PYMEM_DOMAIN_MEM,


    PYMEM_DOMAIN_OBJ
} PyMemAllocatorDomain;

typedef enum {
    PYMEM_ALLOCATOR_NOT_SET = 0,
    PYMEM_ALLOCATOR_DEFAULT = 1,
    PYMEM_ALLOCATOR_DEBUG = 2,
    PYMEM_ALLOCATOR_MALLOC = 3,
    PYMEM_ALLOCATOR_MALLOC_DEBUG = 4,

    PYMEM_ALLOCATOR_PYMALLOC = 5,
    PYMEM_ALLOCATOR_PYMALLOC_DEBUG = 6,

} PyMemAllocatorName;


typedef struct {

    void *ctx;


    void* (*malloc) (void *ctx, size_t size);


    void* (*calloc) (void *ctx, size_t nelem, size_t elsize);


    void* (*realloc) (void *ctx, void *ptr, size_t new_size);


    void (*free) (void *ctx, void *ptr);
} PyMemAllocatorEx;


__attribute__ ((visibility ("default"))) void PyMem_GetAllocator(PyMemAllocatorDomain domain,
                                    PyMemAllocatorEx *allocator);
# 79 "/data/data/com.termux/files/usr/include/python3.12/cpython/pymem.h"
__attribute__ ((visibility ("default"))) void PyMem_SetAllocator(PyMemAllocatorDomain domain,
                                    PyMemAllocatorEx *allocator);
# 98 "/data/data/com.termux/files/usr/include/python3.12/cpython/pymem.h"
__attribute__ ((visibility ("default"))) void PyMem_SetupDebugHooks(void);
# 97 "/data/data/com.termux/files/usr/include/python3.12/pymem.h" 2




}
# 42 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pytypedefs.h" 1








extern "C" {


typedef struct PyModuleDef PyModuleDef;
typedef struct PyModuleDef_Slot PyModuleDef_Slot;
typedef struct PyMethodDef PyMethodDef;
typedef struct PyGetSetDef PyGetSetDef;
typedef struct PyMemberDef PyMemberDef;

typedef struct _object PyObject;
typedef struct _longobject PyLongObject;
typedef struct _typeobject PyTypeObject;
typedef struct PyCodeObject PyCodeObject;
typedef struct _frame PyFrameObject;

typedef struct _ts PyThreadState;
typedef struct _is PyInterpreterState;


}
# 43 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pybuffer.h" 1





extern "C" {
# 20 "/data/data/com.termux/files/usr/include/python3.12/pybuffer.h"
typedef struct {
    void *buf;
    PyObject *obj;
    Py_ssize_t len;
    Py_ssize_t itemsize;

    int readonly;
    int ndim;
    char *format;
    Py_ssize_t *shape;
    Py_ssize_t *strides;
    Py_ssize_t *suboffsets;
    void *internal;
} Py_buffer;

typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
typedef void (*releasebufferproc)(PyObject *, Py_buffer *);


__attribute__ ((visibility ("default"))) int PyObject_CheckBuffer(PyObject *obj);






__attribute__ ((visibility ("default"))) int PyObject_GetBuffer(PyObject *obj, Py_buffer *view,
                                   int flags);



__attribute__ ((visibility ("default"))) void * PyBuffer_GetPointer(const Py_buffer *view, const Py_ssize_t *indices);



__attribute__ ((visibility ("default"))) Py_ssize_t PyBuffer_SizeFromFormat(const char *format);


__attribute__ ((visibility ("default"))) int PyBuffer_ToContiguous(void *buf, const Py_buffer *view,
                                      Py_ssize_t len, char order);

__attribute__ ((visibility ("default"))) int PyBuffer_FromContiguous(const Py_buffer *view, const void *buf,
                                        Py_ssize_t len, char order);
# 77 "/data/data/com.termux/files/usr/include/python3.12/pybuffer.h"
__attribute__ ((visibility ("default"))) int PyObject_CopyData(PyObject *dest, PyObject *src);


__attribute__ ((visibility ("default"))) int PyBuffer_IsContiguous(const Py_buffer *view, char fort);





__attribute__ ((visibility ("default"))) void PyBuffer_FillContiguousStrides(int ndims,
                                               Py_ssize_t *shape,
                                               Py_ssize_t *strides,
                                               int itemsize,
                                               char fort);






__attribute__ ((visibility ("default"))) int PyBuffer_FillInfo(Py_buffer *view, PyObject *o, void *buf,
                                  Py_ssize_t len, int readonly,
                                  int flags);


__attribute__ ((visibility ("default"))) void PyBuffer_Release(Py_buffer *view);
# 143 "/data/data/com.termux/files/usr/include/python3.12/pybuffer.h"
}
# 44 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/object.h" 1



extern "C" {
# 54 "/data/data/com.termux/files/usr/include/python3.12/object.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/pystats.h" 1





extern "C" {
# 108 "/data/data/com.termux/files/usr/include/python3.12/pystats.h"
}
# 55 "/data/data/com.termux/files/usr/include/python3.12/object.h" 2
# 166 "/data/data/com.termux/files/usr/include/python3.12/object.h"
struct _object {





    __extension__







    union {
       Py_ssize_t ob_refcnt;

       uint32_t ob_refcnt_split[2];

    };




    PyTypeObject *ob_type;
};




typedef struct {
    PyObject ob_base;
    Py_ssize_t ob_size;
} PyVarObject;






__attribute__ ((visibility ("default"))) int Py_Is(PyObject *x, PyObject *y);



static inline Py_ssize_t Py_REFCNT(PyObject *ob) {
    return ob->ob_refcnt;
}






static inline PyTypeObject* Py_TYPE(PyObject *ob) {
    return ob->ob_type;
}




extern __attribute__ ((visibility ("default"))) PyTypeObject PyLong_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyBool_Type;


static inline Py_ssize_t Py_SIZE(PyObject *ob) {
    ((ob->ob_type != &PyLong_Type) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/object.h", 231, __PRETTY_FUNCTION__, "ob->ob_type != &PyLong_Type"));
    ((ob->ob_type != &PyBool_Type) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/object.h", 232, __PRETTY_FUNCTION__, "ob->ob_type != &PyBool_Type"));
    return ((PyVarObject*)((ob)))->ob_size;
}




static inline __attribute__((always_inline)) int _Py_IsImmortal(PyObject *op)
{

    return ((int32_t)(op->ob_refcnt)) < 0;



}


static inline int Py_IS_TYPE(PyObject *ob, PyTypeObject *type) {
    return Py_TYPE(((PyObject*)((ob)))) == type;
}





static inline void Py_SET_REFCNT(PyObject *ob, Py_ssize_t refcnt) {




    if (_Py_IsImmortal(((PyObject*)((ob))))) {
        return;
    }
    ob->ob_refcnt = refcnt;
}





static inline void Py_SET_TYPE(PyObject *ob, PyTypeObject *type) {
    ob->ob_type = type;
}




static inline void Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size) {
    ((ob->ob_base.ob_type != &PyLong_Type) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/object.h", 280, __PRETTY_FUNCTION__, "ob->ob_base.ob_type != &PyLong_Type"));
    ((ob->ob_base.ob_type != &PyBool_Type) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/object.h", 281, __PRETTY_FUNCTION__, "ob->ob_base.ob_type != &PyBool_Type"));
    ob->ob_size = size;
}
# 304 "/data/data/com.termux/files/usr/include/python3.12/object.h"
typedef PyObject * (*unaryfunc)(PyObject *);
typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
typedef int (*inquiry)(PyObject *);
typedef Py_ssize_t (*lenfunc)(PyObject *);
typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);

typedef int (*objobjproc)(PyObject *, PyObject *);
typedef int (*visitproc)(PyObject *, void *);
typedef int (*traverseproc)(PyObject *, visitproc, void *);


typedef void (*freefunc)(void *);
typedef void (*destructor)(PyObject *);
typedef PyObject *(*getattrfunc)(PyObject *, char *);
typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
typedef PyObject *(*reprfunc)(PyObject *);
typedef Py_hash_t (*hashfunc)(PyObject *);
typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
typedef PyObject *(*getiterfunc) (PyObject *);
typedef PyObject *(*iternextfunc) (PyObject *);
typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
typedef PyObject *(*newfunc)(PyTypeObject *, PyObject *, PyObject *);
typedef PyObject *(*allocfunc)(PyTypeObject *, Py_ssize_t);


typedef PyObject *(*vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                    size_t nargsf, PyObject *kwnames);


typedef struct{
    int slot;
    void *pfunc;
} PyType_Slot;

typedef struct{
    const char* name;
    int basicsize;
    int itemsize;
    unsigned int flags;
    PyType_Slot *slots;
} PyType_Spec;

__attribute__ ((visibility ("default"))) PyObject* PyType_FromSpec(PyType_Spec*);

__attribute__ ((visibility ("default"))) PyObject* PyType_FromSpecWithBases(PyType_Spec*, PyObject*);


__attribute__ ((visibility ("default"))) void* PyType_GetSlot(PyTypeObject*, int);


__attribute__ ((visibility ("default"))) PyObject* PyType_FromModuleAndSpec(PyObject *, PyType_Spec *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyType_GetModule(PyTypeObject *);
__attribute__ ((visibility ("default"))) void * PyType_GetModuleState(PyTypeObject *);


__attribute__ ((visibility ("default"))) PyObject * PyType_GetName(PyTypeObject *);
__attribute__ ((visibility ("default"))) PyObject * PyType_GetQualName(PyTypeObject *);


__attribute__ ((visibility ("default"))) PyObject * PyType_FromMetaclass(PyTypeObject*, PyObject*, PyType_Spec*, PyObject*);
__attribute__ ((visibility ("default"))) void * PyObject_GetTypeData(PyObject *obj, PyTypeObject *cls);
__attribute__ ((visibility ("default"))) Py_ssize_t PyType_GetTypeDataSize(PyTypeObject *cls);



__attribute__ ((visibility ("default"))) int PyType_IsSubtype(PyTypeObject *, PyTypeObject *);

static inline int PyObject_TypeCheck(PyObject *ob, PyTypeObject *type) {
    return Py_IS_TYPE(((PyObject*)((ob))), (type)) || PyType_IsSubtype(Py_TYPE(((PyObject*)((ob)))), type);
}




extern __attribute__ ((visibility ("default"))) PyTypeObject PyType_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyBaseObject_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PySuper_Type;

__attribute__ ((visibility ("default"))) unsigned long PyType_GetFlags(PyTypeObject*);

__attribute__ ((visibility ("default"))) int PyType_Ready(PyTypeObject *);
__attribute__ ((visibility ("default"))) PyObject * PyType_GenericAlloc(PyTypeObject *, Py_ssize_t);
__attribute__ ((visibility ("default"))) PyObject * PyType_GenericNew(PyTypeObject *,
                                               PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) unsigned int PyType_ClearCache(void);
__attribute__ ((visibility ("default"))) void PyType_Modified(PyTypeObject *);


__attribute__ ((visibility ("default"))) PyObject * PyObject_Repr(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyObject_Str(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyObject_ASCII(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyObject_Bytes(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyObject_RichCompare(PyObject *, PyObject *, int);
__attribute__ ((visibility ("default"))) int PyObject_RichCompareBool(PyObject *, PyObject *, int);
__attribute__ ((visibility ("default"))) PyObject * PyObject_GetAttrString(PyObject *, const char *);
__attribute__ ((visibility ("default"))) int PyObject_SetAttrString(PyObject *, const char *, PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_HasAttrString(PyObject *, const char *);
__attribute__ ((visibility ("default"))) PyObject * PyObject_GetAttr(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_HasAttr(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyObject_SelfIter(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyObject_GenericGetAttr(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_GenericSetAttr(PyObject *, PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) int PyObject_GenericSetDict(PyObject *, PyObject *, void *);

__attribute__ ((visibility ("default"))) Py_hash_t PyObject_Hash(PyObject *);
__attribute__ ((visibility ("default"))) Py_hash_t PyObject_HashNotImplemented(PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_IsTrue(PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_Not(PyObject *);
__attribute__ ((visibility ("default"))) int PyCallable_Check(PyObject *);
__attribute__ ((visibility ("default"))) void PyObject_ClearWeakRefs(PyObject *);






__attribute__ ((visibility ("default"))) PyObject * PyObject_Dir(PyObject *);



__attribute__ ((visibility ("default"))) PyObject * _PyObject_GetState(PyObject *);




__attribute__ ((visibility ("default"))) int Py_ReprEnter(PyObject *);
__attribute__ ((visibility ("default"))) void Py_ReprLeave(PyObject *);
# 610 "/data/data/com.termux/files/usr/include/python3.12/object.h"
__attribute__ ((visibility ("default"))) void _Py_Dealloc(PyObject *);





__attribute__ ((visibility ("default"))) void Py_IncRef(PyObject *);
__attribute__ ((visibility ("default"))) void Py_DecRef(PyObject *);



__attribute__ ((visibility ("default"))) void _Py_IncRef(PyObject *);
__attribute__ ((visibility ("default"))) void _Py_DecRef(PyObject *);

static inline __attribute__((always_inline)) void Py_INCREF(PyObject *op)
{
# 641 "/data/data/com.termux/files/usr/include/python3.12/object.h"
    uint32_t cur_refcnt = op->ob_refcnt_split[0];
    uint32_t new_refcnt = cur_refcnt + 1;
    if (new_refcnt == 0) {
        return;
    }
    op->ob_refcnt_split[0] = new_refcnt;







    ((void)0);




}
# 696 "/data/data/com.termux/files/usr/include/python3.12/object.h"
static inline __attribute__((always_inline)) void Py_DECREF(PyObject *op)
{


    if (_Py_IsImmortal(((PyObject*)((op))))) {
        return;
    }
    ((void)0);
    if (--op->ob_refcnt == 0) {
        _Py_Dealloc(op);
    }
}
# 785 "/data/data/com.termux/files/usr/include/python3.12/object.h"
static inline void Py_XINCREF(PyObject *op)
{
    if (op != nullptr) {
        Py_INCREF(((PyObject*)((op))));
    }
}




static inline void Py_XDECREF(PyObject *op)
{
    if (op != nullptr) {
        Py_DECREF(((PyObject*)((op))));
    }
}






__attribute__ ((visibility ("default"))) PyObject* Py_NewRef(PyObject *obj);


__attribute__ ((visibility ("default"))) PyObject* Py_XNewRef(PyObject *obj);

static inline PyObject* _Py_NewRef(PyObject *obj)
{
    Py_INCREF(((PyObject*)((obj))));
    return obj;
}

static inline PyObject* _Py_XNewRef(PyObject *obj)
{
    Py_XINCREF(((PyObject*)((obj))));
    return obj;
}
# 842 "/data/data/com.termux/files/usr/include/python3.12/object.h"
extern __attribute__ ((visibility ("default"))) PyObject _Py_NoneStruct;



__attribute__ ((visibility ("default"))) int Py_IsNone(PyObject *x);
# 856 "/data/data/com.termux/files/usr/include/python3.12/object.h"
extern __attribute__ ((visibility ("default"))) PyObject _Py_NotImplementedStruct;
# 872 "/data/data/com.termux/files/usr/include/python3.12/object.h"
typedef enum {
    PYGEN_RETURN = 0,
    PYGEN_ERROR = -1,
    PYGEN_NEXT = 1,
} PySendResult;
# 953 "/data/data/com.termux/files/usr/include/python3.12/object.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h" 1




__attribute__ ((visibility ("default"))) void _Py_NewReference(PyObject *op);
__attribute__ ((visibility ("default"))) void _Py_NewReferenceNoTotal(PyObject *op);
# 42 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
typedef struct _Py_Identifier {
    const char* string;


    Py_ssize_t index;
} _Py_Identifier;
# 59 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
typedef struct {




    binaryfunc nb_add;
    binaryfunc nb_subtract;
    binaryfunc nb_multiply;
    binaryfunc nb_remainder;
    binaryfunc nb_divmod;
    ternaryfunc nb_power;
    unaryfunc nb_negative;
    unaryfunc nb_positive;
    unaryfunc nb_absolute;
    inquiry nb_bool;
    unaryfunc nb_invert;
    binaryfunc nb_lshift;
    binaryfunc nb_rshift;
    binaryfunc nb_and;
    binaryfunc nb_xor;
    binaryfunc nb_or;
    unaryfunc nb_int;
    void *nb_reserved;
    unaryfunc nb_float;

    binaryfunc nb_inplace_add;
    binaryfunc nb_inplace_subtract;
    binaryfunc nb_inplace_multiply;
    binaryfunc nb_inplace_remainder;
    ternaryfunc nb_inplace_power;
    binaryfunc nb_inplace_lshift;
    binaryfunc nb_inplace_rshift;
    binaryfunc nb_inplace_and;
    binaryfunc nb_inplace_xor;
    binaryfunc nb_inplace_or;

    binaryfunc nb_floor_divide;
    binaryfunc nb_true_divide;
    binaryfunc nb_inplace_floor_divide;
    binaryfunc nb_inplace_true_divide;

    unaryfunc nb_index;

    binaryfunc nb_matrix_multiply;
    binaryfunc nb_inplace_matrix_multiply;
} PyNumberMethods;

typedef struct {
    lenfunc sq_length;
    binaryfunc sq_concat;
    ssizeargfunc sq_repeat;
    ssizeargfunc sq_item;
    void *was_sq_slice;
    ssizeobjargproc sq_ass_item;
    void *was_sq_ass_slice;
    objobjproc sq_contains;

    binaryfunc sq_inplace_concat;
    ssizeargfunc sq_inplace_repeat;
} PySequenceMethods;

typedef struct {
    lenfunc mp_length;
    binaryfunc mp_subscript;
    objobjargproc mp_ass_subscript;
} PyMappingMethods;

typedef PySendResult (*sendfunc)(PyObject *iter, PyObject *value, PyObject **result);

typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
    sendfunc am_send;
} PyAsyncMethods;

typedef struct {
     getbufferproc bf_getbuffer;
     releasebufferproc bf_releasebuffer;
} PyBufferProcs;



typedef Py_ssize_t printfunc;



struct _typeobject {
    PyVarObject ob_base;
    const char *tp_name;
    Py_ssize_t tp_basicsize, tp_itemsize;



    destructor tp_dealloc;
    Py_ssize_t tp_vectorcall_offset;
    getattrfunc tp_getattr;
    setattrfunc tp_setattr;
    PyAsyncMethods *tp_as_async;

    reprfunc tp_repr;



    PyNumberMethods *tp_as_number;
    PySequenceMethods *tp_as_sequence;
    PyMappingMethods *tp_as_mapping;



    hashfunc tp_hash;
    ternaryfunc tp_call;
    reprfunc tp_str;
    getattrofunc tp_getattro;
    setattrofunc tp_setattro;


    PyBufferProcs *tp_as_buffer;


    unsigned long tp_flags;

    const char *tp_doc;



    traverseproc tp_traverse;


    inquiry tp_clear;



    richcmpfunc tp_richcompare;


    Py_ssize_t tp_weaklistoffset;


    getiterfunc tp_iter;
    iternextfunc tp_iternext;


    PyMethodDef *tp_methods;
    PyMemberDef *tp_members;
    PyGetSetDef *tp_getset;

    PyTypeObject *tp_base;
    PyObject *tp_dict;
    descrgetfunc tp_descr_get;
    descrsetfunc tp_descr_set;
    Py_ssize_t tp_dictoffset;
    initproc tp_init;
    allocfunc tp_alloc;
    newfunc tp_new;
    freefunc tp_free;
    inquiry tp_is_gc;
    PyObject *tp_bases;
    PyObject *tp_mro;
    PyObject *tp_cache;
    void *tp_subclasses;
    PyObject *tp_weaklist;
    destructor tp_del;


    unsigned int tp_version_tag;

    destructor tp_finalize;
    vectorcallfunc tp_vectorcall;


    unsigned char tp_watched;
};




struct _specialization_cache {
# 247 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
    PyObject *getitem;
    uint32_t getitem_version;
};


typedef struct _heaptypeobject {


    PyTypeObject ht_type;
    PyAsyncMethods as_async;
    PyNumberMethods as_number;
    PyMappingMethods as_mapping;
    PySequenceMethods as_sequence;




    PyBufferProcs as_buffer;
    PyObject *ht_name, *ht_slots, *ht_qualname;
    struct _dictkeysobject *ht_cached_keys;
    PyObject *ht_module;
    char *_ht_tpname;
    struct _specialization_cache _spec_cache;

} PyHeapTypeObject;

__attribute__ ((visibility ("default"))) const char * _PyType_Name(PyTypeObject *);
__attribute__ ((visibility ("default"))) PyObject * _PyType_Lookup(PyTypeObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * _PyType_LookupId(PyTypeObject *, _Py_Identifier *);
__attribute__ ((visibility ("default"))) PyObject * _PyObject_LookupSpecialId(PyObject *, _Py_Identifier *);





__attribute__ ((visibility ("default"))) PyTypeObject * _PyType_CalculateMetaclass(PyTypeObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * _PyType_GetDocFromInternalDoc(const char *, const char *);
__attribute__ ((visibility ("default"))) PyObject * _PyType_GetTextSignatureFromInternalDoc(const char *, const char *);
__attribute__ ((visibility ("default"))) PyObject * PyType_GetModuleByDef(PyTypeObject *, PyModuleDef *);
__attribute__ ((visibility ("default"))) PyObject * PyType_GetDict(PyTypeObject *);

__attribute__ ((visibility ("default"))) int PyObject_Print(PyObject *, FILE *, int);
__attribute__ ((visibility ("default"))) void _Py_BreakPoint(void);
__attribute__ ((visibility ("default"))) void _PyObject_Dump(PyObject *);
__attribute__ ((visibility ("default"))) int _PyObject_IsFreed(PyObject *);

__attribute__ ((visibility ("default"))) int _PyObject_IsAbstract(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * _PyObject_GetAttrId(PyObject *, _Py_Identifier *);
__attribute__ ((visibility ("default"))) int _PyObject_SetAttrId(PyObject *, _Py_Identifier *, PyObject *);
# 305 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
__attribute__ ((visibility ("default"))) int _PyObject_LookupAttr(PyObject *, PyObject *, PyObject **);
__attribute__ ((visibility ("default"))) int _PyObject_LookupAttrId(PyObject *, _Py_Identifier *, PyObject **);

__attribute__ ((visibility ("default"))) int _PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

__attribute__ ((visibility ("default"))) PyObject ** _PyObject_GetDictPtr(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * _PyObject_NextNotImplemented(PyObject *);
__attribute__ ((visibility ("default"))) void PyObject_CallFinalizer(PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_CallFinalizerFromDealloc(PyObject *);



__attribute__ ((visibility ("default"))) PyObject *
_PyObject_GenericGetAttrWithDict(PyObject *, PyObject *, PyObject *, int);
__attribute__ ((visibility ("default"))) int
_PyObject_GenericSetAttrWithDict(PyObject *, PyObject *,
                                 PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) PyObject * _PyObject_FunctionStr(PyObject *);
# 390 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
extern __attribute__ ((visibility ("default"))) PyTypeObject _PyNone_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject _PyNotImplemented_Type;




extern __attribute__ ((visibility ("default"))) int _Py_SwappedOp[];

__attribute__ ((visibility ("default"))) void
_PyDebugAllocatorStats(FILE *out, const char *block_name, int num_blocks,
                       size_t sizeof_block);
__attribute__ ((visibility ("default"))) void
_PyObject_DebugTypeStats(FILE *out);
# 444 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
__attribute__ ((visibility ("default"))) void __attribute__((__noreturn__)) _PyObject_AssertFailed(
    PyObject *obj,
    const char *expr,
    const char *msg,
    const char *file,
    int line,
    const char *function);
# 463 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
__attribute__ ((visibility ("default"))) int _PyObject_CheckConsistency(
    PyObject *op,
    int check_content);
# 516 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
__attribute__ ((visibility ("default"))) int _PyTrash_begin(PyThreadState *tstate, PyObject *op);
__attribute__ ((visibility ("default"))) void _PyTrash_end(PyThreadState *tstate);

__attribute__ ((visibility ("default"))) int _PyTrash_cond(PyObject *op, destructor dealloc);
# 548 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
__attribute__((__deprecated__)) typedef int UsingDeprecatedTrashcanMacro;
# 557 "/data/data/com.termux/files/usr/include/python3.12/cpython/object.h"
__attribute__ ((visibility ("default"))) void * PyObject_GetItemData(PyObject *obj);

__attribute__ ((visibility ("default"))) int _PyObject_VisitManagedDict(PyObject *obj, visitproc visit, void *arg);
__attribute__ ((visibility ("default"))) void _PyObject_ClearManagedDict(PyObject *obj);



typedef int(*PyType_WatchCallback)(PyTypeObject *);
__attribute__ ((visibility ("default"))) int PyType_AddWatcher(PyType_WatchCallback callback);
__attribute__ ((visibility ("default"))) int PyType_ClearWatcher(int watcher_id);
__attribute__ ((visibility ("default"))) int PyType_Watch(int watcher_id, PyObject *type);
__attribute__ ((visibility ("default"))) int PyType_Unwatch(int watcher_id, PyObject *type);






__attribute__ ((visibility ("default"))) int PyUnstable_Type_AssignVersionTag(PyTypeObject *type);
# 954 "/data/data/com.termux/files/usr/include/python3.12/object.h" 2




static inline int
PyType_HasFeature(PyTypeObject *type, unsigned long feature)
{
    unsigned long flags;




    flags = type->tp_flags;

    return ((flags & feature) != 0);
}



static inline int PyType_Check(PyObject *op) {
    return PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 31)));
}







static inline int PyType_CheckExact(PyObject *op) {
    return Py_IS_TYPE(((PyObject*)((op))), (&PyType_Type));
}





}
# 45 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/objimpl.h" 1
# 11 "/data/data/com.termux/files/usr/include/python3.12/objimpl.h"
extern "C" {
# 97 "/data/data/com.termux/files/usr/include/python3.12/objimpl.h"
__attribute__ ((visibility ("default"))) void * PyObject_Malloc(size_t size);

__attribute__ ((visibility ("default"))) void * PyObject_Calloc(size_t nelem, size_t elsize);

__attribute__ ((visibility ("default"))) void * PyObject_Realloc(void *ptr, size_t new_size);
__attribute__ ((visibility ("default"))) void PyObject_Free(void *ptr);
# 121 "/data/data/com.termux/files/usr/include/python3.12/objimpl.h"
__attribute__ ((visibility ("default"))) PyObject * PyObject_Init(PyObject *, PyTypeObject *);
__attribute__ ((visibility ("default"))) PyVarObject * PyObject_InitVar(PyVarObject *,
                                           PyTypeObject *, Py_ssize_t);







__attribute__ ((visibility ("default"))) PyObject * _PyObject_New(PyTypeObject *);
__attribute__ ((visibility ("default"))) PyVarObject * _PyObject_NewVar(PyTypeObject *, Py_ssize_t);
# 154 "/data/data/com.termux/files/usr/include/python3.12/objimpl.h"
__attribute__ ((visibility ("default"))) Py_ssize_t PyGC_Collect(void);

__attribute__ ((visibility ("default"))) int PyGC_Enable(void);
__attribute__ ((visibility ("default"))) int PyGC_Disable(void);
__attribute__ ((visibility ("default"))) int PyGC_IsEnabled(void);
# 175 "/data/data/com.termux/files/usr/include/python3.12/objimpl.h"
typedef int (*gcvisitobjects_t)(PyObject*, void*);
__attribute__ ((visibility ("default"))) void PyUnstable_GC_VisitObjects(gcvisitobjects_t callback, void* arg);





__attribute__ ((visibility ("default"))) PyVarObject * _PyObject_GC_Resize(PyVarObject *, Py_ssize_t);





__attribute__ ((visibility ("default"))) PyObject * _PyObject_GC_New(PyTypeObject *);
__attribute__ ((visibility ("default"))) PyVarObject * _PyObject_GC_NewVar(PyTypeObject *, Py_ssize_t);




__attribute__ ((visibility ("default"))) void PyObject_GC_Track(void *);




__attribute__ ((visibility ("default"))) void PyObject_GC_UnTrack(void *);

__attribute__ ((visibility ("default"))) void PyObject_GC_Del(void *);






__attribute__ ((visibility ("default"))) int PyObject_GC_IsTracked(PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_GC_IsFinalized(PyObject *);
# 227 "/data/data/com.termux/files/usr/include/python3.12/objimpl.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/objimpl.h" 1




static inline size_t _PyObject_SIZE(PyTypeObject *type) {
    return static_cast<size_t>(type->tp_basicsize);
}
# 23 "/data/data/com.termux/files/usr/include/python3.12/cpython/objimpl.h"
static inline size_t _PyObject_VAR_SIZE(PyTypeObject *type, Py_ssize_t nitems) {
    size_t size = static_cast<size_t>(type->tp_basicsize);
    size += static_cast<size_t>(nitems) * static_cast<size_t>(type->tp_itemsize);
    return (((size_t)(size) + (size_t)((8) - 1)) & ~(size_t)((8) - 1));
}
# 59 "/data/data/com.termux/files/usr/include/python3.12/cpython/objimpl.h"
typedef struct {

    void *ctx;


    void* (*alloc) (void *ctx, size_t size);


    void (*free) (void *ctx, void *ptr, size_t size);
} PyObjectArenaAllocator;


__attribute__ ((visibility ("default"))) void PyObject_GetArenaAllocator(PyObjectArenaAllocator *allocator);


__attribute__ ((visibility ("default"))) void PyObject_SetArenaAllocator(PyObjectArenaAllocator *allocator);



__attribute__ ((visibility ("default"))) int PyObject_IS_GC(PyObject *obj);
# 90 "/data/data/com.termux/files/usr/include/python3.12/cpython/objimpl.h"
__attribute__ ((visibility ("default"))) int PyType_SUPPORTS_WEAKREFS(PyTypeObject *type);

__attribute__ ((visibility ("default"))) PyObject ** PyObject_GET_WEAKREFS_LISTPTR(PyObject *op);

__attribute__ ((visibility ("default"))) PyObject * PyUnstable_Object_GC_NewWithExtraData(PyTypeObject *,
                                                             size_t);
# 228 "/data/data/com.termux/files/usr/include/python3.12/objimpl.h" 2




}
# 46 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/typeslots.h" 1
# 47 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pyhash.h" 1




extern "C" {




__attribute__ ((visibility ("default"))) Py_hash_t _Py_HashDouble(PyObject *, double);
__attribute__ ((visibility ("default"))) Py_hash_t _Py_HashPointer(const void*);

__attribute__ ((visibility ("default"))) Py_hash_t _Py_HashPointerRaw(const void*);
__attribute__ ((visibility ("default"))) Py_hash_t _Py_HashBytes(const void*, Py_ssize_t);
# 55 "/data/data/com.termux/files/usr/include/python3.12/pyhash.h"
typedef union {

    unsigned char uc[24];

    struct {
        Py_hash_t prefix;
        Py_hash_t suffix;
    } fnv;

    struct {
        uint64_t k0;
        uint64_t k1;
    } siphash;

    struct {
        unsigned char padding[16];
        Py_hash_t suffix;
    } djbx33a;
    struct {
        unsigned char padding[16];
        Py_hash_t hashsalt;
    } expat;
} _Py_HashSecret_t;
extern __attribute__ ((visibility ("default"))) _Py_HashSecret_t _Py_HashSecret;







typedef struct {
    Py_hash_t (*const hash)(const void *, Py_ssize_t);
    const char *name;
    const int hash_bits;
    const int seed_bits;
} PyHash_FuncDef;

__attribute__ ((visibility ("default"))) PyHash_FuncDef* PyHash_GetFuncDef(void);
# 141 "/data/data/com.termux/files/usr/include/python3.12/pyhash.h"
}
# 48 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pydebug.h" 1




extern "C" {


__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_DebugFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_VerboseFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_QuietFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_InteractiveFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_InspectFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_OptimizeFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_NoSiteFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_BytesWarningFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_FrozenFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_IgnoreEnvironmentFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_DontWriteBytecodeFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_NoUserSiteDirectory;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_UnbufferedStdioFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_HashRandomizationFlag;
__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_IsolatedFlag;
# 32 "/data/data/com.termux/files/usr/include/python3.12/cpython/pydebug.h"
__attribute__ ((visibility ("default"))) char* Py_GETENV(const char *name);


}
# 49 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/bytearrayobject.h" 1





extern "C" {
# 20 "/data/data/com.termux/files/usr/include/python3.12/bytearrayobject.h"
extern __attribute__ ((visibility ("default"))) PyTypeObject PyByteArray_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyByteArrayIter_Type;






__attribute__ ((visibility ("default"))) PyObject * PyByteArray_FromObject(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyByteArray_Concat(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyByteArray_FromStringAndSize(const char *, Py_ssize_t);
__attribute__ ((visibility ("default"))) Py_ssize_t PyByteArray_Size(PyObject *);
__attribute__ ((visibility ("default"))) char * PyByteArray_AsString(PyObject *);
__attribute__ ((visibility ("default"))) int PyByteArray_Resize(PyObject *, Py_ssize_t);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/bytearrayobject.h" 1





typedef struct {
    PyVarObject ob_base;
    Py_ssize_t ob_alloc;
    char *ob_bytes;
    char *ob_start;
    Py_ssize_t ob_exports;
} PyByteArrayObject;

extern __attribute__ ((visibility ("default"))) char _PyByteArray_empty_string[];





static inline char* PyByteArray_AS_STRING(PyObject *op)
{
    PyByteArrayObject *self = (((PyObject_TypeCheck(((PyObject*)(((op)))), (&PyByteArray_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/bytearrayobject.h", 22, __PRETTY_FUNCTION__, "PyByteArray_Check(op)")), ((PyByteArrayObject*)(op)));
    if (Py_SIZE(((PyObject*)((self))))) {
        return self->ob_start;
    }
    return _PyByteArray_empty_string;
}


static inline Py_ssize_t PyByteArray_GET_SIZE(PyObject *op) {
    PyByteArrayObject *self = (((PyObject_TypeCheck(((PyObject*)(((op)))), (&PyByteArray_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/bytearrayobject.h", 31, __PRETTY_FUNCTION__, "PyByteArray_Check(op)")), ((PyByteArrayObject*)(op)));
    return Py_SIZE(((PyObject*)((self))));
}
# 38 "/data/data/com.termux/files/usr/include/python3.12/bytearrayobject.h" 2




}
# 50 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/bytesobject.h" 1






extern "C" {


# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 1 3
# 11 "/data/data/com.termux/files/usr/include/python3.12/bytesobject.h" 2
# 27 "/data/data/com.termux/files/usr/include/python3.12/bytesobject.h"
extern __attribute__ ((visibility ("default"))) PyTypeObject PyBytes_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyBytesIter_Type;





__attribute__ ((visibility ("default"))) PyObject * PyBytes_FromStringAndSize(const char *, Py_ssize_t);
__attribute__ ((visibility ("default"))) PyObject * PyBytes_FromString(const char *);
__attribute__ ((visibility ("default"))) PyObject * PyBytes_FromObject(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyBytes_FromFormatV(const char*, va_list)
                                __attribute__((format(printf, 1, 0)));
__attribute__ ((visibility ("default"))) PyObject * PyBytes_FromFormat(const char*, ...)
                                __attribute__((format(printf, 1, 2)));
__attribute__ ((visibility ("default"))) Py_ssize_t PyBytes_Size(PyObject *);
__attribute__ ((visibility ("default"))) char * PyBytes_AsString(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyBytes_Repr(PyObject *, int);
__attribute__ ((visibility ("default"))) void PyBytes_Concat(PyObject **, PyObject *);
__attribute__ ((visibility ("default"))) void PyBytes_ConcatAndDel(PyObject **, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyBytes_DecodeEscape(const char *, Py_ssize_t,
                                            const char *, Py_ssize_t,
                                            const char *);





__attribute__ ((visibility ("default"))) int PyBytes_AsStringAndSize(
    PyObject *obj,
    char **s,
    Py_ssize_t *len
    );



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/bytesobject.h" 1




typedef struct {
    PyVarObject ob_base;
    __attribute__((__deprecated__)) Py_hash_t ob_shash;
    char ob_sval[1];






} PyBytesObject;

__attribute__ ((visibility ("default"))) int _PyBytes_Resize(PyObject **, Py_ssize_t);
__attribute__ ((visibility ("default"))) PyObject* _PyBytes_FormatEx(
    const char *format,
    Py_ssize_t format_len,
    PyObject *args,
    int use_bytearray);
__attribute__ ((visibility ("default"))) PyObject* _PyBytes_FromHex(
    PyObject *string,
    int use_bytearray);


__attribute__ ((visibility ("default"))) PyObject * _PyBytes_DecodeEscape(const char *, Py_ssize_t,
                                             const char *, const char **);





static inline char* PyBytes_AS_STRING(PyObject *op)
{
    return (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 27)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/bytesobject.h", 37, __PRETTY_FUNCTION__, "PyBytes_Check(op)")), ((PyBytesObject*)(op)))->ob_sval;
}


static inline Py_ssize_t PyBytes_GET_SIZE(PyObject *op) {
    PyBytesObject *self = (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 27)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/bytesobject.h", 42, __PRETTY_FUNCTION__, "PyBytes_Check(op)")), ((PyBytesObject*)(op)));
    return Py_SIZE(((PyObject*)((self))));
}




__attribute__ ((visibility ("default"))) PyObject * _PyBytes_Join(PyObject *sep, PyObject *x);





typedef struct {

    PyObject *buffer;


    Py_ssize_t allocated;



    Py_ssize_t min_size;


    int use_bytearray;



    int overallocate;


    int use_small_buffer;
    char small_buffer[512];
} _PyBytesWriter;





__attribute__ ((visibility ("default"))) void _PyBytesWriter_Init(_PyBytesWriter *writer);




__attribute__ ((visibility ("default"))) PyObject * _PyBytesWriter_Finish(_PyBytesWriter *writer,
    void *str);


__attribute__ ((visibility ("default"))) void _PyBytesWriter_Dealloc(_PyBytesWriter *writer);




__attribute__ ((visibility ("default"))) void* _PyBytesWriter_Alloc(_PyBytesWriter *writer,
    Py_ssize_t size);







__attribute__ ((visibility ("default"))) void* _PyBytesWriter_Prepare(_PyBytesWriter *writer,
    void *str,
    Py_ssize_t size);
# 120 "/data/data/com.termux/files/usr/include/python3.12/cpython/bytesobject.h"
__attribute__ ((visibility ("default"))) void* _PyBytesWriter_Resize(_PyBytesWriter *writer,
    void *str,
    Py_ssize_t size);



__attribute__ ((visibility ("default"))) void* _PyBytesWriter_WriteBytes(_PyBytesWriter *writer,
    void *str,
    const void *bytes,
    Py_ssize_t size);
# 63 "/data/data/com.termux/files/usr/include/python3.12/bytesobject.h" 2




}
# 51 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h" 1



# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 1 3
# 5 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h" 2
# 58 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
# 1 "/data/data/com.termux/files/usr/include/c++/v1/ctype.h" 1 3
# 36 "/data/data/com.termux/files/usr/include/c++/v1/ctype.h" 3



# 1 "/data/data/com.termux/files/usr/include/ctype.h" 1 3 4
# 71 "/data/data/com.termux/files/usr/include/ctype.h" 3 4
extern "C" {


extern const char* _ctype_;


static __inline__ int isalpha(int __ch) {
  return (__ch >= 'A' && __ch <= 'Z') || (__ch >= 'a' && __ch <= 'z');
}


static __inline__ int isblank(int __ch) {
  return __ch == ' ' || __ch == '\t';
}


static __inline__ int iscntrl(int __ch) {
  return ((static_cast<unsigned>(__ch)) < ' ') || __ch == 0x7f;
}


static __inline__ int isdigit(int __ch) {
  return (__ch >= '0' && __ch <= '9');
}


static __inline__ int isgraph(int __ch) {
  return (__ch >= '!' && __ch <= '~');
}


static __inline__ int islower(int __ch) {
  return (__ch >= 'a' && __ch <= 'z');
}


static __inline__ int isprint(int __ch) {
  return (__ch >= ' ' && __ch <= '~');
}


static __inline__ int isspace(int __ch) {
  return __ch == ' ' || (__ch >= '\t' && __ch <= '\r');
}


static __inline__ int isupper(int __ch) {
  return (__ch >= 'A' && __ch <= 'Z');
}


static __inline__ int isxdigit(int __ch) {
  return (__ch >= '0' && __ch <= '9') || (__ch >= 'a' && __ch <= 'f') || (__ch >= 'A' && __ch <= 'F');
}


static __inline__ int isalnum(int __ch) {
  return isalpha(__ch) || isdigit(__ch);
}


static __inline__ int ispunct(int __ch) {
  return isgraph(__ch) && !isalnum(__ch);
}






static __inline__ int _tolower(int __ch) {
  return __ch | 0x20;
}


static __inline__ int tolower(int __ch) {
  if (__ch >= 'A' && __ch <= 'Z') return _tolower(__ch);
  return __ch;
}






static __inline__ int _toupper(int __ch) {


  return __ch ^ 0x20;
}


static __inline__ int toupper(int __ch) {
  if (__ch >= 'a' && __ch <= 'z') return _toupper(__ch);
  return __ch;
}


static __inline__ int isascii(int __ch) {
  return (static_cast<unsigned>(__ch)) < 0x80;
}


static __inline__ int toascii(int __ch) {
  return __ch & 0x7f;
}


static __inline__ int isalnum_l(int __ch, locale_t __l) {
  return isalnum(__ch);
}


static __inline__ int isalpha_l(int __ch, locale_t __l) {
  return isalpha(__ch);
}


static __inline__ int isblank_l(int __ch, locale_t __l) {
  return isblank(__ch);
}


static __inline__ int iscntrl_l(int __ch, locale_t __l) {
  return iscntrl(__ch);
}


static __inline__ int isdigit_l(int __ch, locale_t __l) {
  return isdigit(__ch);
}


static __inline__ int isgraph_l(int __ch, locale_t __l) {
  return isgraph(__ch);
}


static __inline__ int islower_l(int __ch, locale_t __l) {
  return islower(__ch);
}


static __inline__ int isprint_l(int __ch, locale_t __l) {
  return isprint(__ch);
}


static __inline__ int ispunct_l(int __ch, locale_t __l) {
  return ispunct(__ch);
}


static __inline__ int isspace_l(int __ch, locale_t __l) {
  return isspace(__ch);
}


static __inline__ int isupper_l(int __ch, locale_t __l) {
  return isupper(__ch);
}


static __inline__ int isxdigit_l(int __ch, locale_t __l) {
  return isxdigit(__ch);
}


static __inline__ int tolower_l(int __ch, locale_t __l) {
  return tolower(__ch);
}


static __inline__ int toupper_l(int __ch, locale_t __l) {
  return toupper(__ch);
}

}
# 40 "/data/data/com.termux/files/usr/include/c++/v1/ctype.h" 2 3
# 59 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h" 2
# 97 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
# 1 "/data/data/com.termux/files/usr/include/c++/v1/wchar.h" 1 3
# 98 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h" 2




typedef uint32_t Py_UCS4;
typedef uint16_t Py_UCS2;
typedef uint8_t Py_UCS1;


extern "C" {



extern __attribute__ ((visibility ("default"))) PyTypeObject PyUnicode_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyUnicodeIter_Type;
# 130 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_FromStringAndSize(
    const char *u,
    Py_ssize_t size
    );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_FromString(
    const char *u
    );


__attribute__ ((visibility ("default"))) PyObject* PyUnicode_Substring(
    PyObject *str,
    Py_ssize_t start,
    Py_ssize_t end);
# 154 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) Py_UCS4* PyUnicode_AsUCS4(
    PyObject *unicode,
    Py_UCS4* buffer,
    Py_ssize_t buflen,
    int copy_null);




__attribute__ ((visibility ("default"))) Py_UCS4* PyUnicode_AsUCS4Copy(PyObject *unicode);





__attribute__ ((visibility ("default"))) Py_ssize_t PyUnicode_GetLength(
    PyObject *unicode
);





__attribute__ ((visibility ("default"))) Py_UCS4 PyUnicode_ReadChar(
    PyObject *unicode,
    Py_ssize_t index
    );






__attribute__ ((visibility ("default"))) int PyUnicode_WriteChar(
    PyObject *unicode,
    Py_ssize_t index,
    Py_UCS4 character
    );
# 208 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) int PyUnicode_Resize(
    PyObject **unicode,
    Py_ssize_t length
    );
# 226 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_FromEncodedObject(
    PyObject *obj,
    const char *encoding,
    const char *errors
    );
# 241 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_FromObject(
    PyObject *obj
    );

__attribute__ ((visibility ("default"))) PyObject * PyUnicode_FromFormatV(
    const char *format,
    va_list vargs
    );
__attribute__ ((visibility ("default"))) PyObject * PyUnicode_FromFormat(
    const char *format,
    ...
    );

__attribute__ ((visibility ("default"))) void PyUnicode_InternInPlace(PyObject **);
__attribute__ ((visibility ("default"))) PyObject * PyUnicode_InternFromString(
    const char *u
    );
# 268 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_FromWideChar(
    const wchar_t *w,
    Py_ssize_t size
    );
# 285 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) Py_ssize_t PyUnicode_AsWideChar(
    PyObject *unicode,
    wchar_t *w,
    Py_ssize_t size
    );
# 299 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) wchar_t* PyUnicode_AsWideCharString(
    PyObject *unicode,
    Py_ssize_t *size
    );
# 315 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_FromOrdinal(int ordinal);
# 338 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) const char* PyUnicode_GetDefaultEncoding(void);






__attribute__ ((visibility ("default"))) PyObject* PyUnicode_Decode(
    const char *s,
    Py_ssize_t size,
    const char *encoding,
    const char *errors
    );
# 359 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsDecodedObject(
    PyObject *unicode,
    const char *encoding,
    const char *errors
    );
# 372 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsDecodedUnicode(
    PyObject *unicode,
    const char *encoding,
    const char *errors
    );
# 386 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsEncodedObject(
    PyObject *unicode,
    const char *encoding,
    const char *errors
    );




__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsEncodedString(
    PyObject *unicode,
    const char *encoding,
    const char *errors
    );
# 408 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsEncodedUnicode(
    PyObject *unicode,
    const char *encoding,
    const char *errors
    );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_BuildEncodingMap(
    PyObject* string
   );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUTF7(
    const char *string,
    Py_ssize_t length,
    const char *errors
    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUTF7Stateful(
    const char *string,
    Py_ssize_t length,
    const char *errors,
    Py_ssize_t *consumed
    );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUTF8(
    const char *string,
    Py_ssize_t length,
    const char *errors
    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUTF8Stateful(
    const char *string,
    Py_ssize_t length,
    const char *errors,
    Py_ssize_t *consumed
    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsUTF8String(
    PyObject *unicode
    );
# 466 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) const char * PyUnicode_AsUTF8AndSize(
    PyObject *unicode,
    Py_ssize_t *size);
# 496 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUTF32(
    const char *string,
    Py_ssize_t length,
    const char *errors,
    int *byteorder


    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUTF32Stateful(
    const char *string,
    Py_ssize_t length,
    const char *errors,
    int *byteorder,


    Py_ssize_t *consumed
    );




__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsUTF32String(
    PyObject *unicode
    );
# 563 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUTF16(
    const char *string,
    Py_ssize_t length,
    const char *errors,
    int *byteorder


    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUTF16Stateful(
    const char *string,
    Py_ssize_t length,
    const char *errors,
    int *byteorder,


    Py_ssize_t *consumed
    );




__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsUTF16String(
    PyObject *unicode
    );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeUnicodeEscape(
    const char *string,
    Py_ssize_t length,
    const char *errors
    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsUnicodeEscapeString(
    PyObject *unicode
    );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeRawUnicodeEscape(
    const char *string,
    Py_ssize_t length,
    const char *errors
    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsRawUnicodeEscapeString(
    PyObject *unicode
    );





__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeLatin1(
    const char *string,
    Py_ssize_t length,
    const char *errors
    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsLatin1String(
    PyObject *unicode
    );







__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeASCII(
    const char *string,
    Py_ssize_t length,
    const char *errors
    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsASCIIString(
    PyObject *unicode
    );
# 660 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeCharmap(
    const char *string,
    Py_ssize_t length,
    PyObject *mapping,
    const char *errors
    );

__attribute__ ((visibility ("default"))) PyObject* PyUnicode_AsCharmapString(
    PyObject *unicode,
    PyObject *mapping
    );
# 723 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeLocaleAndSize(
    const char *str,
    Py_ssize_t len,
    const char *errors);




__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeLocale(
    const char *str,
    const char *errors);






__attribute__ ((visibility ("default"))) PyObject* PyUnicode_EncodeLocale(
    PyObject *unicode,
    const char *errors
    );







__attribute__ ((visibility ("default"))) int PyUnicode_FSConverter(PyObject*, void*);




__attribute__ ((visibility ("default"))) int PyUnicode_FSDecoder(PyObject*, void*);





__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeFSDefault(
    const char *s
    );


__attribute__ ((visibility ("default"))) PyObject* PyUnicode_DecodeFSDefaultAndSize(
    const char *s,
    Py_ssize_t size
    );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_EncodeFSDefault(
    PyObject *unicode
    );
# 786 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_Concat(
    PyObject *left,
    PyObject *right
    );




__attribute__ ((visibility ("default"))) void PyUnicode_Append(
    PyObject **pleft,
    PyObject *right
    );




__attribute__ ((visibility ("default"))) void PyUnicode_AppendAndDel(
    PyObject **pleft,
    PyObject *right
    );
# 818 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_Split(
    PyObject *s,
    PyObject *sep,
    Py_ssize_t maxsplit
    );






__attribute__ ((visibility ("default"))) PyObject* PyUnicode_Splitlines(
    PyObject *s,
    int keepends
    );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_Partition(
    PyObject *s,
    PyObject *sep
    );




__attribute__ ((visibility ("default"))) PyObject* PyUnicode_RPartition(
    PyObject *s,
    PyObject *sep
    );
# 862 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_RSplit(
    PyObject *s,
    PyObject *sep,
    Py_ssize_t maxsplit
    );
# 880 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject * PyUnicode_Translate(
    PyObject *str,
    PyObject *table,
    const char *errors
    );




__attribute__ ((visibility ("default"))) PyObject* PyUnicode_Join(
    PyObject *separator,
    PyObject *seq
    );




__attribute__ ((visibility ("default"))) Py_ssize_t PyUnicode_Tailmatch(
    PyObject *str,
    PyObject *substr,
    Py_ssize_t start,
    Py_ssize_t end,
    int direction
    );





__attribute__ ((visibility ("default"))) Py_ssize_t PyUnicode_Find(
    PyObject *str,
    PyObject *substr,
    Py_ssize_t start,
    Py_ssize_t end,
    int direction
    );



__attribute__ ((visibility ("default"))) Py_ssize_t PyUnicode_FindChar(
    PyObject *str,
    Py_UCS4 ch,
    Py_ssize_t start,
    Py_ssize_t end,
    int direction
    );




__attribute__ ((visibility ("default"))) Py_ssize_t PyUnicode_Count(
    PyObject *str,
    PyObject *substr,
    Py_ssize_t start,
    Py_ssize_t end
    );




__attribute__ ((visibility ("default"))) PyObject * PyUnicode_Replace(
    PyObject *str,
    PyObject *substr,
    PyObject *replstr,
    Py_ssize_t maxcount

    );





__attribute__ ((visibility ("default"))) int PyUnicode_Compare(
    PyObject *left,
    PyObject *right
    );







__attribute__ ((visibility ("default"))) int PyUnicode_CompareWithASCIIString(
    PyObject *left,
    const char *right
    );
# 980 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject * PyUnicode_RichCompare(
    PyObject *left,
    PyObject *right,
    int op
    );




__attribute__ ((visibility ("default"))) PyObject * PyUnicode_Format(
    PyObject *format,
    PyObject *args
    );







__attribute__ ((visibility ("default"))) int PyUnicode_Contains(
    PyObject *container,
    PyObject *element
    );



__attribute__ ((visibility ("default"))) int PyUnicode_IsIdentifier(PyObject *s);





# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h" 1
# 10 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
                         typedef wchar_t Py_UNICODE;




static inline int Py_UNICODE_IS_SURROGATE(Py_UCS4 ch) {
    return (0xD800 <= ch && ch <= 0xDFFF);
}
static inline int Py_UNICODE_IS_HIGH_SURROGATE(Py_UCS4 ch) {
    return (0xD800 <= ch && ch <= 0xDBFF);
}
static inline int Py_UNICODE_IS_LOW_SURROGATE(Py_UCS4 ch) {
    return (0xDC00 <= ch && ch <= 0xDFFF);
}


static inline Py_UCS4 Py_UNICODE_JOIN_SURROGATES(Py_UCS4 high, Py_UCS4 low) {
    ((Py_UNICODE_IS_HIGH_SURROGATE(high)) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 27, __PRETTY_FUNCTION__, "Py_UNICODE_IS_HIGH_SURROGATE(high)"));
    ((Py_UNICODE_IS_LOW_SURROGATE(low)) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 28, __PRETTY_FUNCTION__, "Py_UNICODE_IS_LOW_SURROGATE(low)"));
    return 0x10000 + (((high & 0x03FF) << 10) | (low & 0x03FF));
}



static inline Py_UCS4 Py_UNICODE_HIGH_SURROGATE(Py_UCS4 ch) {
    ((0x10000 <= ch && ch <= 0x10ffff) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 35, __PRETTY_FUNCTION__, "0x10000 <= ch && ch <= 0x10ffff"));
    return (0xD800 - (0x10000 >> 10) + (ch >> 10));
}



static inline Py_UCS4 Py_UNICODE_LOW_SURROGATE(Py_UCS4 ch) {
    ((0x10000 <= ch && ch <= 0x10ffff) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 42, __PRETTY_FUNCTION__, "0x10000 <= ch && ch <= 0x10ffff"));
    return (0xDC00 + (ch & 0x3FF));
}







typedef struct {
# 97 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
    PyObject ob_base;
    Py_ssize_t length;
    Py_hash_t hash;
    struct {
# 110 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
        unsigned int interned:2;
# 133 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
        unsigned int kind:3;




        unsigned int compact:1;



        unsigned int ascii:1;

        unsigned int statically_allocated:1;


        unsigned int :24;
    } state;
} PyASCIIObject;




typedef struct {
    PyASCIIObject _base;
    Py_ssize_t utf8_length;

    char *utf8;
} PyCompactUnicodeObject;


typedef struct {
    PyCompactUnicodeObject _base;
    union {
        void *any;
        Py_UCS1 *latin1;
        Py_UCS2 *ucs2;
        Py_UCS4 *ucs4;
    } data;
} PyUnicodeObject;

__attribute__ ((visibility ("default"))) int _PyUnicode_CheckConsistency(
    PyObject *op,
    int check_content);
# 199 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
static inline unsigned int PyUnicode_CHECK_INTERNED(PyObject *op) {
    return (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 200, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyASCIIObject*)((op))))->state.interned;
}



static inline unsigned int PyUnicode_IS_READY(PyObject* _unused_op __attribute__((unused))) {
    return 1;
}





static inline unsigned int PyUnicode_IS_ASCII(PyObject *op) {
    return (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 214, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyASCIIObject*)((op))))->state.ascii;
}




static inline unsigned int PyUnicode_IS_COMPACT(PyObject *op) {
    return (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 221, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyASCIIObject*)((op))))->state.compact;
}




static inline int PyUnicode_IS_COMPACT_ASCII(PyObject *op) {
    return ((((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 228, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyASCIIObject*)((op))))->state.ascii && PyUnicode_IS_COMPACT(((PyObject*)((op)))));
}


enum PyUnicode_Kind {

    PyUnicode_1BYTE_KIND = 1,
    PyUnicode_2BYTE_KIND = 2,
    PyUnicode_4BYTE_KIND = 4
};
# 248 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
static inline void* _PyUnicode_COMPACT_DATA(PyObject *op) {
    if (PyUnicode_IS_ASCII(((PyObject*)((op))))) {
        return static_cast<void*>(((((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 250, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyASCIIObject*)((op)))) + 1));
    }
    return static_cast<void*>(((((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 252, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyCompactUnicodeObject*)((op)))) + 1));
}

static inline void* _PyUnicode_NONCOMPACT_DATA(PyObject *op) {
    void *data;
    ((!PyUnicode_IS_COMPACT(((PyObject*)((op))))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 257, __PRETTY_FUNCTION__, "!PyUnicode_IS_COMPACT(op)"));
    data = (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 258, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyUnicodeObject*)((op))))->data.any;
    ((data != __null) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 259, __PRETTY_FUNCTION__, "data != NULL"));
    return data;
}

static inline void* PyUnicode_DATA(PyObject *op) {
    if (PyUnicode_IS_COMPACT(((PyObject*)((op))))) {
        return _PyUnicode_COMPACT_DATA(op);
    }
    return _PyUnicode_NONCOMPACT_DATA(op);
}
# 281 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
static inline Py_ssize_t PyUnicode_GET_LENGTH(PyObject *op) {
    return (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 282, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyASCIIObject*)((op))))->length;
}







static inline void PyUnicode_WRITE(int kind, void *data,
                                   Py_ssize_t index, Py_UCS4 value)
{
    ((index >= 0) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 294, __PRETTY_FUNCTION__, "index >= 0"));
    if (kind == PyUnicode_1BYTE_KIND) {
        ((value <= 0xffU) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 296, __PRETTY_FUNCTION__, "value <= 0xffU"));
        static_cast<Py_UCS1*>(data)[index] = static_cast<Py_UCS1>(value);
    }
    else if (kind == PyUnicode_2BYTE_KIND) {
        ((value <= 0xffffU) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 300, __PRETTY_FUNCTION__, "value <= 0xffffU"));
        static_cast<Py_UCS2*>(data)[index] = static_cast<Py_UCS2>(value);
    }
    else {
        ((kind == PyUnicode_4BYTE_KIND) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 304, __PRETTY_FUNCTION__, "kind == PyUnicode_4BYTE_KIND"));
        ((value <= 0x10ffffU) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 305, __PRETTY_FUNCTION__, "value <= 0x10ffffU"));
        static_cast<Py_UCS4*>(data)[index] = value;
    }
}






static inline Py_UCS4 PyUnicode_READ(int kind,
                                     const void *data, Py_ssize_t index)
{
    ((index >= 0) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 318, __PRETTY_FUNCTION__, "index >= 0"));
    if (kind == PyUnicode_1BYTE_KIND) {
        return static_cast<const Py_UCS1*>(data)[index];
    }
    if (kind == PyUnicode_2BYTE_KIND) {
        return static_cast<const Py_UCS2*>(data)[index];
    }
    ((kind == PyUnicode_4BYTE_KIND) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 325, __PRETTY_FUNCTION__, "kind == PyUnicode_4BYTE_KIND"));
    return static_cast<const Py_UCS4*>(data)[index];
}
# 337 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
static inline Py_UCS4 PyUnicode_READ_CHAR(PyObject *unicode, Py_ssize_t index)
{
    int kind;

    ((index >= 0) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 341, __PRETTY_FUNCTION__, "index >= 0"));

    ((index <= PyUnicode_GET_LENGTH(((PyObject*)((unicode))))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 343, __PRETTY_FUNCTION__, "index <= PyUnicode_GET_LENGTH(unicode)"));

    kind = ((void)0, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((unicode))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 345, __PRETTY_FUNCTION__, "PyUnicode_Check(unicode)")), ((PyASCIIObject*)((unicode))))->state.kind));
    if (kind == PyUnicode_1BYTE_KIND) {
        return static_cast<Py_UCS1*>(PyUnicode_DATA(((PyObject*)((unicode)))))[index];
    }
    if (kind == PyUnicode_2BYTE_KIND) {
        return static_cast<Py_UCS2*>(PyUnicode_DATA(((PyObject*)((unicode)))))[index];
    }
    ((kind == PyUnicode_4BYTE_KIND) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 352, __PRETTY_FUNCTION__, "kind == PyUnicode_4BYTE_KIND"));
    return static_cast<Py_UCS4*>(PyUnicode_DATA(((PyObject*)((unicode)))))[index];
}






static inline Py_UCS4 PyUnicode_MAX_CHAR_VALUE(PyObject *op)
{
    int kind;

    if (PyUnicode_IS_ASCII(((PyObject*)((op))))) {
        return 0x7fU;
    }

    kind = ((void)0, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 369, __PRETTY_FUNCTION__, "PyUnicode_Check(op)")), ((PyASCIIObject*)((op))))->state.kind));
    if (kind == PyUnicode_1BYTE_KIND) {
       return 0xffU;
    }
    if (kind == PyUnicode_2BYTE_KIND) {
        return 0xffffU;
    }
    ((kind == PyUnicode_4BYTE_KIND) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h", 376, __PRETTY_FUNCTION__, "kind == PyUnicode_4BYTE_KIND"));
    return 0x10ffffU;
}
# 389 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* PyUnicode_New(
    Py_ssize_t size,
    Py_UCS4 maxchar
    );


static inline int PyUnicode_READY(PyObject* _unused_op __attribute__((unused)))
{
    return 0;
}



__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_Copy(
    PyObject *unicode
    );
# 424 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) Py_ssize_t PyUnicode_CopyCharacters(
    PyObject *to,
    Py_ssize_t to_start,
    PyObject *from,
    Py_ssize_t from_start,
    Py_ssize_t how_many
    );




__attribute__ ((visibility ("default"))) void _PyUnicode_FastCopyCharacters(
    PyObject *to,
    Py_ssize_t to_start,
    PyObject *from,
    Py_ssize_t from_start,
    Py_ssize_t how_many
    );
# 451 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) Py_ssize_t PyUnicode_Fill(
    PyObject *unicode,
    Py_ssize_t start,
    Py_ssize_t length,
    Py_UCS4 fill_char
    );



__attribute__ ((visibility ("default"))) void _PyUnicode_FastFill(
    PyObject *unicode,
    Py_ssize_t start,
    Py_ssize_t length,
    Py_UCS4 fill_char
    );



__attribute__ ((visibility ("default"))) PyObject* PyUnicode_FromKindAndData(
    int kind,
    const void *buffer,
    Py_ssize_t size);



__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_FromASCII(
    const char *buffer,
    Py_ssize_t size);



__attribute__ ((visibility ("default"))) Py_UCS4 _PyUnicode_FindMaxChar (
    PyObject *unicode,
    Py_ssize_t start,
    Py_ssize_t end);



typedef struct {
    PyObject *buffer;
    void *data;
    int kind;
    Py_UCS4 maxchar;
    Py_ssize_t size;
    Py_ssize_t pos;


    Py_ssize_t min_length;


    Py_UCS4 min_char;


    unsigned char overallocate;



    unsigned char readonly;
} _PyUnicodeWriter ;






__attribute__ ((visibility ("default"))) void
_PyUnicodeWriter_Init(_PyUnicodeWriter *writer);
# 533 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) int
_PyUnicodeWriter_PrepareInternal(_PyUnicodeWriter *writer,
                                 Py_ssize_t length, Py_UCS4 maxchar);
# 549 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) int
_PyUnicodeWriter_PrepareKindInternal(_PyUnicodeWriter *writer,
                                     int kind);



__attribute__ ((visibility ("default"))) int
_PyUnicodeWriter_WriteChar(_PyUnicodeWriter *writer,
    Py_UCS4 ch
    );



__attribute__ ((visibility ("default"))) int
_PyUnicodeWriter_WriteStr(_PyUnicodeWriter *writer,
    PyObject *str
    );



__attribute__ ((visibility ("default"))) int
_PyUnicodeWriter_WriteSubstring(_PyUnicodeWriter *writer,
    PyObject *str,
    Py_ssize_t start,
    Py_ssize_t end
    );



__attribute__ ((visibility ("default"))) int
_PyUnicodeWriter_WriteASCIIString(_PyUnicodeWriter *writer,
    const char *str,
    Py_ssize_t len
    );



__attribute__ ((visibility ("default"))) int
_PyUnicodeWriter_WriteLatin1String(_PyUnicodeWriter *writer,
    const char *str,
    Py_ssize_t len
    );




__attribute__ ((visibility ("default"))) PyObject *
_PyUnicodeWriter_Finish(_PyUnicodeWriter *writer);


__attribute__ ((visibility ("default"))) void
_PyUnicodeWriter_Dealloc(_PyUnicodeWriter *writer);




__attribute__ ((visibility ("default"))) int _PyUnicode_FormatAdvancedWriter(
    _PyUnicodeWriter *writer,
    PyObject *obj,
    PyObject *format_spec,
    Py_ssize_t start,
    Py_ssize_t end);
# 627 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) const char * PyUnicode_AsUTF8(PyObject *unicode);





__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_EncodeUTF7(
    PyObject *unicode,
    int base64SetO,
    int base64WhiteSpace,
    const char *errors
    );



__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_AsUTF8String(
    PyObject *unicode,
    const char *errors);



__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_EncodeUTF32(
    PyObject *object,
    const char *errors,
    int byteorder
    );
# 670 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_EncodeUTF16(
    PyObject* unicode,
    const char *errors,
    int byteorder
    );




__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_DecodeUnicodeEscapeStateful(
        const char *string,
        Py_ssize_t length,
        const char *errors,
        Py_ssize_t *consumed
);


__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_DecodeUnicodeEscapeInternal(
        const char *string,
        Py_ssize_t length,
        const char *errors,
        Py_ssize_t *consumed,
        const char **first_invalid_escape


);




__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_DecodeRawUnicodeEscapeStateful(
        const char *string,
        Py_ssize_t length,
        const char *errors,
        Py_ssize_t *consumed
);



__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_AsLatin1String(
    PyObject* unicode,
    const char* errors);



__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_AsASCIIString(
    PyObject* unicode,
    const char* errors);
# 731 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_EncodeCharmap(
    PyObject *unicode,
    PyObject *mapping,
    const char *errors
    );
# 746 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_TransformDecimalAndSpaceToASCII(
    PyObject *unicode
    );



__attribute__ ((visibility ("default"))) PyObject * _PyUnicode_JoinArray(
    PyObject *separator,
    PyObject *const *items,
    Py_ssize_t seqlen
    );




__attribute__ ((visibility ("default"))) int _PyUnicode_EqualToASCIIId(
    PyObject *left,
    _Py_Identifier *right
    );




__attribute__ ((visibility ("default"))) int _PyUnicode_EqualToASCIIString(
    PyObject *left,
    const char *right
    );


__attribute__ ((visibility ("default"))) PyObject * _PyUnicode_XStrip(
    PyObject *self,
    int striptype,
    PyObject *sepobj
    );




__attribute__ ((visibility ("default"))) Py_ssize_t _PyUnicode_InsertThousandsGrouping(
    _PyUnicodeWriter *writer,
    Py_ssize_t n_buffer,
    PyObject *digits,
    Py_ssize_t d_pos,
    Py_ssize_t n_digits,
    Py_ssize_t min_width,
    const char *grouping,
    PyObject *thousands_sep,
    Py_UCS4 *maxchar);
# 804 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
__attribute__ ((visibility ("default"))) int _PyUnicode_IsLowercase(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsUppercase(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsTitlecase(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsXidStart(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsXidContinue(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsWhitespace(
    const Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsLinebreak(
    const Py_UCS4 ch
    );

                         __attribute__ ((visibility ("default"))) Py_UCS4 _PyUnicode_ToLowercase(
    Py_UCS4 ch
    );

                         __attribute__ ((visibility ("default"))) Py_UCS4 _PyUnicode_ToUppercase(
    Py_UCS4 ch
    );

__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) Py_UCS4 _PyUnicode_ToTitlecase(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_ToLowerFull(
    Py_UCS4 ch,
    Py_UCS4 *res
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_ToTitleFull(
    Py_UCS4 ch,
    Py_UCS4 *res
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_ToUpperFull(
    Py_UCS4 ch,
    Py_UCS4 *res
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_ToFoldedFull(
    Py_UCS4 ch,
    Py_UCS4 *res
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsCaseIgnorable(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsCased(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_ToDecimalDigit(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_ToDigit(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) double _PyUnicode_ToNumeric(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsDecimalDigit(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsDigit(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsNumeric(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsPrintable(
    Py_UCS4 ch
    );

__attribute__ ((visibility ("default"))) int _PyUnicode_IsAlpha(
    Py_UCS4 ch
    );


extern __attribute__ ((visibility ("default"))) const unsigned char _Py_ascii_whitespace[];





static inline int Py_UNICODE_ISSPACE(Py_UCS4 ch) {
    if (ch < 128) {
        return _Py_ascii_whitespace[ch];
    }
    return _PyUnicode_IsWhitespace(ch);
}
# 938 "/data/data/com.termux/files/usr/include/python3.12/cpython/unicodeobject.h"
static inline int Py_UNICODE_ISALNUM(Py_UCS4 ch) {
   return (_PyUnicode_IsAlpha(ch)
           || _PyUnicode_IsDecimalDigit(ch)
           || _PyUnicode_IsDigit(ch)
           || _PyUnicode_IsNumeric(ch));
}




__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_FormatLong(PyObject *, int, int, int);


__attribute__ ((visibility ("default"))) PyObject* _PyUnicode_FromId(_Py_Identifier*);



__attribute__ ((visibility ("default"))) int _PyUnicode_EQ(PyObject *, PyObject *);


__attribute__ ((visibility ("default"))) int _PyUnicode_Equal(PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) int _PyUnicode_WideCharString_Converter(PyObject *, void *);
__attribute__ ((visibility ("default"))) int _PyUnicode_WideCharString_Opt_Converter(PyObject *, void *);

__attribute__ ((visibility ("default"))) Py_ssize_t _PyUnicode_ScanIdentifier(PyObject *);
# 1014 "/data/data/com.termux/files/usr/include/python3.12/unicodeobject.h" 2




}
# 52 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/initconfig.h" 1




extern "C" {




typedef struct {
    enum {
        _PyStatus_TYPE_OK=0,
        _PyStatus_TYPE_ERROR=1,
        _PyStatus_TYPE_EXIT=2
    } _type;
    const char *func;
    const char *err_msg;
    int exitcode;
} PyStatus;

__attribute__ ((visibility ("default"))) PyStatus PyStatus_Ok(void);
__attribute__ ((visibility ("default"))) PyStatus PyStatus_Error(const char *err_msg);
__attribute__ ((visibility ("default"))) PyStatus PyStatus_NoMemory(void);
__attribute__ ((visibility ("default"))) PyStatus PyStatus_Exit(int exitcode);
__attribute__ ((visibility ("default"))) int PyStatus_IsError(PyStatus err);
__attribute__ ((visibility ("default"))) int PyStatus_IsExit(PyStatus err);
__attribute__ ((visibility ("default"))) int PyStatus_Exception(PyStatus err);
__attribute__ ((visibility ("default"))) PyObject * _PyErr_SetFromPyStatus(PyStatus status);



typedef struct {


    Py_ssize_t length;
    wchar_t **items;
} PyWideStringList;

__attribute__ ((visibility ("default"))) PyStatus PyWideStringList_Append(PyWideStringList *list,
    const wchar_t *item);
__attribute__ ((visibility ("default"))) PyStatus PyWideStringList_Insert(PyWideStringList *list,
    Py_ssize_t index,
    const wchar_t *item);




typedef struct PyPreConfig {
    int _config_init;



    int parse_argv;






    int isolated;




    int use_environment;



    int configure_locale;
# 82 "/data/data/com.termux/files/usr/include/python3.12/cpython/initconfig.h"
    int coerce_c_locale;







    int coerce_c_locale_warn;
# 115 "/data/data/com.termux/files/usr/include/python3.12/cpython/initconfig.h"
    int utf8_mode;





    int dev_mode;



    int allocator;
} PyPreConfig;

__attribute__ ((visibility ("default"))) void PyPreConfig_InitPythonConfig(PyPreConfig *config);
__attribute__ ((visibility ("default"))) void PyPreConfig_InitIsolatedConfig(PyPreConfig *config);





typedef struct PyConfig {
    int _config_init;

    int isolated;
    int use_environment;
    int dev_mode;
    int install_signal_handlers;
    int use_hash_seed;
    unsigned long hash_seed;
    int faulthandler;
    int tracemalloc;
    int perf_profiling;
    int import_time;
    int code_debug_ranges;
    int show_ref_count;
    int dump_refs;
    wchar_t *dump_refs_file;
    int malloc_stats;
    wchar_t *filesystem_encoding;
    wchar_t *filesystem_errors;
    wchar_t *pycache_prefix;
    int parse_argv;
    PyWideStringList orig_argv;
    PyWideStringList argv;
    PyWideStringList xoptions;
    PyWideStringList warnoptions;
    int site_import;
    int bytes_warning;
    int warn_default_encoding;
    int inspect;
    int interactive;
    int optimization_level;
    int parser_debug;
    int write_bytecode;
    int verbose;
    int quiet;
    int user_site_directory;
    int configure_c_stdio;
    int buffered_stdio;
    wchar_t *stdio_encoding;
    wchar_t *stdio_errors;



    wchar_t *check_hash_pycs_mode;
    int use_frozen_modules;
    int safe_path;
    int int_max_str_digits;


    int pathconfig_warnings;
    wchar_t *program_name;
    wchar_t *pythonpath_env;
    wchar_t *home;
    wchar_t *platlibdir;


    int module_search_paths_set;
    PyWideStringList module_search_paths;
    wchar_t *stdlib_dir;
    wchar_t *executable;
    wchar_t *base_executable;
    wchar_t *prefix;
    wchar_t *base_prefix;
    wchar_t *exec_prefix;
    wchar_t *base_exec_prefix;


    int skip_source_first_line;
    wchar_t *run_command;
    wchar_t *run_module;
    wchar_t *run_filename;





    int _install_importlib;


    int _init_main;


    int _is_python_build;
} PyConfig;

__attribute__ ((visibility ("default"))) void PyConfig_InitPythonConfig(PyConfig *config);
__attribute__ ((visibility ("default"))) void PyConfig_InitIsolatedConfig(PyConfig *config);
__attribute__ ((visibility ("default"))) void PyConfig_Clear(PyConfig *);
__attribute__ ((visibility ("default"))) PyStatus PyConfig_SetString(
    PyConfig *config,
    wchar_t **config_str,
    const wchar_t *str);
__attribute__ ((visibility ("default"))) PyStatus PyConfig_SetBytesString(
    PyConfig *config,
    wchar_t **config_str,
    const char *str);
__attribute__ ((visibility ("default"))) PyStatus PyConfig_Read(PyConfig *config);
__attribute__ ((visibility ("default"))) PyStatus PyConfig_SetBytesArgv(
    PyConfig *config,
    Py_ssize_t argc,
    char * const *argv);
__attribute__ ((visibility ("default"))) PyStatus PyConfig_SetArgv(PyConfig *config,
    Py_ssize_t argc,
    wchar_t * const *argv);
__attribute__ ((visibility ("default"))) PyStatus PyConfig_SetWideStringList(PyConfig *config,
    PyWideStringList *list,
    Py_ssize_t length, wchar_t **items);







__attribute__ ((visibility ("default"))) void Py_GetArgcArgv(int *argc, wchar_t ***argv);


}
# 53 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pystate.h" 1






extern "C" {






__attribute__ ((visibility ("default"))) PyInterpreterState * PyInterpreterState_New(void);
__attribute__ ((visibility ("default"))) void PyInterpreterState_Clear(PyInterpreterState *);
__attribute__ ((visibility ("default"))) void PyInterpreterState_Delete(PyInterpreterState *);
# 26 "/data/data/com.termux/files/usr/include/python3.12/pystate.h"
__attribute__ ((visibility ("default"))) PyInterpreterState * PyInterpreterState_Get(void);




__attribute__ ((visibility ("default"))) PyObject * PyInterpreterState_GetDict(PyInterpreterState *);




__attribute__ ((visibility ("default"))) int64_t PyInterpreterState_GetID(PyInterpreterState *);






__attribute__ ((visibility ("default"))) int PyState_AddModule(PyObject*, PyModuleDef*);
__attribute__ ((visibility ("default"))) int PyState_RemoveModule(PyModuleDef*);

__attribute__ ((visibility ("default"))) PyObject* PyState_FindModule(PyModuleDef*);

__attribute__ ((visibility ("default"))) PyThreadState * PyThreadState_New(PyInterpreterState *);
__attribute__ ((visibility ("default"))) void PyThreadState_Clear(PyThreadState *);
__attribute__ ((visibility ("default"))) void PyThreadState_Delete(PyThreadState *);
# 60 "/data/data/com.termux/files/usr/include/python3.12/pystate.h"
__attribute__ ((visibility ("default"))) PyThreadState * PyThreadState_Get(void);




__attribute__ ((visibility ("default"))) PyThreadState * PyThreadState_Swap(PyThreadState *);
__attribute__ ((visibility ("default"))) PyObject * PyThreadState_GetDict(void);
__attribute__ ((visibility ("default"))) int PyThreadState_SetAsyncExc(unsigned long, PyObject *);



__attribute__ ((visibility ("default"))) PyInterpreterState* PyThreadState_GetInterpreter(PyThreadState *tstate);
__attribute__ ((visibility ("default"))) PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate);
__attribute__ ((visibility ("default"))) uint64_t PyThreadState_GetID(PyThreadState *tstate);


typedef
    enum {PyGILState_LOCKED, PyGILState_UNLOCKED}
        PyGILState_STATE;
# 102 "/data/data/com.termux/files/usr/include/python3.12/pystate.h"
__attribute__ ((visibility ("default"))) PyGILState_STATE PyGILState_Ensure(void);
# 112 "/data/data/com.termux/files/usr/include/python3.12/pystate.h"
__attribute__ ((visibility ("default"))) void PyGILState_Release(PyGILState_STATE);







__attribute__ ((visibility ("default"))) PyThreadState * PyGILState_GetThisThreadState(void);




# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h" 1
# 34 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
__attribute__ ((visibility ("default"))) int _PyInterpreterState_HasFeature(PyInterpreterState *interp,
                                               unsigned long feature);




__attribute__ ((visibility ("default"))) int _PyInterpreterState_RequiresIDRef(PyInterpreterState *);
__attribute__ ((visibility ("default"))) void _PyInterpreterState_RequireIDRef(PyInterpreterState *, int);

__attribute__ ((visibility ("default"))) PyObject * _PyInterpreterState_GetMainModule(PyInterpreterState *);





typedef int (*Py_tracefunc)(PyObject *, PyFrameObject *, int, PyObject *);
# 67 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
typedef struct _PyCFrame {
# 79 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
    struct _PyInterpreterFrame *current_frame;
    struct _PyCFrame *previous;
} _PyCFrame;

typedef struct _err_stackitem {
# 97 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
    PyObject *exc_value;

    struct _err_stackitem *previous_item;

} _PyErr_StackItem;

typedef struct _stack_chunk {
    struct _stack_chunk *previous;
    size_t size;
    size_t top;
    PyObject * data[1];
} _PyStackChunk;

struct _py_trashcan {
    int delete_nesting;
    PyObject *delete_later;
};

struct _ts {


    PyThreadState *prev;
    PyThreadState *next;
    PyInterpreterState *interp;

    struct {




        unsigned int initialized:1;


        unsigned int bound:1;

        unsigned int unbound:1;

        unsigned int bound_gilstate:1;

        unsigned int active:1;


        unsigned int finalizing:1;
        unsigned int cleared:1;
        unsigned int finalized:1;


        unsigned int :24;
    } _status;

    int py_recursion_remaining;
    int py_recursion_limit;

    int c_recursion_remaining;
    int recursion_headroom;




    int tracing;
    int what_event;



    _PyCFrame *cframe;

    Py_tracefunc c_profilefunc;
    Py_tracefunc c_tracefunc;
    PyObject *c_profileobj;
    PyObject *c_traceobj;


    PyObject *current_exception;




    _PyErr_StackItem *exc_info;

    PyObject *dict;

    int gilstate_counter;

    PyObject *async_exc;
    unsigned long thread_id;





    unsigned long native_thread_id;

    struct _py_trashcan trash;
# 214 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
    void (*on_delete)(void *);
    void *on_delete_data;

    int coroutine_origin_tracking_depth;

    PyObject *async_gen_firstiter;
    PyObject *async_gen_finalizer;

    PyObject *context;
    uint64_t context_ver;


    uint64_t id;

    _PyStackChunk *datastack_chunk;
    PyObject **datastack_top;
    PyObject **datastack_limit;
# 245 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
    _PyErr_StackItem exc_state;


    _PyCFrame root_cframe;
};
# 282 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
__attribute__ ((visibility ("default"))) PyThreadState * _PyThreadState_Prealloc(PyInterpreterState *);



__attribute__ ((visibility ("default"))) PyThreadState * _PyThreadState_UncheckedGet(void);

__attribute__ ((visibility ("default"))) PyObject * _PyThreadState_GetDict(PyThreadState *tstate);


__attribute__ ((visibility ("default"))) void PyThreadState_EnterTracing(PyThreadState *tstate);



__attribute__ ((visibility ("default"))) void PyThreadState_LeaveTracing(PyThreadState *tstate);







__attribute__ ((visibility ("default"))) int PyGILState_Check(void);
# 312 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
__attribute__ ((visibility ("default"))) PyInterpreterState * _PyGILState_GetInterpreterStateUnsafe(void);




__attribute__ ((visibility ("default"))) PyObject * _PyThread_CurrentFrames(void);




__attribute__ ((visibility ("default"))) PyObject * _PyThread_CurrentExceptions(void);



__attribute__ ((visibility ("default"))) PyInterpreterState * PyInterpreterState_Main(void);
__attribute__ ((visibility ("default"))) PyInterpreterState * PyInterpreterState_Head(void);
__attribute__ ((visibility ("default"))) PyInterpreterState * PyInterpreterState_Next(PyInterpreterState *);
__attribute__ ((visibility ("default"))) PyThreadState * PyInterpreterState_ThreadHead(PyInterpreterState *);
__attribute__ ((visibility ("default"))) PyThreadState * PyThreadState_Next(PyThreadState *);
__attribute__ ((visibility ("default"))) void PyThreadState_DeleteCurrent(void);



typedef PyObject* (*_PyFrameEvalFunction)(PyThreadState *tstate, struct _PyInterpreterFrame *, int);

__attribute__ ((visibility ("default"))) _PyFrameEvalFunction _PyInterpreterState_GetEvalFrameFunc(
    PyInterpreterState *interp);
__attribute__ ((visibility ("default"))) void _PyInterpreterState_SetEvalFrameFunc(
    PyInterpreterState *interp,
    _PyFrameEvalFunction eval_frame);

__attribute__ ((visibility ("default"))) const PyConfig* _PyInterpreterState_GetConfig(PyInterpreterState *interp);
# 357 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
__attribute__ ((visibility ("default"))) int _PyInterpreterState_GetConfigCopy(
    struct PyConfig *config);
# 375 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
__attribute__ ((visibility ("default"))) int _PyInterpreterState_SetConfig(
    const struct PyConfig *config);



__attribute__ ((visibility ("default"))) const PyConfig* _Py_GetConfig(void);







typedef struct _xid _PyCrossInterpreterData;

typedef PyObject *(*xid_newobjectfunc)(_PyCrossInterpreterData *);
typedef void (*xid_freefunc)(void *);

struct _xid {



    void *data;






    PyObject *obj;
# 414 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
    int64_t interp;




    xid_newobjectfunc new_object;
# 429 "/data/data/com.termux/files/usr/include/python3.12/cpython/pystate.h"
    xid_freefunc free;
};

__attribute__ ((visibility ("default"))) void _PyCrossInterpreterData_Init(
        _PyCrossInterpreterData *data,
        PyInterpreterState *interp, void *shared, PyObject *obj,
        xid_newobjectfunc new_object);
__attribute__ ((visibility ("default"))) int _PyCrossInterpreterData_InitWithSize(
        _PyCrossInterpreterData *,
        PyInterpreterState *interp, const size_t, PyObject *,
        xid_newobjectfunc);
__attribute__ ((visibility ("default"))) void _PyCrossInterpreterData_Clear(
        PyInterpreterState *, _PyCrossInterpreterData *);

__attribute__ ((visibility ("default"))) int _PyObject_GetCrossInterpreterData(PyObject *, _PyCrossInterpreterData *);
__attribute__ ((visibility ("default"))) PyObject * _PyCrossInterpreterData_NewObject(_PyCrossInterpreterData *);
__attribute__ ((visibility ("default"))) int _PyCrossInterpreterData_Release(_PyCrossInterpreterData *);

__attribute__ ((visibility ("default"))) int _PyObject_CheckCrossInterpreterData(PyObject *);



typedef int (*crossinterpdatafunc)(PyThreadState *tstate, PyObject *,
                                   _PyCrossInterpreterData *);

__attribute__ ((visibility ("default"))) int _PyCrossInterpreterData_RegisterClass(PyTypeObject *, crossinterpdatafunc);
__attribute__ ((visibility ("default"))) int _PyCrossInterpreterData_UnregisterClass(PyTypeObject *);
__attribute__ ((visibility ("default"))) crossinterpdatafunc _PyCrossInterpreterData_Lookup(PyObject *);
# 126 "/data/data/com.termux/files/usr/include/python3.12/pystate.h" 2




}
# 54 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pyerrors.h" 1



extern "C" {


# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 1 3
# 8 "/data/data/com.termux/files/usr/include/python3.12/pyerrors.h" 2



__attribute__ ((visibility ("default"))) void PyErr_SetNone(PyObject *);
__attribute__ ((visibility ("default"))) void PyErr_SetObject(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) void PyErr_SetString(
    PyObject *exception,
    const char *string
    );
__attribute__ ((visibility ("default"))) PyObject * PyErr_Occurred(void);
__attribute__ ((visibility ("default"))) void PyErr_Clear(void);
__attribute__ ((visibility ("default"))) void PyErr_Fetch(PyObject **, PyObject **, PyObject **);
__attribute__ ((visibility ("default"))) void PyErr_Restore(PyObject *, PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyErr_GetRaisedException(void);
__attribute__ ((visibility ("default"))) void PyErr_SetRaisedException(PyObject *);

__attribute__ ((visibility ("default"))) PyObject* PyErr_GetHandledException(void);
__attribute__ ((visibility ("default"))) void PyErr_SetHandledException(PyObject *);


__attribute__ ((visibility ("default"))) void PyErr_GetExcInfo(PyObject **, PyObject **, PyObject **);
__attribute__ ((visibility ("default"))) void PyErr_SetExcInfo(PyObject *, PyObject *, PyObject *);







__attribute__ ((visibility ("default"))) void __attribute__((__noreturn__)) Py_FatalError(const char *message);


__attribute__ ((visibility ("default"))) int PyErr_GivenExceptionMatches(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) int PyErr_ExceptionMatches(PyObject *);
__attribute__ ((visibility ("default"))) void PyErr_NormalizeException(PyObject**, PyObject**, PyObject**);


__attribute__ ((visibility ("default"))) int PyException_SetTraceback(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyException_GetTraceback(PyObject *);


__attribute__ ((visibility ("default"))) PyObject * PyException_GetCause(PyObject *);
__attribute__ ((visibility ("default"))) void PyException_SetCause(PyObject *, PyObject *);


__attribute__ ((visibility ("default"))) PyObject * PyException_GetContext(PyObject *);
__attribute__ ((visibility ("default"))) void PyException_SetContext(PyObject *, PyObject *);


__attribute__ ((visibility ("default"))) PyObject * PyException_GetArgs(PyObject *);
__attribute__ ((visibility ("default"))) void PyException_SetArgs(PyObject *, PyObject *);
# 69 "/data/data/com.termux/files/usr/include/python3.12/pyerrors.h"
__attribute__ ((visibility ("default"))) const char * PyExceptionClass_Name(PyObject *);
# 78 "/data/data/com.termux/files/usr/include/python3.12/pyerrors.h"
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_BaseException;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_Exception;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_BaseExceptionGroup;

extern __attribute__ ((visibility ("default"))) PyObject * PyExc_StopAsyncIteration;

extern __attribute__ ((visibility ("default"))) PyObject * PyExc_StopIteration;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_GeneratorExit;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ArithmeticError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_LookupError;

extern __attribute__ ((visibility ("default"))) PyObject * PyExc_AssertionError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_AttributeError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_BufferError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_EOFError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_FloatingPointError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_OSError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ImportError;

extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ModuleNotFoundError;

extern __attribute__ ((visibility ("default"))) PyObject * PyExc_IndexError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_KeyError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_KeyboardInterrupt;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_MemoryError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_NameError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_OverflowError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_RuntimeError;

extern __attribute__ ((visibility ("default"))) PyObject * PyExc_RecursionError;

extern __attribute__ ((visibility ("default"))) PyObject * PyExc_NotImplementedError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_SyntaxError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_IndentationError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_TabError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ReferenceError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_SystemError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_SystemExit;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_TypeError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_UnboundLocalError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_UnicodeError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_UnicodeEncodeError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_UnicodeDecodeError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_UnicodeTranslateError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ValueError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ZeroDivisionError;


extern __attribute__ ((visibility ("default"))) PyObject * PyExc_BlockingIOError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_BrokenPipeError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ChildProcessError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ConnectionError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ConnectionAbortedError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ConnectionRefusedError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ConnectionResetError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_FileExistsError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_FileNotFoundError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_InterruptedError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_IsADirectoryError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_NotADirectoryError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_PermissionError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ProcessLookupError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_TimeoutError;




extern __attribute__ ((visibility ("default"))) PyObject * PyExc_EnvironmentError;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_IOError;





extern __attribute__ ((visibility ("default"))) PyObject * PyExc_Warning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_UserWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_DeprecationWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_PendingDeprecationWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_SyntaxWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_RuntimeWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_FutureWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ImportWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_UnicodeWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_BytesWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_EncodingWarning;
extern __attribute__ ((visibility ("default"))) PyObject * PyExc_ResourceWarning;




__attribute__ ((visibility ("default"))) int PyErr_BadArgument(void);
__attribute__ ((visibility ("default"))) PyObject * PyErr_NoMemory(void);
__attribute__ ((visibility ("default"))) PyObject * PyErr_SetFromErrno(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyErr_SetFromErrnoWithFilenameObject(
    PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyErr_SetFromErrnoWithFilenameObjects(
    PyObject *, PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyErr_SetFromErrnoWithFilename(
    PyObject *exc,
    const char *filename
    );

__attribute__ ((visibility ("default"))) PyObject * PyErr_Format(
    PyObject *exception,
    const char *format,
    ...
    );

__attribute__ ((visibility ("default"))) PyObject * PyErr_FormatV(
    PyObject *exception,
    const char *format,
    va_list vargs);
# 215 "/data/data/com.termux/files/usr/include/python3.12/pyerrors.h"
__attribute__ ((visibility ("default"))) PyObject * PyErr_SetImportErrorSubclass(PyObject *, PyObject *,
    PyObject *, PyObject *);


__attribute__ ((visibility ("default"))) PyObject * PyErr_SetImportError(PyObject *, PyObject *,
    PyObject *);



__attribute__ ((visibility ("default"))) void PyErr_BadInternalCall(void);
__attribute__ ((visibility ("default"))) void _PyErr_BadInternalCall(const char *filename, int lineno);





__attribute__ ((visibility ("default"))) PyObject * PyErr_NewException(
    const char *name, PyObject *base, PyObject *dict);
__attribute__ ((visibility ("default"))) PyObject * PyErr_NewExceptionWithDoc(
    const char *name, const char *doc, PyObject *base, PyObject *dict);
__attribute__ ((visibility ("default"))) void PyErr_WriteUnraisable(PyObject *);



__attribute__ ((visibility ("default"))) int PyErr_CheckSignals(void);
__attribute__ ((visibility ("default"))) void PyErr_SetInterrupt(void);

__attribute__ ((visibility ("default"))) int PyErr_SetInterruptEx(int signum);



__attribute__ ((visibility ("default"))) void PyErr_SyntaxLocation(
    const char *filename,
    int lineno);
__attribute__ ((visibility ("default"))) void PyErr_SyntaxLocationEx(
    const char *filename,
    int lineno,
    int col_offset);
__attribute__ ((visibility ("default"))) PyObject * PyErr_ProgramText(
    const char *filename,
    int lineno);





__attribute__ ((visibility ("default"))) PyObject * PyUnicodeDecodeError_Create(
    const char *encoding,
    const char *object,
    Py_ssize_t length,
    Py_ssize_t start,
    Py_ssize_t end,
    const char *reason
    );


__attribute__ ((visibility ("default"))) PyObject * PyUnicodeEncodeError_GetEncoding(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyUnicodeDecodeError_GetEncoding(PyObject *);


__attribute__ ((visibility ("default"))) PyObject * PyUnicodeEncodeError_GetObject(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyUnicodeDecodeError_GetObject(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyUnicodeTranslateError_GetObject(PyObject *);



__attribute__ ((visibility ("default"))) int PyUnicodeEncodeError_GetStart(PyObject *, Py_ssize_t *);
__attribute__ ((visibility ("default"))) int PyUnicodeDecodeError_GetStart(PyObject *, Py_ssize_t *);
__attribute__ ((visibility ("default"))) int PyUnicodeTranslateError_GetStart(PyObject *, Py_ssize_t *);



__attribute__ ((visibility ("default"))) int PyUnicodeEncodeError_SetStart(PyObject *, Py_ssize_t);
__attribute__ ((visibility ("default"))) int PyUnicodeDecodeError_SetStart(PyObject *, Py_ssize_t);
__attribute__ ((visibility ("default"))) int PyUnicodeTranslateError_SetStart(PyObject *, Py_ssize_t);



__attribute__ ((visibility ("default"))) int PyUnicodeEncodeError_GetEnd(PyObject *, Py_ssize_t *);
__attribute__ ((visibility ("default"))) int PyUnicodeDecodeError_GetEnd(PyObject *, Py_ssize_t *);
__attribute__ ((visibility ("default"))) int PyUnicodeTranslateError_GetEnd(PyObject *, Py_ssize_t *);



__attribute__ ((visibility ("default"))) int PyUnicodeEncodeError_SetEnd(PyObject *, Py_ssize_t);
__attribute__ ((visibility ("default"))) int PyUnicodeDecodeError_SetEnd(PyObject *, Py_ssize_t);
__attribute__ ((visibility ("default"))) int PyUnicodeTranslateError_SetEnd(PyObject *, Py_ssize_t);


__attribute__ ((visibility ("default"))) PyObject * PyUnicodeEncodeError_GetReason(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyUnicodeDecodeError_GetReason(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyUnicodeTranslateError_GetReason(PyObject *);



__attribute__ ((visibility ("default"))) int PyUnicodeEncodeError_SetReason(
    PyObject *exc,
    const char *reason
    );
__attribute__ ((visibility ("default"))) int PyUnicodeDecodeError_SetReason(
    PyObject *exc,
    const char *reason
    );
__attribute__ ((visibility ("default"))) int PyUnicodeTranslateError_SetReason(
    PyObject *exc,
    const char *reason
    );

__attribute__ ((visibility ("default"))) int PyOS_snprintf(char *str, size_t size, const char *format, ...)
                        __attribute__((format(printf, 3, 4)));
__attribute__ ((visibility ("default"))) int PyOS_vsnprintf(char *str, size_t size, const char *format, va_list va)
                        __attribute__((format(printf, 3, 0)));



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pyerrors.h" 1
# 13 "/data/data/com.termux/files/usr/include/python3.12/cpython/pyerrors.h"
typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
} PyBaseExceptionObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *msg;
    PyObject *excs;
} PyBaseExceptionGroupObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *msg;
    PyObject *filename;
    PyObject *lineno;
    PyObject *offset;
    PyObject *end_lineno;
    PyObject *end_offset;
    PyObject *text;
    PyObject *print_file_and_line;
} PySyntaxErrorObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *msg;
    PyObject *name;
    PyObject *path;
    PyObject *name_from;
} PyImportErrorObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *encoding;
    PyObject *object;
    Py_ssize_t start;
    Py_ssize_t end;
    PyObject *reason;
} PyUnicodeErrorObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *code;
} PySystemExitObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *myerrno;
    PyObject *strerror;
    PyObject *filename;
    PyObject *filename2;



    Py_ssize_t written;
} PyOSErrorObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *value;
} PyStopIterationObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *name;
} PyNameErrorObject;

typedef struct {
    PyObject ob_base; PyObject *dict; PyObject *args; PyObject *notes; PyObject *traceback; PyObject *context; PyObject *cause; char suppress_context;
    PyObject *obj;
    PyObject *name;
} PyAttributeErrorObject;


typedef PyOSErrorObject PyEnvironmentErrorObject;






__attribute__ ((visibility ("default"))) void _PyErr_SetKeyError(PyObject *);
__attribute__ ((visibility ("default"))) _PyErr_StackItem* _PyErr_GetTopmostException(PyThreadState *tstate);
__attribute__ ((visibility ("default"))) PyObject* _PyErr_GetHandledException(PyThreadState *);
__attribute__ ((visibility ("default"))) void _PyErr_SetHandledException(PyThreadState *, PyObject *);
__attribute__ ((visibility ("default"))) void _PyErr_GetExcInfo(PyThreadState *, PyObject **, PyObject **, PyObject **);



__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void _PyErr_ChainExceptions(PyObject *, PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) void _PyErr_ChainExceptions1(PyObject *);




__attribute__ ((visibility ("default"))) PyObject * _PyErr_FormatFromCause(
    PyObject *exception,
    const char *format,
    ...
    );



__attribute__ ((visibility ("default"))) int _PyException_AddNote(
     PyObject *exc,
     PyObject *note);

__attribute__ ((visibility ("default"))) PyObject* PyUnstable_Exc_PrepReraiseStar(
     PyObject *orig,
     PyObject *excs);



int PySignal_SetWakeupFd(int fd);
__attribute__ ((visibility ("default"))) int _PyErr_CheckSignals(void);



__attribute__ ((visibility ("default"))) void PyErr_SyntaxLocationObject(
    PyObject *filename,
    int lineno,
    int col_offset);

__attribute__ ((visibility ("default"))) void PyErr_RangedSyntaxLocationObject(
    PyObject *filename,
    int lineno,
    int col_offset,
    int end_lineno,
    int end_col_offset);

__attribute__ ((visibility ("default"))) PyObject * PyErr_ProgramTextObject(
    PyObject *filename,
    int lineno);

__attribute__ ((visibility ("default"))) PyObject * _PyErr_ProgramDecodedTextObject(
    PyObject *filename,
    int lineno,
    const char* encoding);

__attribute__ ((visibility ("default"))) PyObject * _PyUnicodeTranslateError_Create(
    PyObject *object,
    Py_ssize_t start,
    Py_ssize_t end,
    const char *reason
    );

__attribute__ ((visibility ("default"))) void _PyErr_WriteUnraisableMsg(
    const char *err_msg,
    PyObject *obj);

__attribute__ ((visibility ("default"))) void __attribute__((__noreturn__)) _Py_FatalErrorFunc(
    const char *func,
    const char *message);

__attribute__ ((visibility ("default"))) void __attribute__((__noreturn__)) _Py_FatalErrorFormat(
    const char *func,
    const char *format,
    ...);

extern PyObject *_PyErr_SetImportErrorWithNameFrom(
        PyObject *,
        PyObject *,
        PyObject *,
        PyObject *);
# 331 "/data/data/com.termux/files/usr/include/python3.12/pyerrors.h" 2




}
# 55 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/longobject.h" 1



extern "C" {
# 16 "/data/data/com.termux/files/usr/include/python3.12/longobject.h"
__attribute__ ((visibility ("default"))) PyObject * PyLong_FromLong(long);
__attribute__ ((visibility ("default"))) PyObject * PyLong_FromUnsignedLong(unsigned long);
__attribute__ ((visibility ("default"))) PyObject * PyLong_FromSize_t(size_t);
__attribute__ ((visibility ("default"))) PyObject * PyLong_FromSsize_t(Py_ssize_t);
__attribute__ ((visibility ("default"))) PyObject * PyLong_FromDouble(double);
__attribute__ ((visibility ("default"))) long PyLong_AsLong(PyObject *);
__attribute__ ((visibility ("default"))) long PyLong_AsLongAndOverflow(PyObject *, int *);
__attribute__ ((visibility ("default"))) Py_ssize_t PyLong_AsSsize_t(PyObject *);
__attribute__ ((visibility ("default"))) size_t PyLong_AsSize_t(PyObject *);
__attribute__ ((visibility ("default"))) unsigned long PyLong_AsUnsignedLong(PyObject *);
__attribute__ ((visibility ("default"))) unsigned long PyLong_AsUnsignedLongMask(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyLong_GetInfo(void);
# 80 "/data/data/com.termux/files/usr/include/python3.12/longobject.h"
__attribute__ ((visibility ("default"))) double PyLong_AsDouble(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyLong_FromVoidPtr(void *);
__attribute__ ((visibility ("default"))) void * PyLong_AsVoidPtr(PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyLong_FromLongLong(long long);
__attribute__ ((visibility ("default"))) PyObject * PyLong_FromUnsignedLongLong(unsigned long long);
__attribute__ ((visibility ("default"))) long long PyLong_AsLongLong(PyObject *);
__attribute__ ((visibility ("default"))) unsigned long long PyLong_AsUnsignedLongLong(PyObject *);
__attribute__ ((visibility ("default"))) unsigned long long PyLong_AsUnsignedLongLongMask(PyObject *);
__attribute__ ((visibility ("default"))) long long PyLong_AsLongLongAndOverflow(PyObject *, int *);

__attribute__ ((visibility ("default"))) PyObject * PyLong_FromString(const char *, char **, int);




__attribute__ ((visibility ("default"))) unsigned long PyOS_strtoul(const char *, char **, int);
__attribute__ ((visibility ("default"))) long PyOS_strtol(const char *, char **, int);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/longobject.h" 1




__attribute__ ((visibility ("default"))) int _PyLong_AsInt(PyObject *);

__attribute__ ((visibility ("default"))) int _PyLong_UnsignedShort_Converter(PyObject *, void *);
__attribute__ ((visibility ("default"))) int _PyLong_UnsignedInt_Converter(PyObject *, void *);
__attribute__ ((visibility ("default"))) int _PyLong_UnsignedLong_Converter(PyObject *, void *);
__attribute__ ((visibility ("default"))) int _PyLong_UnsignedLongLong_Converter(PyObject *, void *);
__attribute__ ((visibility ("default"))) int _PyLong_Size_t_Converter(PyObject *, void *);







__attribute__ ((visibility ("default"))) double _PyLong_Frexp(PyLongObject *a, Py_ssize_t *e);

__attribute__ ((visibility ("default"))) PyObject * PyLong_FromUnicodeObject(PyObject *u, int base);
__attribute__ ((visibility ("default"))) PyObject * _PyLong_FromBytes(const char *, Py_ssize_t, int);





__attribute__ ((visibility ("default"))) int _PyLong_Sign(PyObject *v);
# 37 "/data/data/com.termux/files/usr/include/python3.12/cpython/longobject.h"
__attribute__ ((visibility ("default"))) size_t _PyLong_NumBits(PyObject *v);







__attribute__ ((visibility ("default"))) PyObject * _PyLong_DivmodNear(PyObject *, PyObject *);
# 60 "/data/data/com.termux/files/usr/include/python3.12/cpython/longobject.h"
__attribute__ ((visibility ("default"))) PyObject * _PyLong_FromByteArray(
    const unsigned char* bytes, size_t n,
    int little_endian, int is_signed);
# 83 "/data/data/com.termux/files/usr/include/python3.12/cpython/longobject.h"
__attribute__ ((visibility ("default"))) int _PyLong_AsByteArray(PyLongObject* v,
    unsigned char* bytes, size_t n,
    int little_endian, int is_signed);



__attribute__ ((visibility ("default"))) PyObject * _PyLong_Format(PyObject *obj, int base);


__attribute__ ((visibility ("default"))) PyObject * _PyLong_GCD(PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) PyObject * _PyLong_Rshift(PyObject *, size_t);
__attribute__ ((visibility ("default"))) PyObject * _PyLong_Lshift(PyObject *, size_t);


__attribute__ ((visibility ("default"))) int PyUnstable_Long_IsCompact(const PyLongObject* op);
__attribute__ ((visibility ("default"))) Py_ssize_t PyUnstable_Long_CompactValue(const PyLongObject* op);
# 102 "/data/data/com.termux/files/usr/include/python3.12/longobject.h" 2




}
# 56 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/longintrepr.h" 1




extern "C" {
# 43 "/data/data/com.termux/files/usr/include/python3.12/cpython/longintrepr.h"
typedef uint32_t digit;
typedef int32_t sdigit;
typedef uint64_t twodigits;
typedef int64_t stwodigits;
# 82 "/data/data/com.termux/files/usr/include/python3.12/cpython/longintrepr.h"
typedef struct _PyLongValue {
    uintptr_t lv_tag;
    digit ob_digit[1];
} _PyLongValue;

struct _longobject {
    PyObject ob_base;
    _PyLongValue long_value;
};

__attribute__ ((visibility ("default"))) PyLongObject * _PyLong_New(Py_ssize_t);


__attribute__ ((visibility ("default"))) PyObject * _PyLong_Copy(PyLongObject *src);

__attribute__ ((visibility ("default"))) PyLongObject *
_PyLong_FromDigits(int negative, Py_ssize_t digit_count, digit *digits);
# 108 "/data/data/com.termux/files/usr/include/python3.12/cpython/longintrepr.h"
static inline int
_PyLong_IsCompact(const PyLongObject* op) {
    ((PyType_HasFeature((op)->ob_base.ob_type, (1UL << 24))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/longintrepr.h", 110, __PRETTY_FUNCTION__, "PyType_HasFeature((op)->ob_base.ob_type, Py_TPFLAGS_LONG_SUBCLASS)"));
    return op->long_value.lv_tag < (2 << 3);
}



static inline Py_ssize_t
_PyLong_CompactValue(const PyLongObject *op)
{
    Py_ssize_t sign;
    ((PyType_HasFeature((op)->ob_base.ob_type, (1UL << 24))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/longintrepr.h", 120, __PRETTY_FUNCTION__, "PyType_HasFeature((op)->ob_base.ob_type, Py_TPFLAGS_LONG_SUBCLASS)"));
    ((_PyLong_IsCompact(op)) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/longintrepr.h", 121, __PRETTY_FUNCTION__, "PyUnstable_Long_IsCompact(op)"));
    sign = 1 - (op->long_value.lv_tag & 3);
    return sign * (Py_ssize_t)op->long_value.ob_digit[0];
}





}
# 57 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/boolobject.h" 1





extern "C" {
# 17 "/data/data/com.termux/files/usr/include/python3.12/boolobject.h"
extern __attribute__ ((visibility ("default"))) PyLongObject _Py_FalseStruct;
extern __attribute__ ((visibility ("default"))) PyLongObject _Py_TrueStruct;






__attribute__ ((visibility ("default"))) int Py_IsTrue(PyObject *x);



__attribute__ ((visibility ("default"))) int Py_IsFalse(PyObject *x);







__attribute__ ((visibility ("default"))) PyObject * PyBool_FromLong(long);


}
# 58 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/floatobject.h" 1
# 11 "/data/data/com.termux/files/usr/include/python3.12/floatobject.h"
extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PyFloat_Type;
# 31 "/data/data/com.termux/files/usr/include/python3.12/floatobject.h"
__attribute__ ((visibility ("default"))) double PyFloat_GetMax(void);
__attribute__ ((visibility ("default"))) double PyFloat_GetMin(void);
__attribute__ ((visibility ("default"))) PyObject* PyFloat_GetInfo(void);


__attribute__ ((visibility ("default"))) PyObject* PyFloat_FromString(PyObject*);


__attribute__ ((visibility ("default"))) PyObject* PyFloat_FromDouble(double);



__attribute__ ((visibility ("default"))) double PyFloat_AsDouble(PyObject*);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/floatobject.h" 1




typedef struct {
    PyObject ob_base;
    double ob_fval;
} PyFloatObject;






static inline double PyFloat_AS_DOUBLE(PyObject *op) {
    return (((PyObject_TypeCheck(((PyObject*)((op))), (&PyFloat_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/floatobject.h", 16, __PRETTY_FUNCTION__, "PyFloat_Check(op)")), ((PyFloatObject*)(op)))->ob_fval;
}



__attribute__ ((visibility ("default"))) int PyFloat_Pack2(double x, char *p, int le);
__attribute__ ((visibility ("default"))) int PyFloat_Pack4(double x, char *p, int le);
__attribute__ ((visibility ("default"))) int PyFloat_Pack8(double x, char *p, int le);

__attribute__ ((visibility ("default"))) double PyFloat_Unpack2(const char *p, int le);
__attribute__ ((visibility ("default"))) double PyFloat_Unpack4(const char *p, int le);
__attribute__ ((visibility ("default"))) double PyFloat_Unpack8(const char *p, int le);
# 48 "/data/data/com.termux/files/usr/include/python3.12/floatobject.h" 2




}
# 59 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/complexobject.h" 1





extern "C" {




extern __attribute__ ((visibility ("default"))) PyTypeObject PyComplex_Type;




__attribute__ ((visibility ("default"))) PyObject * PyComplex_FromDoubles(double real, double imag);

__attribute__ ((visibility ("default"))) double PyComplex_RealAsDouble(PyObject *op);
__attribute__ ((visibility ("default"))) double PyComplex_ImagAsDouble(PyObject *op);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/complexobject.h" 1




typedef struct {
    double real;
    double imag;
} Py_complex;



__attribute__ ((visibility ("default"))) Py_complex _Py_c_sum(Py_complex, Py_complex);
__attribute__ ((visibility ("default"))) Py_complex _Py_c_diff(Py_complex, Py_complex);
__attribute__ ((visibility ("default"))) Py_complex _Py_c_neg(Py_complex);
__attribute__ ((visibility ("default"))) Py_complex _Py_c_prod(Py_complex, Py_complex);
__attribute__ ((visibility ("default"))) Py_complex _Py_c_quot(Py_complex, Py_complex);
__attribute__ ((visibility ("default"))) Py_complex _Py_c_pow(Py_complex, Py_complex);
__attribute__ ((visibility ("default"))) double _Py_c_abs(Py_complex);







typedef struct {
    PyObject ob_base;
    Py_complex cval;
} PyComplexObject;

__attribute__ ((visibility ("default"))) PyObject * PyComplex_FromCComplex(Py_complex);

__attribute__ ((visibility ("default"))) Py_complex PyComplex_AsCComplex(PyObject *op);
# 24 "/data/data/com.termux/files/usr/include/python3.12/complexobject.h" 2




}
# 60 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/rangeobject.h" 1






extern "C" {
# 18 "/data/data/com.termux/files/usr/include/python3.12/rangeobject.h"
extern __attribute__ ((visibility ("default"))) PyTypeObject PyRange_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyRangeIter_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyLongRangeIter_Type;




}
# 61 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/memoryobject.h" 1





extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PyMemoryView_Type;



__attribute__ ((visibility ("default"))) PyObject * PyMemoryView_FromObject(PyObject *base);

__attribute__ ((visibility ("default"))) PyObject * PyMemoryView_FromMemory(char *mem, Py_ssize_t size,
                                               int flags);


__attribute__ ((visibility ("default"))) PyObject * PyMemoryView_FromBuffer(const Py_buffer *info);

__attribute__ ((visibility ("default"))) PyObject * PyMemoryView_GetContiguous(PyObject *base,
                                                  int buffertype,
                                                  char order);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/memoryobject.h" 1




extern __attribute__ ((visibility ("default"))) PyTypeObject _PyManagedBuffer_Type;







typedef struct {
    PyObject ob_base;
    int flags;
    Py_ssize_t exports;
    Py_buffer master;
} _PyManagedBufferObject;
# 29 "/data/data/com.termux/files/usr/include/python3.12/cpython/memoryobject.h"
typedef struct {
    PyVarObject ob_base;
    _PyManagedBufferObject *mbuf;
    Py_hash_t hash;
    int flags;
    Py_ssize_t exports;
    Py_buffer view;
    PyObject *weakreflist;
    Py_ssize_t ob_array[1];
} PyMemoryViewObject;




static inline Py_buffer* PyMemoryView_GET_BUFFER(PyObject *op) {
    return (&((PyMemoryViewObject*)(op))->view);
}



static inline PyObject* PyMemoryView_GET_BASE(PyObject *op) {
    return ((PyMemoryViewObject*)(op))->view.obj;
}
# 28 "/data/data/com.termux/files/usr/include/python3.12/memoryobject.h" 2




}
# 62 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/tupleobject.h" 1





extern "C" {
# 23 "/data/data/com.termux/files/usr/include/python3.12/tupleobject.h"
extern __attribute__ ((visibility ("default"))) PyTypeObject PyTuple_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyTupleIter_Type;





__attribute__ ((visibility ("default"))) PyObject * PyTuple_New(Py_ssize_t size);
__attribute__ ((visibility ("default"))) Py_ssize_t PyTuple_Size(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyTuple_GetItem(PyObject *, Py_ssize_t);
__attribute__ ((visibility ("default"))) int PyTuple_SetItem(PyObject *, Py_ssize_t, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyTuple_GetSlice(PyObject *, Py_ssize_t, Py_ssize_t);
__attribute__ ((visibility ("default"))) PyObject * PyTuple_Pack(Py_ssize_t, ...);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/tupleobject.h" 1




typedef struct {
    PyVarObject ob_base;



    PyObject *ob_item[1];
} PyTupleObject;

__attribute__ ((visibility ("default"))) int _PyTuple_Resize(PyObject **, Py_ssize_t);
__attribute__ ((visibility ("default"))) void _PyTuple_MaybeUntrack(PyObject *);







static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {
    PyTupleObject *tuple = (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/tupleobject.h", 23, __PRETTY_FUNCTION__, "PyTuple_Check(op)")), ((PyTupleObject*)((op))));
    return Py_SIZE(((PyObject*)((tuple))));
}





static inline void
PyTuple_SET_ITEM(PyObject *op, Py_ssize_t index, PyObject *value) {
    PyTupleObject *tuple = (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/tupleobject.h", 33, __PRETTY_FUNCTION__, "PyTuple_Check(op)")), ((PyTupleObject*)((op))));
    tuple->ob_item[index] = value;
}



__attribute__ ((visibility ("default"))) void _PyTuple_DebugMallocStats(FILE *out);
# 40 "/data/data/com.termux/files/usr/include/python3.12/tupleobject.h" 2




}
# 63 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/listobject.h" 1
# 17 "/data/data/com.termux/files/usr/include/python3.12/listobject.h"
extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PyList_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyListIter_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyListRevIter_Type;





__attribute__ ((visibility ("default"))) PyObject * PyList_New(Py_ssize_t size);
__attribute__ ((visibility ("default"))) Py_ssize_t PyList_Size(PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyList_GetItem(PyObject *, Py_ssize_t);
__attribute__ ((visibility ("default"))) int PyList_SetItem(PyObject *, Py_ssize_t, PyObject *);
__attribute__ ((visibility ("default"))) int PyList_Insert(PyObject *, Py_ssize_t, PyObject *);
__attribute__ ((visibility ("default"))) int PyList_Append(PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyList_GetSlice(PyObject *, Py_ssize_t, Py_ssize_t);
__attribute__ ((visibility ("default"))) int PyList_SetSlice(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);

__attribute__ ((visibility ("default"))) int PyList_Sort(PyObject *);
__attribute__ ((visibility ("default"))) int PyList_Reverse(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyList_AsTuple(PyObject *);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/listobject.h" 1




typedef struct {
    PyVarObject ob_base;

    PyObject **ob_item;
# 21 "/data/data/com.termux/files/usr/include/python3.12/cpython/listobject.h"
    Py_ssize_t allocated;
} PyListObject;

__attribute__ ((visibility ("default"))) PyObject * _PyList_Extend(PyListObject *, PyObject *);
__attribute__ ((visibility ("default"))) void _PyList_DebugMallocStats(FILE *out);







static inline Py_ssize_t PyList_GET_SIZE(PyObject *op) {
    PyListObject *list = (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/listobject.h", 34, __PRETTY_FUNCTION__, "PyList_Check(op)")), ((PyListObject*)((op))));
    return Py_SIZE(((PyObject*)((list))));
}




static inline void
PyList_SET_ITEM(PyObject *op, Py_ssize_t index, PyObject *value) {
    PyListObject *list = (((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/listobject.h", 43, __PRETTY_FUNCTION__, "PyList_Check(op)")), ((PyListObject*)((op))));
    list->ob_item[index] = value;
}
# 46 "/data/data/com.termux/files/usr/include/python3.12/listobject.h" 2




}
# 64 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/dictobject.h" 1



extern "C" {
# 15 "/data/data/com.termux/files/usr/include/python3.12/dictobject.h"
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDict_Type;





__attribute__ ((visibility ("default"))) PyObject * PyDict_New(void);
__attribute__ ((visibility ("default"))) PyObject * PyDict_GetItem(PyObject *mp, PyObject *key);
__attribute__ ((visibility ("default"))) PyObject * PyDict_GetItemWithError(PyObject *mp, PyObject *key);
__attribute__ ((visibility ("default"))) int PyDict_SetItem(PyObject *mp, PyObject *key, PyObject *item);
__attribute__ ((visibility ("default"))) int PyDict_DelItem(PyObject *mp, PyObject *key);
__attribute__ ((visibility ("default"))) void PyDict_Clear(PyObject *mp);
__attribute__ ((visibility ("default"))) int PyDict_Next(
    PyObject *mp, Py_ssize_t *pos, PyObject **key, PyObject **value);
__attribute__ ((visibility ("default"))) PyObject * PyDict_Keys(PyObject *mp);
__attribute__ ((visibility ("default"))) PyObject * PyDict_Values(PyObject *mp);
__attribute__ ((visibility ("default"))) PyObject * PyDict_Items(PyObject *mp);
__attribute__ ((visibility ("default"))) Py_ssize_t PyDict_Size(PyObject *mp);
__attribute__ ((visibility ("default"))) PyObject * PyDict_Copy(PyObject *mp);
__attribute__ ((visibility ("default"))) int PyDict_Contains(PyObject *mp, PyObject *key);


__attribute__ ((visibility ("default"))) int PyDict_Update(PyObject *mp, PyObject *other);






__attribute__ ((visibility ("default"))) int PyDict_Merge(PyObject *mp,
                             PyObject *other,
                             int override);






__attribute__ ((visibility ("default"))) int PyDict_MergeFromSeq2(PyObject *d,
                                     PyObject *seq2,
                                     int override);

__attribute__ ((visibility ("default"))) PyObject * PyDict_GetItemString(PyObject *dp, const char *key);
__attribute__ ((visibility ("default"))) int PyDict_SetItemString(PyObject *dp, const char *key, PyObject *item);
__attribute__ ((visibility ("default"))) int PyDict_DelItemString(PyObject *dp, const char *key);

__attribute__ ((visibility ("default"))) PyObject * PyObject_GenericGetDict(PyObject *, void *);




extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictKeys_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictValues_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictItems_Type;
# 79 "/data/data/com.termux/files/usr/include/python3.12/dictobject.h"
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictIterKey_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictIterValue_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictIterItem_Type;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictRevIterKey_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictRevIterItem_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictRevIterValue_Type;




# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/dictobject.h" 1




typedef struct _dictkeysobject PyDictKeysObject;
typedef struct _dictvalues PyDictValues;




typedef struct {
    PyObject ob_base;


    Py_ssize_t ma_used;






    __attribute__((__deprecated__)) uint64_t ma_version_tag;


    PyDictKeysObject *ma_keys;






    PyDictValues *ma_values;
} PyDictObject;

__attribute__ ((visibility ("default"))) PyObject * _PyDict_GetItem_KnownHash(PyObject *mp, PyObject *key,
                                       Py_hash_t hash);
__attribute__ ((visibility ("default"))) PyObject * _PyDict_GetItemWithError(PyObject *dp, PyObject *key);
__attribute__ ((visibility ("default"))) PyObject * _PyDict_GetItemIdWithError(PyObject *dp,
                                                  _Py_Identifier *key);
__attribute__ ((visibility ("default"))) PyObject * _PyDict_GetItemStringWithError(PyObject *, const char *);
__attribute__ ((visibility ("default"))) PyObject * PyDict_SetDefault(
    PyObject *mp, PyObject *key, PyObject *defaultobj);
__attribute__ ((visibility ("default"))) int _PyDict_SetItem_KnownHash(PyObject *mp, PyObject *key,
                                          PyObject *item, Py_hash_t hash);
__attribute__ ((visibility ("default"))) int _PyDict_DelItem_KnownHash(PyObject *mp, PyObject *key,
                                          Py_hash_t hash);
__attribute__ ((visibility ("default"))) int _PyDict_DelItemIf(PyObject *mp, PyObject *key,
                                  int (*predicate)(PyObject *value));
__attribute__ ((visibility ("default"))) int _PyDict_Next(
    PyObject *mp, Py_ssize_t *pos, PyObject **key, PyObject **value, Py_hash_t *hash);


static inline Py_ssize_t PyDict_GET_SIZE(PyObject *op) {
    PyDictObject *mp;
    ((PyType_HasFeature((Py_TYPE(((PyObject*)((op))))), ((1UL << 29)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/dictobject.h", 55, __PRETTY_FUNCTION__, "PyDict_Check(op)"));
    mp = ((PyDictObject*)(op));
    return mp->ma_used;
}


__attribute__ ((visibility ("default"))) int _PyDict_Contains_KnownHash(PyObject *, PyObject *, Py_hash_t);
__attribute__ ((visibility ("default"))) int _PyDict_ContainsId(PyObject *, _Py_Identifier *);
__attribute__ ((visibility ("default"))) PyObject * _PyDict_NewPresized(Py_ssize_t minused);
__attribute__ ((visibility ("default"))) void _PyDict_MaybeUntrack(PyObject *mp);
__attribute__ ((visibility ("default"))) int _PyDict_HasOnlyStringKeys(PyObject *mp);
__attribute__ ((visibility ("default"))) Py_ssize_t _PyDict_SizeOf(PyDictObject *);
__attribute__ ((visibility ("default"))) PyObject * _PyDict_Pop(PyObject *, PyObject *, PyObject *);







__attribute__ ((visibility ("default"))) int _PyDict_MergeEx(PyObject *mp, PyObject *other, int override);
__attribute__ ((visibility ("default"))) int _PyDict_SetItemId(PyObject *dp, _Py_Identifier *key, PyObject *item);

__attribute__ ((visibility ("default"))) int _PyDict_DelItemId(PyObject *mp, _Py_Identifier *key);
__attribute__ ((visibility ("default"))) void _PyDict_DebugMallocStats(FILE *out);



typedef struct {
    PyObject ob_base;
    PyDictObject *dv_dict;
} _PyDictViewObject;

__attribute__ ((visibility ("default"))) PyObject * _PyDictView_New(PyObject *, PyTypeObject *);
__attribute__ ((visibility ("default"))) PyObject * _PyDictView_Intersect(PyObject* self, PyObject *other);
# 101 "/data/data/com.termux/files/usr/include/python3.12/cpython/dictobject.h"
typedef enum {

    PyDict_EVENT_ADDED, PyDict_EVENT_MODIFIED, PyDict_EVENT_DELETED, PyDict_EVENT_CLONED, PyDict_EVENT_CLEARED, PyDict_EVENT_DEALLOCATED,

} PyDict_WatchEvent;




typedef int(*PyDict_WatchCallback)(PyDict_WatchEvent event, PyObject* dict, PyObject* key, PyObject* new_value);


__attribute__ ((visibility ("default"))) int PyDict_AddWatcher(PyDict_WatchCallback callback);
__attribute__ ((visibility ("default"))) int PyDict_ClearWatcher(int watcher_id);


__attribute__ ((visibility ("default"))) int PyDict_Watch(int watcher_id, PyObject* dict);
__attribute__ ((visibility ("default"))) int PyDict_Unwatch(int watcher_id, PyObject* dict);
# 91 "/data/data/com.termux/files/usr/include/python3.12/dictobject.h" 2




}
# 65 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/odictobject.h" 1



extern "C" {
# 13 "/data/data/com.termux/files/usr/include/python3.12/cpython/odictobject.h"
typedef struct _odictobject PyODictObject;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyODict_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyODictIter_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyODictKeys_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyODictItems_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyODictValues_Type;





__attribute__ ((visibility ("default"))) PyObject * PyODict_New(void);
__attribute__ ((visibility ("default"))) int PyODict_SetItem(PyObject *od, PyObject *key, PyObject *item);
__attribute__ ((visibility ("default"))) int PyODict_DelItem(PyObject *od, PyObject *key);
# 41 "/data/data/com.termux/files/usr/include/python3.12/cpython/odictobject.h"
}
# 66 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/enumobject.h" 1






extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PyEnum_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyReversed_Type;


}
# 67 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/setobject.h" 1





extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PySet_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyFrozenSet_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PySetIter_Type;

__attribute__ ((visibility ("default"))) PyObject * PySet_New(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyFrozenSet_New(PyObject *);

__attribute__ ((visibility ("default"))) int PySet_Add(PyObject *set, PyObject *key);
__attribute__ ((visibility ("default"))) int PySet_Clear(PyObject *set);
__attribute__ ((visibility ("default"))) int PySet_Contains(PyObject *anyset, PyObject *key);
__attribute__ ((visibility ("default"))) int PySet_Discard(PyObject *set, PyObject *key);
__attribute__ ((visibility ("default"))) PyObject * PySet_Pop(PyObject *set);
__attribute__ ((visibility ("default"))) Py_ssize_t PySet_Size(PyObject *anyset);
# 42 "/data/data/com.termux/files/usr/include/python3.12/setobject.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/setobject.h" 1
# 20 "/data/data/com.termux/files/usr/include/python3.12/cpython/setobject.h"
typedef struct {
    PyObject *key;
    Py_hash_t hash;
} setentry;
# 36 "/data/data/com.termux/files/usr/include/python3.12/cpython/setobject.h"
typedef struct {
    PyObject ob_base;

    Py_ssize_t fill;
    Py_ssize_t used;





    Py_ssize_t mask;






    setentry *table;
    Py_hash_t hash;
    Py_ssize_t finger;

    setentry smalltable[8];
    PyObject *weakreflist;
} PySetObject;




static inline Py_ssize_t PySet_GET_SIZE(PyObject *so) {
    return ((((Py_IS_TYPE(((PyObject*)(((so)))), (&PySet_Type)) || Py_IS_TYPE(((PyObject*)(((so)))), (&PyFrozenSet_Type)) || PyType_IsSubtype(Py_TYPE(((PyObject*)((so)))), &PySet_Type) || PyType_IsSubtype(Py_TYPE(((PyObject*)((so)))), &PyFrozenSet_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/setobject.h", 65, __PRETTY_FUNCTION__, "PyAnySet_Check(so)")), ((PySetObject*)(so)))->used;
}


extern __attribute__ ((visibility ("default"))) PyObject * _PySet_Dummy;

__attribute__ ((visibility ("default"))) int _PySet_NextEntry(PyObject *set, Py_ssize_t *pos, PyObject **key, Py_hash_t *hash);
__attribute__ ((visibility ("default"))) int _PySet_Update(PyObject *set, PyObject *iterable);
# 43 "/data/data/com.termux/files/usr/include/python3.12/setobject.h" 2




}
# 68 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/methodobject.h" 1






extern "C" {






extern __attribute__ ((visibility ("default"))) PyTypeObject PyCFunction_Type;




typedef PyObject *(*PyCFunction)(PyObject *, PyObject *);
typedef PyObject *(*_PyCFunctionFast) (PyObject *, PyObject *const *, Py_ssize_t);
typedef PyObject *(*PyCFunctionWithKeywords)(PyObject *, PyObject *,
                                             PyObject *);
typedef PyObject *(*_PyCFunctionFastWithKeywords) (PyObject *,
                                                   PyObject *const *, Py_ssize_t,
                                                   PyObject *);
typedef PyObject *(*PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *,
                               size_t, PyObject *);
# 48 "/data/data/com.termux/files/usr/include/python3.12/methodobject.h"
__attribute__ ((visibility ("default"))) PyCFunction PyCFunction_GetFunction(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyCFunction_GetSelf(PyObject *);
__attribute__ ((visibility ("default"))) int PyCFunction_GetFlags(PyObject *);

__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) PyObject * PyCFunction_Call(PyObject *, PyObject *, PyObject *);

struct PyMethodDef {
    const char *ml_name;
    PyCFunction ml_meth;
    int ml_flags;

    const char *ml_doc;
};




__attribute__ ((visibility ("default"))) PyObject * PyCFunction_New(PyMethodDef *, PyObject *);



__attribute__ ((visibility ("default"))) PyObject * PyCFunction_NewEx(PyMethodDef *, PyObject *,
                                         PyObject *);



__attribute__ ((visibility ("default"))) PyObject * PyCMethod_New(PyMethodDef *, PyObject *,
                                     PyObject *, PyTypeObject *);
# 125 "/data/data/com.termux/files/usr/include/python3.12/methodobject.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/methodobject.h" 1






typedef struct {
    PyObject ob_base;
    PyMethodDef *m_ml;
    PyObject *m_self;
    PyObject *m_module;
    PyObject *m_weakreflist;
    vectorcallfunc vectorcall;
} PyCFunctionObject;
# 23 "/data/data/com.termux/files/usr/include/python3.12/cpython/methodobject.h"
typedef struct {
    PyCFunctionObject func;
    PyTypeObject *mm_class;
} PyCMethodObject;





extern __attribute__ ((visibility ("default"))) PyTypeObject PyCMethod_Type;







static inline PyCFunction PyCFunction_GET_FUNCTION(PyObject *func) {
    return (((PyObject_TypeCheck(((PyObject*)(((func)))), (&PyCFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/methodobject.h", 41, __PRETTY_FUNCTION__, "PyCFunction_Check(func)")), ((PyCFunctionObject*)((func))))->m_ml->ml_meth;
}


static inline PyObject* PyCFunction_GET_SELF(PyObject *func_obj) {
    PyCFunctionObject *func = (((PyObject_TypeCheck(((PyObject*)(((func_obj)))), (&PyCFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/methodobject.h", 46, __PRETTY_FUNCTION__, "PyCFunction_Check(func_obj)")), ((PyCFunctionObject*)((func_obj))));
    if (func->m_ml->ml_flags & 0x0020) {
        return nullptr;
    }
    return func->m_self;
}


static inline int PyCFunction_GET_FLAGS(PyObject *func) {
    return (((PyObject_TypeCheck(((PyObject*)(((func)))), (&PyCFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/methodobject.h", 55, __PRETTY_FUNCTION__, "PyCFunction_Check(func)")), ((PyCFunctionObject*)((func))))->m_ml->ml_flags;
}


static inline PyTypeObject* PyCFunction_GET_CLASS(PyObject *func_obj) {
    PyCFunctionObject *func = (((PyObject_TypeCheck(((PyObject*)(((func_obj)))), (&PyCFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/methodobject.h", 60, __PRETTY_FUNCTION__, "PyCFunction_Check(func_obj)")), ((PyCFunctionObject*)((func_obj))));
    if (func->m_ml->ml_flags & 0x0200) {
        return (((PyObject_TypeCheck(((PyObject*)(((func)))), (&PyCMethod_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/methodobject.h", 62, __PRETTY_FUNCTION__, "PyCMethod_Check(func)")), ((PyCMethodObject*)((func))))->mm_class;
    }
    return nullptr;
}
# 126 "/data/data/com.termux/files/usr/include/python3.12/methodobject.h" 2




}
# 69 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/moduleobject.h" 1






extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PyModule_Type;





__attribute__ ((visibility ("default"))) PyObject * PyModule_NewObject(
    PyObject *name
    );

__attribute__ ((visibility ("default"))) PyObject * PyModule_New(
    const char *name
    );
__attribute__ ((visibility ("default"))) PyObject * PyModule_GetDict(PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyModule_GetNameObject(PyObject *);

__attribute__ ((visibility ("default"))) const char * PyModule_GetName(PyObject *);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) const char * PyModule_GetFilename(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyModule_GetFilenameObject(PyObject *);

__attribute__ ((visibility ("default"))) void _PyModule_Clear(PyObject *);
__attribute__ ((visibility ("default"))) void _PyModule_ClearDict(PyObject *);
__attribute__ ((visibility ("default"))) int _PyModuleSpec_IsInitializing(PyObject *);

__attribute__ ((visibility ("default"))) PyModuleDef* PyModule_GetDef(PyObject*);
__attribute__ ((visibility ("default"))) void* PyModule_GetState(PyObject*);



__attribute__ ((visibility ("default"))) PyObject * PyModuleDef_Init(PyModuleDef*);
extern __attribute__ ((visibility ("default"))) PyTypeObject PyModuleDef_Type;


typedef struct PyModuleDef_Base {
  PyObject ob_base;






  PyObject* (*m_init)(void);




  Py_ssize_t m_index;




  PyObject* m_copy;
} PyModuleDef_Base;
# 74 "/data/data/com.termux/files/usr/include/python3.12/moduleobject.h"
struct PyModuleDef_Slot {
    int slot;
    void *value;
};
# 98 "/data/data/com.termux/files/usr/include/python3.12/moduleobject.h"
struct PyModuleDef {
  PyModuleDef_Base m_base;
  const char* m_name;
  const char* m_doc;
  Py_ssize_t m_size;
  PyMethodDef *m_methods;
  PyModuleDef_Slot *m_slots;
  traverseproc m_traverse;
  inquiry m_clear;
  freefunc m_free;
};
# 117 "/data/data/com.termux/files/usr/include/python3.12/moduleobject.h"
}
# 70 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h" 1






extern "C" {
# 21 "/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h"
typedef struct {
    PyObject *fc_globals; PyObject *fc_builtins; PyObject *fc_name; PyObject *fc_qualname; PyObject *fc_code; PyObject *fc_defaults; PyObject *fc_kwdefaults; PyObject *fc_closure;
} PyFrameConstructor;
# 36 "/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h"
typedef struct {
    PyObject ob_base;
    PyObject *func_globals; PyObject *func_builtins; PyObject *func_name; PyObject *func_qualname; PyObject *func_code; PyObject *func_defaults; PyObject *func_kwdefaults; PyObject *func_closure;
    PyObject *func_doc;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_module;
    PyObject *func_annotations;
    PyObject *func_typeparams;
    vectorcallfunc vectorcall;
# 54 "/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h"
    uint32_t func_version;






} PyFunctionObject;



extern __attribute__ ((visibility ("default"))) PyTypeObject PyFunction_Type;



__attribute__ ((visibility ("default"))) PyObject * PyFunction_New(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyFunction_NewWithQualName(PyObject *, PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyFunction_GetCode(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyFunction_GetGlobals(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyFunction_GetModule(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyFunction_GetDefaults(PyObject *);
__attribute__ ((visibility ("default"))) int PyFunction_SetDefaults(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) void PyFunction_SetVectorcall(PyFunctionObject *, vectorcallfunc);
__attribute__ ((visibility ("default"))) PyObject * PyFunction_GetKwDefaults(PyObject *);
__attribute__ ((visibility ("default"))) int PyFunction_SetKwDefaults(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyFunction_GetClosure(PyObject *);
__attribute__ ((visibility ("default"))) int PyFunction_SetClosure(PyObject *, PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyFunction_GetAnnotations(PyObject *);
__attribute__ ((visibility ("default"))) int PyFunction_SetAnnotations(PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) PyObject * _PyFunction_Vectorcall(
    PyObject *func,
    PyObject *const *stack,
    size_t nargsf,
    PyObject *kwnames);






static inline PyObject* PyFunction_GET_CODE(PyObject *func) {
    return (((Py_IS_TYPE(((PyObject*)(((func)))), (&PyFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h", 96, __PRETTY_FUNCTION__, "PyFunction_Check(func)")), ((PyFunctionObject*)(func)))->func_code;
}


static inline PyObject* PyFunction_GET_GLOBALS(PyObject *func) {
    return (((Py_IS_TYPE(((PyObject*)(((func)))), (&PyFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h", 101, __PRETTY_FUNCTION__, "PyFunction_Check(func)")), ((PyFunctionObject*)(func)))->func_globals;
}


static inline PyObject* PyFunction_GET_MODULE(PyObject *func) {
    return (((Py_IS_TYPE(((PyObject*)(((func)))), (&PyFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h", 106, __PRETTY_FUNCTION__, "PyFunction_Check(func)")), ((PyFunctionObject*)(func)))->func_module;
}


static inline PyObject* PyFunction_GET_DEFAULTS(PyObject *func) {
    return (((Py_IS_TYPE(((PyObject*)(((func)))), (&PyFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h", 111, __PRETTY_FUNCTION__, "PyFunction_Check(func)")), ((PyFunctionObject*)(func)))->func_defaults;
}


static inline PyObject* PyFunction_GET_KW_DEFAULTS(PyObject *func) {
    return (((Py_IS_TYPE(((PyObject*)(((func)))), (&PyFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h", 116, __PRETTY_FUNCTION__, "PyFunction_Check(func)")), ((PyFunctionObject*)(func)))->func_kwdefaults;
}


static inline PyObject* PyFunction_GET_CLOSURE(PyObject *func) {
    return (((Py_IS_TYPE(((PyObject*)(((func)))), (&PyFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h", 121, __PRETTY_FUNCTION__, "PyFunction_Check(func)")), ((PyFunctionObject*)(func)))->func_closure;
}


static inline PyObject* PyFunction_GET_ANNOTATIONS(PyObject *func) {
    return (((Py_IS_TYPE(((PyObject*)(((func)))), (&PyFunction_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h", 126, __PRETTY_FUNCTION__, "PyFunction_Check(func)")), ((PyFunctionObject*)(func)))->func_annotations;
}



extern __attribute__ ((visibility ("default"))) PyTypeObject PyClassMethod_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyStaticMethod_Type;

__attribute__ ((visibility ("default"))) PyObject * PyClassMethod_New(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyStaticMethod_New(PyObject *);
# 144 "/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h"
typedef enum {

    PyFunction_EVENT_CREATE, PyFunction_EVENT_DESTROY, PyFunction_EVENT_MODIFY_CODE, PyFunction_EVENT_MODIFY_DEFAULTS, PyFunction_EVENT_MODIFY_KWDEFAULTS,

} PyFunction_WatchEvent;
# 165 "/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h"
typedef int (*PyFunction_WatchCallback)(
  PyFunction_WatchEvent event,
  PyFunctionObject *func,
  PyObject *new_value);
# 177 "/data/data/com.termux/files/usr/include/python3.12/cpython/funcobject.h"
__attribute__ ((visibility ("default"))) int PyFunction_AddWatcher(PyFunction_WatchCallback callback);






__attribute__ ((visibility ("default"))) int PyFunction_ClearWatcher(int watcher_id);


}
# 71 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/classobject.h" 1








extern "C" {


typedef struct {
    PyObject ob_base;
    PyObject *im_func;
    PyObject *im_self;
    PyObject *im_weakreflist;
    vectorcallfunc vectorcall;
} PyMethodObject;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyMethod_Type;



__attribute__ ((visibility ("default"))) PyObject * PyMethod_New(PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyMethod_Function(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyMethod_Self(PyObject *);






static inline PyObject* PyMethod_GET_FUNCTION(PyObject *meth) {
    return (((Py_IS_TYPE(((PyObject*)(((meth)))), (&PyMethod_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/classobject.h", 35, __PRETTY_FUNCTION__, "PyMethod_Check(meth)")), ((PyMethodObject*)(meth)))->im_func;
}


static inline PyObject* PyMethod_GET_SELF(PyObject *meth) {
    return (((Py_IS_TYPE(((PyObject*)(((meth)))), (&PyMethod_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/classobject.h", 40, __PRETTY_FUNCTION__, "PyMethod_Check(meth)")), ((PyMethodObject*)(meth)))->im_self;
}


typedef struct {
    PyObject ob_base;
    PyObject *func;
} PyInstanceMethodObject;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyInstanceMethod_Type;



__attribute__ ((visibility ("default"))) PyObject * PyInstanceMethod_New(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyInstanceMethod_Function(PyObject *);







static inline PyObject* PyInstanceMethod_GET_FUNCTION(PyObject *meth) {
    return (((Py_IS_TYPE(((PyObject*)(((meth)))), (&PyInstanceMethod_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/classobject.h", 63, __PRETTY_FUNCTION__, "PyInstanceMethod_Check(meth)")), ((PyInstanceMethodObject*)(meth)))->func;
}



}
# 72 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/fileobject.h" 1





extern "C" {




__attribute__ ((visibility ("default"))) PyObject * PyFile_FromFd(int, const char *, const char *, int,
                                     const char *, const char *,
                                     const char *, int);
__attribute__ ((visibility ("default"))) PyObject * PyFile_GetLine(PyObject *, int);
__attribute__ ((visibility ("default"))) int PyFile_WriteObject(PyObject *, PyObject *, int);
__attribute__ ((visibility ("default"))) int PyFile_WriteString(const char *, PyObject *);
__attribute__ ((visibility ("default"))) int PyObject_AsFileDescriptor(PyObject *);




__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) const char * Py_FileSystemDefaultEncoding;

__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) const char * Py_FileSystemDefaultEncodeErrors;

__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_HasFileSystemDefaultEncoding;


__attribute__((__deprecated__)) extern __attribute__ ((visibility ("default"))) int Py_UTF8Mode;
# 42 "/data/data/com.termux/files/usr/include/python3.12/fileobject.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/fileobject.h" 1




__attribute__ ((visibility ("default"))) char * Py_UniversalNewlineFgets(char *, int, FILE*, PyObject *);
__attribute__ ((visibility ("default"))) char * _Py_UniversalNewlineFgetsWithSize(char *, int, FILE*, PyObject *, size_t*);



__attribute__ ((visibility ("default"))) PyObject * PyFile_NewStdPrinter(int);
extern __attribute__ ((visibility ("default"))) PyTypeObject PyStdPrinter_Type;

typedef PyObject * (*Py_OpenCodeHookFunction)(PyObject *, void *);

__attribute__ ((visibility ("default"))) PyObject * PyFile_OpenCode(const char *utf8path);
__attribute__ ((visibility ("default"))) PyObject * PyFile_OpenCodeObject(PyObject *path);
__attribute__ ((visibility ("default"))) int PyFile_SetOpenCodeHook(Py_OpenCodeHookFunction hook, void *userData);

__attribute__ ((visibility ("default"))) int _PyLong_FileDescriptor_Converter(PyObject *, void *);
# 43 "/data/data/com.termux/files/usr/include/python3.12/fileobject.h" 2




}
# 73 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pycapsule.h" 1
# 18 "/data/data/com.termux/files/usr/include/python3.12/pycapsule.h"
extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PyCapsule_Type;

typedef void (*PyCapsule_Destructor)(PyObject *);




__attribute__ ((visibility ("default"))) PyObject * PyCapsule_New(
    void *pointer,
    const char *name,
    PyCapsule_Destructor destructor);

__attribute__ ((visibility ("default"))) void * PyCapsule_GetPointer(PyObject *capsule, const char *name);

__attribute__ ((visibility ("default"))) PyCapsule_Destructor PyCapsule_GetDestructor(PyObject *capsule);

__attribute__ ((visibility ("default"))) const char * PyCapsule_GetName(PyObject *capsule);

__attribute__ ((visibility ("default"))) void * PyCapsule_GetContext(PyObject *capsule);

__attribute__ ((visibility ("default"))) int PyCapsule_IsValid(PyObject *capsule, const char *name);

__attribute__ ((visibility ("default"))) int PyCapsule_SetPointer(PyObject *capsule, void *pointer);

__attribute__ ((visibility ("default"))) int PyCapsule_SetDestructor(PyObject *capsule, PyCapsule_Destructor destructor);

__attribute__ ((visibility ("default"))) int PyCapsule_SetName(PyObject *capsule, const char *name);

__attribute__ ((visibility ("default"))) int PyCapsule_SetContext(PyObject *capsule, void *context);

__attribute__ ((visibility ("default"))) void * PyCapsule_Import(
    const char *name,
    int no_block);



}
# 74 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/code.h" 1







extern "C" {
# 20 "/data/data/com.termux/files/usr/include/python3.12/cpython/code.h"
typedef struct _Py_LocalMonitors {

    uint8_t tools[15];
} _Py_LocalMonitors;

typedef struct _Py_GlobalMonitors {
    uint8_t tools[15];
} _Py_GlobalMonitors;
# 38 "/data/data/com.termux/files/usr/include/python3.12/cpython/code.h"
typedef union {
    uint16_t cache;
    struct {
        uint8_t code;
        uint8_t arg;
    } op;
} _Py_CODEUNIT;






static inline _Py_CODEUNIT
_py_make_codeunit(uint8_t opcode, uint8_t oparg)
{

    _Py_CODEUNIT word;
    word.op.code = opcode;
    word.op.arg = oparg;
    return word;
}

static inline void
_py_set_opcode(_Py_CODEUNIT *word, uint8_t opcode)
{
    word->op.code = opcode;
}





typedef struct {
    PyObject *_co_code;
    PyObject *_co_varnames;
    PyObject *_co_cellvars;
    PyObject *_co_freevars;
} _PyCoCached;




typedef struct {
    uint8_t original_opcode;
    int8_t line_delta;
} _PyCoLineInstrumentationData;




typedef struct {

    _Py_LocalMonitors local_monitors;

    _Py_LocalMonitors active_monitors;

    uint8_t *tools;

    _PyCoLineInstrumentationData *lines;

    uint8_t *line_tools;


    uint8_t *per_instruction_opcodes;

    uint8_t *per_instruction_tools;
} _PyCoMonitoringData;
# 175 "/data/data/com.termux/files/usr/include/python3.12/cpython/code.h"
struct PyCodeObject { PyVarObject ob_base; PyObject *co_consts; PyObject *co_names; PyObject *co_exceptiontable; int co_flags; int co_argcount; int co_posonlyargcount; int co_kwonlyargcount; int co_stacksize; int co_firstlineno; int co_nlocalsplus; int co_framesize; int co_nlocals; int co_ncellvars; int co_nfreevars; uint32_t co_version; PyObject *co_localsplusnames; PyObject *co_localspluskinds; PyObject *co_filename; PyObject *co_name; PyObject *co_qualname; PyObject *co_linetable; PyObject *co_weakreflist; _PyCoCached *_co_cached; uint64_t _co_instrumentation_version; _PyCoMonitoringData *_co_monitoring; int _co_firsttraceable; void *co_extra; char co_code_adaptive[(1)]; };
# 212 "/data/data/com.termux/files/usr/include/python3.12/cpython/code.h"
extern __attribute__ ((visibility ("default"))) PyTypeObject PyCode_Type;



static inline Py_ssize_t PyCode_GetNumFree(PyCodeObject *op) {
    ((Py_IS_TYPE(((PyObject*)(((op)))), (&PyCode_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/code.h", 217, __PRETTY_FUNCTION__, "PyCode_Check(op)"));
    return op->co_nfreevars;
}

static inline int PyCode_GetFirstFree(PyCodeObject *op) {
    ((Py_IS_TYPE(((PyObject*)(((op)))), (&PyCode_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/code.h", 222, __PRETTY_FUNCTION__, "PyCode_Check(op)"));
    return op->co_nlocalsplus - op->co_nfreevars;
}





__attribute__ ((visibility ("default"))) PyCodeObject * PyUnstable_Code_New(
        int, int, int, int, int, PyObject *, PyObject *,
        PyObject *, PyObject *, PyObject *, PyObject *,
        PyObject *, PyObject *, PyObject *, int, PyObject *,
        PyObject *);

__attribute__ ((visibility ("default"))) PyCodeObject * PyUnstable_Code_NewWithPosOnlyArgs(
        int, int, int, int, int, int, PyObject *, PyObject *,
        PyObject *, PyObject *, PyObject *, PyObject *,
        PyObject *, PyObject *, PyObject *, int, PyObject *,
        PyObject *);


__attribute__((__deprecated__)) static inline PyCodeObject *
PyCode_New(
        int a, int b, int c, int d, int e, PyObject *f, PyObject *g,
        PyObject *h, PyObject *i, PyObject *j, PyObject *k,
        PyObject *l, PyObject *m, PyObject *n, int o, PyObject *p,
        PyObject *q)
{
    return PyUnstable_Code_New(
        a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
}
__attribute__((__deprecated__)) static inline PyCodeObject *
PyCode_NewWithPosOnlyArgs(
        int a, int poac, int b, int c, int d, int e, PyObject *f, PyObject *g,
        PyObject *h, PyObject *i, PyObject *j, PyObject *k,
        PyObject *l, PyObject *m, PyObject *n, int o, PyObject *p,
        PyObject *q)
{
    return PyUnstable_Code_NewWithPosOnlyArgs(
        a, poac, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
}


__attribute__ ((visibility ("default"))) PyCodeObject *
PyCode_NewEmpty(const char *filename, const char *funcname, int firstlineno);




__attribute__ ((visibility ("default"))) int PyCode_Addr2Line(PyCodeObject *, int);

__attribute__ ((visibility ("default"))) int PyCode_Addr2Location(PyCodeObject *, int, int *, int *, int *, int *);





typedef enum {

    PY_CODE_EVENT_CREATE, PY_CODE_EVENT_DESTROY,

} PyCodeEvent;
# 295 "/data/data/com.termux/files/usr/include/python3.12/cpython/code.h"
typedef int (*PyCode_WatchCallback)(
  PyCodeEvent event,
  PyCodeObject* co);
# 306 "/data/data/com.termux/files/usr/include/python3.12/cpython/code.h"
__attribute__ ((visibility ("default"))) int PyCode_AddWatcher(PyCode_WatchCallback callback);






__attribute__ ((visibility ("default"))) int PyCode_ClearWatcher(int watcher_id);


struct _opaque {
    int computed_line;
    const uint8_t *lo_next;
    const uint8_t *limit;
};

typedef struct _line_offsets {
    int ar_start;
    int ar_end;
    int ar_line;
    struct _opaque opaque;
} PyCodeAddressRange;




__attribute__ ((visibility ("default"))) int _PyCode_CheckLineNumber(int lasti, PyCodeAddressRange *bounds);
# 341 "/data/data/com.termux/files/usr/include/python3.12/cpython/code.h"
__attribute__ ((visibility ("default"))) PyObject* _PyCode_ConstantKey(PyObject *obj);

__attribute__ ((visibility ("default"))) PyObject* PyCode_Optimize(PyObject *code, PyObject* consts,
                                      PyObject *names, PyObject *lnotab);

__attribute__ ((visibility ("default"))) int PyUnstable_Code_GetExtra(
    PyObject *code, Py_ssize_t index, void **extra);
__attribute__ ((visibility ("default"))) int PyUnstable_Code_SetExtra(
    PyObject *code, Py_ssize_t index, void *extra);

__attribute__((__deprecated__)) static inline int
_PyCode_GetExtra(PyObject *code, Py_ssize_t index, void **extra)
{
    return PyUnstable_Code_GetExtra(code, index, extra);
}
__attribute__((__deprecated__)) static inline int
_PyCode_SetExtra(PyObject *code, Py_ssize_t index, void *extra)
{
    return PyUnstable_Code_SetExtra(code, index, extra);
}



__attribute__ ((visibility ("default"))) PyObject * PyCode_GetCode(PyCodeObject *code);

__attribute__ ((visibility ("default"))) PyObject * PyCode_GetVarnames(PyCodeObject *code);

__attribute__ ((visibility ("default"))) PyObject * PyCode_GetCellvars(PyCodeObject *code);

__attribute__ ((visibility ("default"))) PyObject * PyCode_GetFreevars(PyCodeObject *code);

typedef enum _PyCodeLocationInfoKind {

    PY_CODE_LOCATION_INFO_SHORT0 = 0,

    PY_CODE_LOCATION_INFO_ONE_LINE0 = 10,
    PY_CODE_LOCATION_INFO_ONE_LINE1 = 11,
    PY_CODE_LOCATION_INFO_ONE_LINE2 = 12,

    PY_CODE_LOCATION_INFO_NO_COLUMNS = 13,
    PY_CODE_LOCATION_INFO_LONG = 14,
    PY_CODE_LOCATION_INFO_NONE = 15
} _PyCodeLocationInfoKind;


}
# 75 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pyframe.h" 1








extern "C" {



__attribute__ ((visibility ("default"))) int PyFrame_GetLineNumber(PyFrameObject *);

__attribute__ ((visibility ("default"))) PyCodeObject * PyFrame_GetCode(PyFrameObject *frame);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pyframe.h" 1




extern __attribute__ ((visibility ("default"))) PyTypeObject PyFrame_Type;



__attribute__ ((visibility ("default"))) PyFrameObject * PyFrame_GetBack(PyFrameObject *frame);
__attribute__ ((visibility ("default"))) PyObject * PyFrame_GetLocals(PyFrameObject *frame);

__attribute__ ((visibility ("default"))) PyObject * PyFrame_GetGlobals(PyFrameObject *frame);
__attribute__ ((visibility ("default"))) PyObject * PyFrame_GetBuiltins(PyFrameObject *frame);

__attribute__ ((visibility ("default"))) PyObject * PyFrame_GetGenerator(PyFrameObject *frame);
__attribute__ ((visibility ("default"))) int PyFrame_GetLasti(PyFrameObject *frame);
__attribute__ ((visibility ("default"))) PyObject* PyFrame_GetVar(PyFrameObject *frame, PyObject *name);
__attribute__ ((visibility ("default"))) PyObject* PyFrame_GetVarString(PyFrameObject *frame, const char *name);




struct _PyInterpreterFrame;



__attribute__ ((visibility ("default"))) PyObject * PyUnstable_InterpreterFrame_GetCode(struct _PyInterpreterFrame *frame);



__attribute__ ((visibility ("default"))) int PyUnstable_InterpreterFrame_GetLasti(struct _PyInterpreterFrame *frame);



__attribute__ ((visibility ("default"))) int PyUnstable_InterpreterFrame_GetLine(struct _PyInterpreterFrame *frame);
# 20 "/data/data/com.termux/files/usr/include/python3.12/pyframe.h" 2




}
# 76 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/traceback.h" 1



extern "C" {




__attribute__ ((visibility ("default"))) int PyTraceBack_Here(PyFrameObject *);
__attribute__ ((visibility ("default"))) int PyTraceBack_Print(PyObject *, PyObject *);


extern __attribute__ ((visibility ("default"))) PyTypeObject PyTraceBack_Type;





# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/traceback.h" 1




typedef struct _traceback PyTracebackObject;

struct _traceback {
    PyObject ob_base;
    PyTracebackObject *tb_next;
    PyFrameObject *tb_frame;
    int tb_lasti;
    int tb_lineno;
};

__attribute__ ((visibility ("default"))) int _Py_DisplaySourceLine(PyObject *, PyObject *, int, int, int *, PyObject **);
__attribute__ ((visibility ("default"))) void _PyTraceback_Add(const char *, const char *, int);
# 20 "/data/data/com.termux/files/usr/include/python3.12/traceback.h" 2




}
# 77 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/sliceobject.h" 1



extern "C" {




extern __attribute__ ((visibility ("default"))) PyObject _Py_EllipsisObject;
# 22 "/data/data/com.termux/files/usr/include/python3.12/sliceobject.h"
typedef struct {
    PyObject ob_base;
    PyObject *start, *stop, *step;
} PySliceObject;


extern __attribute__ ((visibility ("default"))) PyTypeObject PySlice_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyEllipsis_Type;



__attribute__ ((visibility ("default"))) PyObject * PySlice_New(PyObject* start, PyObject* stop,
                                  PyObject* step);

__attribute__ ((visibility ("default"))) PyObject * _PySlice_FromIndices(Py_ssize_t start, Py_ssize_t stop);
__attribute__ ((visibility ("default"))) int _PySlice_GetLongIndices(PySliceObject *self, PyObject *length,
                                 PyObject **start_ptr, PyObject **stop_ptr,
                                 PyObject **step_ptr);

__attribute__ ((visibility ("default"))) int PySlice_GetIndices(PyObject *r, Py_ssize_t length,
                                  Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t *step);
__attribute__((__deprecated__))
__attribute__ ((visibility ("default"))) int PySlice_GetIndicesEx(PyObject *r, Py_ssize_t length,
                                     Py_ssize_t *start, Py_ssize_t *stop,
                                     Py_ssize_t *step,
                                     Py_ssize_t *slicelength);







__attribute__ ((visibility ("default"))) int PySlice_Unpack(PyObject *slice,
                               Py_ssize_t *start, Py_ssize_t *stop, Py_ssize_t *step);
__attribute__ ((visibility ("default"))) Py_ssize_t PySlice_AdjustIndices(Py_ssize_t length,
                                             Py_ssize_t *start, Py_ssize_t *stop,
                                             Py_ssize_t step);



}
# 78 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/cellobject.h" 1






extern "C" {


typedef struct {
    PyObject ob_base;

    PyObject *ob_ref;
} PyCellObject;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyCell_Type;



__attribute__ ((visibility ("default"))) PyObject * PyCell_New(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyCell_Get(PyObject *);
__attribute__ ((visibility ("default"))) int PyCell_Set(PyObject *, PyObject *);

static inline PyObject* PyCell_GET(PyObject *op) {
    PyCellObject *cell;
    ((Py_IS_TYPE(((PyObject*)(((op)))), (&PyCell_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/cellobject.h", 26, __PRETTY_FUNCTION__, "PyCell_Check(op)"));
    cell = ((PyCellObject*)(op));
    return cell->ob_ref;
}


static inline void PyCell_SET(PyObject *op, PyObject *value) {
    PyCellObject *cell;
    ((Py_IS_TYPE(((PyObject*)(((op)))), (&PyCell_Type))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/cellobject.h", 34, __PRETTY_FUNCTION__, "PyCell_Check(op)"));
    cell = ((PyCellObject*)(op));
    cell->ob_ref = value;
}



}
# 79 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/iterobject.h" 1




extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PySeqIter_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyCallIter_Type;






__attribute__ ((visibility ("default"))) PyObject * PySeqIter_New(PyObject *);




__attribute__ ((visibility ("default"))) PyObject * PyCallIter_New(PyObject *, PyObject *);


}
# 80 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/genobject.h" 1






extern "C" {
# 31 "/data/data/com.termux/files/usr/include/python3.12/cpython/genobject.h"
typedef struct {

    PyObject ob_base; PyObject *gi_weakreflist; PyObject *gi_name; PyObject *gi_qualname; _PyErr_StackItem gi_exc_state; PyObject *gi_origin_or_finalizer; char gi_hooks_inited; char gi_closed; char gi_running_async; int8_t gi_frame_state; PyObject *gi_iframe[1];
} PyGenObject;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyGen_Type;




__attribute__ ((visibility ("default"))) PyObject * PyGen_New(PyFrameObject *);
__attribute__ ((visibility ("default"))) PyObject * PyGen_NewWithQualName(PyFrameObject *,
    PyObject *name, PyObject *qualname);
__attribute__ ((visibility ("default"))) int _PyGen_SetStopIterationValue(PyObject *);
__attribute__ ((visibility ("default"))) int _PyGen_FetchStopIterationValue(PyObject **);
__attribute__ ((visibility ("default"))) void _PyGen_Finalize(PyObject *self);
__attribute__ ((visibility ("default"))) PyCodeObject * PyGen_GetCode(PyGenObject *gen);




typedef struct {
    PyObject ob_base; PyObject *cr_weakreflist; PyObject *cr_name; PyObject *cr_qualname; _PyErr_StackItem cr_exc_state; PyObject *cr_origin_or_finalizer; char cr_hooks_inited; char cr_closed; char cr_running_async; int8_t cr_frame_state; PyObject *cr_iframe[1];
} PyCoroObject;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyCoro_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject _PyCoroWrapper_Type;


__attribute__ ((visibility ("default"))) PyObject * PyCoro_New(PyFrameObject *,
    PyObject *name, PyObject *qualname);




typedef struct {
    PyObject ob_base; PyObject *ag_weakreflist; PyObject *ag_name; PyObject *ag_qualname; _PyErr_StackItem ag_exc_state; PyObject *ag_origin_or_finalizer; char ag_hooks_inited; char ag_closed; char ag_running_async; int8_t ag_frame_state; PyObject *ag_iframe[1];
} PyAsyncGenObject;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyAsyncGen_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject _PyAsyncGenASend_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject _PyAsyncGenWrappedValue_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject _PyAsyncGenAThrow_Type;

__attribute__ ((visibility ("default"))) PyObject * PyAsyncGen_New(PyFrameObject *,
    PyObject *name, PyObject *qualname);
# 86 "/data/data/com.termux/files/usr/include/python3.12/cpython/genobject.h"
}
# 81 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/descrobject.h" 1




extern "C" {


typedef PyObject *(*getter)(PyObject *, void *);
typedef int (*setter)(PyObject *, PyObject *, void *);

struct PyGetSetDef {
    const char *name;
    getter get;
    setter set;
    const char *doc;
    void *closure;
};

extern __attribute__ ((visibility ("default"))) PyTypeObject PyClassMethodDescr_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyGetSetDescr_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyMemberDescr_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyMethodDescr_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyWrapperDescr_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyDictProxy_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyProperty_Type;

__attribute__ ((visibility ("default"))) PyObject * PyDescr_NewMethod(PyTypeObject *, PyMethodDef *);
__attribute__ ((visibility ("default"))) PyObject * PyDescr_NewClassMethod(PyTypeObject *, PyMethodDef *);
__attribute__ ((visibility ("default"))) PyObject * PyDescr_NewMember(PyTypeObject *, PyMemberDef *);
__attribute__ ((visibility ("default"))) PyObject * PyDescr_NewGetSet(PyTypeObject *, PyGetSetDef *);

__attribute__ ((visibility ("default"))) PyObject * PyDictProxy_New(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyWrapper_New(PyObject *, PyObject *);







struct PyMemberDef {
    const char *name;
    int type;
    Py_ssize_t offset;
    int flags;
    const char *doc;
};
# 88 "/data/data/com.termux/files/usr/include/python3.12/descrobject.h"
__attribute__ ((visibility ("default"))) PyObject * PyMember_GetOne(const char *, PyMemberDef *);
__attribute__ ((visibility ("default"))) int PyMember_SetOne(char *, PyMemberDef *, PyObject *);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/descrobject.h" 1




typedef PyObject *(*wrapperfunc)(PyObject *self, PyObject *args,
                                 void *wrapped);

typedef PyObject *(*wrapperfunc_kwds)(PyObject *self, PyObject *args,
                                      void *wrapped, PyObject *kwds);

struct wrapperbase {
    const char *name;
    int offset;
    void *function;
    wrapperfunc wrapper;
    const char *doc;
    int flags;
    PyObject *name_strobj;
};






typedef struct {
    PyObject ob_base;
    PyTypeObject *d_type;
    PyObject *d_name;
    PyObject *d_qualname;
} PyDescrObject;






typedef struct {
    PyDescrObject d_common;
    PyMethodDef *d_method;
    vectorcallfunc vectorcall;
} PyMethodDescrObject;

typedef struct {
    PyDescrObject d_common;
    PyMemberDef *d_member;
} PyMemberDescrObject;

typedef struct {
    PyDescrObject d_common;
    PyGetSetDef *d_getset;
} PyGetSetDescrObject;

typedef struct {
    PyDescrObject d_common;
    struct wrapperbase *d_base;
    void *d_wrapped;
} PyWrapperDescrObject;

extern __attribute__ ((visibility ("default"))) PyTypeObject _PyMethodWrapper_Type;

__attribute__ ((visibility ("default"))) PyObject * PyDescr_NewWrapper(PyTypeObject *,
                                                struct wrapperbase *, void *);
__attribute__ ((visibility ("default"))) int PyDescr_IsData(PyObject *);
# 94 "/data/data/com.termux/files/usr/include/python3.12/descrobject.h" 2




}
# 82 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/genericaliasobject.h" 1




extern "C" {


__attribute__ ((visibility ("default"))) PyObject * Py_GenericAlias(PyObject *, PyObject *);
extern __attribute__ ((visibility ("default"))) PyTypeObject Py_GenericAliasType;


}
# 83 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/warnings.h" 1



extern "C" {


__attribute__ ((visibility ("default"))) int PyErr_WarnEx(
    PyObject *category,
    const char *message,
    Py_ssize_t stack_level);

__attribute__ ((visibility ("default"))) int PyErr_WarnFormat(
    PyObject *category,
    Py_ssize_t stack_level,
    const char *format,
    ...);



__attribute__ ((visibility ("default"))) int PyErr_ResourceWarning(
    PyObject *source,
    Py_ssize_t stack_level,
    const char *format,
    ...);


__attribute__ ((visibility ("default"))) int PyErr_WarnExplicit(
    PyObject *category,
    const char *message,
    const char *filename,
    int lineno,
    const char *module,
    PyObject *registry);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/warnings.h" 1




__attribute__ ((visibility ("default"))) int PyErr_WarnExplicitObject(
    PyObject *category,
    PyObject *message,
    PyObject *filename,
    int lineno,
    PyObject *module,
    PyObject *registry);

__attribute__ ((visibility ("default"))) int PyErr_WarnExplicitFormat(
    PyObject *category,
    const char *filename, int lineno,
    const char *module, PyObject *registry,
    const char *format, ...);
# 38 "/data/data/com.termux/files/usr/include/python3.12/warnings.h" 2




}
# 84 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/weakrefobject.h" 1





extern "C" {


typedef struct _PyWeakReference PyWeakReference;

extern __attribute__ ((visibility ("default"))) PyTypeObject _PyWeakref_RefType;
extern __attribute__ ((visibility ("default"))) PyTypeObject _PyWeakref_ProxyType;
extern __attribute__ ((visibility ("default"))) PyTypeObject _PyWeakref_CallableProxyType;
# 26 "/data/data/com.termux/files/usr/include/python3.12/weakrefobject.h"
__attribute__ ((visibility ("default"))) PyObject * PyWeakref_NewRef(PyObject *ob,
                                        PyObject *callback);
__attribute__ ((visibility ("default"))) PyObject * PyWeakref_NewProxy(PyObject *ob,
                                          PyObject *callback);
__attribute__ ((visibility ("default"))) PyObject * PyWeakref_GetObject(PyObject *ref);




# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/weakrefobject.h" 1







struct _PyWeakReference {
    PyObject ob_base;





    PyObject *wr_object;


    PyObject *wr_callback;




    Py_hash_t hash;






    PyWeakReference *wr_prev;
    PyWeakReference *wr_next;
    vectorcallfunc vectorcall;
};

__attribute__ ((visibility ("default"))) Py_ssize_t _PyWeakref_GetWeakrefCount(PyWeakReference *head);

__attribute__ ((visibility ("default"))) void _PyWeakref_ClearRef(PyWeakReference *self);

static inline PyObject* PyWeakref_GET_OBJECT(PyObject *ref_obj) {
    PyWeakReference *ref;
    PyObject *obj;
    (((PyObject_TypeCheck(((PyObject*)(((ref_obj)))), (&_PyWeakref_RefType)) || (Py_IS_TYPE(((PyObject*)(((ref_obj)))), (&_PyWeakref_ProxyType)) || Py_IS_TYPE(((PyObject*)(((ref_obj)))), (&_PyWeakref_CallableProxyType))))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/weakrefobject.h", 42, __PRETTY_FUNCTION__, "PyWeakref_Check(ref_obj)"));
    ref = ((PyWeakReference*)(ref_obj));
    obj = ref->wr_object;






    if (Py_REFCNT(((PyObject*)((obj)))) > 0) {
        return obj;
    }
    return (&_Py_NoneStruct);
}
# 36 "/data/data/com.termux/files/usr/include/python3.12/weakrefobject.h" 2




}
# 85 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/structseq.h" 1






extern "C" {


typedef struct PyStructSequence_Field {
    const char *name;
    const char *doc;
} PyStructSequence_Field;

typedef struct PyStructSequence_Desc {
    const char *name;
    const char *doc;
    PyStructSequence_Field *fields;
    int n_in_sequence;
} PyStructSequence_Desc;

extern __attribute__ ((visibility ("default"))) const char * const PyStructSequence_UnnamedField;


__attribute__ ((visibility ("default"))) void PyStructSequence_InitType(PyTypeObject *type,
                                           PyStructSequence_Desc *desc);
__attribute__ ((visibility ("default"))) int PyStructSequence_InitType2(PyTypeObject *type,
                                           PyStructSequence_Desc *desc);

__attribute__ ((visibility ("default"))) PyTypeObject* PyStructSequence_NewType(PyStructSequence_Desc *desc);

__attribute__ ((visibility ("default"))) PyObject * PyStructSequence_New(PyTypeObject* type);


typedef PyTupleObject PyStructSequence;







__attribute__ ((visibility ("default"))) void PyStructSequence_SetItem(PyObject*, Py_ssize_t, PyObject*);
__attribute__ ((visibility ("default"))) PyObject* PyStructSequence_GetItem(PyObject*, Py_ssize_t);


}
# 86 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/picklebufobject.h" 1







extern "C" {




extern __attribute__ ((visibility ("default"))) PyTypeObject PyPickleBuffer_Type;




__attribute__ ((visibility ("default"))) PyObject * PyPickleBuffer_FromObject(PyObject *);



__attribute__ ((visibility ("default"))) const Py_buffer * PyPickleBuffer_GetBuffer(PyObject *);

__attribute__ ((visibility ("default"))) int PyPickleBuffer_Release(PyObject *);




}
# 87 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pytime.h" 1
# 53 "/data/data/com.termux/files/usr/include/python3.12/cpython/pytime.h"
extern "C" {



struct timeval;





typedef int64_t _PyTime_t;






typedef enum {


    _PyTime_ROUND_FLOOR=0,


    _PyTime_ROUND_CEILING=1,


    _PyTime_ROUND_HALF_EVEN=2,






    _PyTime_ROUND_UP=3,


    _PyTime_ROUND_TIMEOUT = _PyTime_ROUND_UP
} _PyTime_round_t;



__attribute__ ((visibility ("default"))) PyObject * _PyLong_FromTime_t(
    time_t sec);


__attribute__ ((visibility ("default"))) time_t _PyLong_AsTime_t(
    PyObject *obj);


__attribute__ ((visibility ("default"))) int _PyTime_ObjectToTime_t(
    PyObject *obj,
    time_t *sec,
    _PyTime_round_t);




__attribute__ ((visibility ("default"))) int _PyTime_ObjectToTimeval(
    PyObject *obj,
    time_t *sec,
    long *usec,
    _PyTime_round_t);




__attribute__ ((visibility ("default"))) int _PyTime_ObjectToTimespec(
    PyObject *obj,
    time_t *sec,
    long *nsec,
    _PyTime_round_t);



__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_FromSeconds(int seconds);







__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_FromNanoseconds(_PyTime_t ns);



__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_FromMicrosecondsClamp(_PyTime_t us);


__attribute__ ((visibility ("default"))) int _PyTime_FromNanosecondsObject(_PyTime_t *t,
    PyObject *obj);



__attribute__ ((visibility ("default"))) int _PyTime_FromSecondsObject(_PyTime_t *t,
    PyObject *obj,
    _PyTime_round_t round);



__attribute__ ((visibility ("default"))) int _PyTime_FromMillisecondsObject(_PyTime_t *t,
    PyObject *obj,
    _PyTime_round_t round);


__attribute__ ((visibility ("default"))) double _PyTime_AsSecondsDouble(_PyTime_t t);


__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_AsMilliseconds(_PyTime_t t,
    _PyTime_round_t round);


__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_AsMicroseconds(_PyTime_t t,
    _PyTime_round_t round);


__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_AsNanoseconds(_PyTime_t t);
# 179 "/data/data/com.termux/files/usr/include/python3.12/cpython/pytime.h"
__attribute__ ((visibility ("default"))) PyObject * _PyTime_AsNanosecondsObject(_PyTime_t t);




__attribute__ ((visibility ("default"))) int _PyTime_FromTimeval(_PyTime_t *tp, struct timeval *tv);






__attribute__ ((visibility ("default"))) int _PyTime_AsTimeval(_PyTime_t t,
    struct timeval *tv,
    _PyTime_round_t round);



__attribute__ ((visibility ("default"))) void _PyTime_AsTimeval_clamp(_PyTime_t t,
    struct timeval *tv,
    _PyTime_round_t round);







__attribute__ ((visibility ("default"))) int _PyTime_AsTimevalTime_t(
    _PyTime_t t,
    time_t *secs,
    int *us,
    _PyTime_round_t round);




__attribute__ ((visibility ("default"))) int _PyTime_FromTimespec(_PyTime_t *tp, struct timespec *ts);




__attribute__ ((visibility ("default"))) int _PyTime_AsTimespec(_PyTime_t t, struct timespec *ts);



__attribute__ ((visibility ("default"))) void _PyTime_AsTimespec_clamp(_PyTime_t t, struct timespec *ts);




__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_Add(_PyTime_t t1, _PyTime_t t2);




__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_MulDiv(_PyTime_t ticks,
    _PyTime_t mul,
    _PyTime_t div);


typedef struct {
    const char *implementation;
    int monotonic;
    int adjustable;
    double resolution;
} _Py_clock_info_t;
# 254 "/data/data/com.termux/files/usr/include/python3.12/cpython/pytime.h"
__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_GetSystemClock(void);





__attribute__ ((visibility ("default"))) int _PyTime_GetSystemClockWithInfo(
    _PyTime_t *t,
    _Py_clock_info_t *info);
# 274 "/data/data/com.termux/files/usr/include/python3.12/cpython/pytime.h"
__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_GetMonotonicClock(void);
# 284 "/data/data/com.termux/files/usr/include/python3.12/cpython/pytime.h"
__attribute__ ((visibility ("default"))) int _PyTime_GetMonotonicClockWithInfo(
    _PyTime_t *t,
    _Py_clock_info_t *info);




__attribute__ ((visibility ("default"))) int _PyTime_localtime(time_t t, struct tm *tm);



__attribute__ ((visibility ("default"))) int _PyTime_gmtime(time_t t, struct tm *tm);
# 305 "/data/data/com.termux/files/usr/include/python3.12/cpython/pytime.h"
__attribute__ ((visibility ("default"))) _PyTime_t _PyTime_GetPerfCounter(void);







__attribute__ ((visibility ("default"))) int _PyTime_GetPerfCounterWithInfo(
    _PyTime_t *t,
    _Py_clock_info_t *info);




__attribute__ ((visibility ("default"))) _PyTime_t _PyDeadline_Init(_PyTime_t timeout);



__attribute__ ((visibility ("default"))) _PyTime_t _PyDeadline_Get(_PyTime_t deadline);


}
# 88 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/codecs.h" 1



extern "C" {
# 26 "/data/data/com.termux/files/usr/include/python3.12/codecs.h"
__attribute__ ((visibility ("default"))) int PyCodec_Register(
       PyObject *search_function
       );





__attribute__ ((visibility ("default"))) int PyCodec_Unregister(
       PyObject *search_function
       );
# 57 "/data/data/com.termux/files/usr/include/python3.12/codecs.h"
__attribute__ ((visibility ("default"))) PyObject * _PyCodec_Lookup(
       const char *encoding
       );

__attribute__ ((visibility ("default"))) int _PyCodec_Forget(
       const char *encoding
       );
# 73 "/data/data/com.termux/files/usr/include/python3.12/codecs.h"
__attribute__ ((visibility ("default"))) int PyCodec_KnownEncoding(
       const char *encoding
       );
# 87 "/data/data/com.termux/files/usr/include/python3.12/codecs.h"
__attribute__ ((visibility ("default"))) PyObject * PyCodec_Encode(
       PyObject *object,
       const char *encoding,
       const char *errors
       );
# 103 "/data/data/com.termux/files/usr/include/python3.12/codecs.h"
__attribute__ ((visibility ("default"))) PyObject * PyCodec_Decode(
       PyObject *object,
       const char *encoding,
       const char *errors
       );
# 123 "/data/data/com.termux/files/usr/include/python3.12/codecs.h"
__attribute__ ((visibility ("default"))) PyObject * _PyCodec_LookupTextEncoding(
       const char *encoding,
       const char *alternate_command
       );

__attribute__ ((visibility ("default"))) PyObject * _PyCodec_EncodeText(
       PyObject *object,
       const char *encoding,
       const char *errors
       );

__attribute__ ((visibility ("default"))) PyObject * _PyCodec_DecodeText(
       PyObject *object,
       const char *encoding,
       const char *errors
       );




__attribute__ ((visibility ("default"))) PyObject * _PyCodecInfo_GetIncrementalDecoder(
       PyObject *codec_info,
       const char *errors
       );

__attribute__ ((visibility ("default"))) PyObject * _PyCodecInfo_GetIncrementalEncoder(
       PyObject *codec_info,
       const char *errors
       );
# 166 "/data/data/com.termux/files/usr/include/python3.12/codecs.h"
__attribute__ ((visibility ("default"))) PyObject * PyCodec_Encoder(
       const char *encoding
       );



__attribute__ ((visibility ("default"))) PyObject * PyCodec_Decoder(
       const char *encoding
       );



__attribute__ ((visibility ("default"))) PyObject * PyCodec_IncrementalEncoder(
       const char *encoding,
       const char *errors
       );



__attribute__ ((visibility ("default"))) PyObject * PyCodec_IncrementalDecoder(
       const char *encoding,
       const char *errors
       );



__attribute__ ((visibility ("default"))) PyObject * PyCodec_StreamReader(
       const char *encoding,
       PyObject *stream,
       const char *errors
       );



__attribute__ ((visibility ("default"))) PyObject * PyCodec_StreamWriter(
       const char *encoding,
       PyObject *stream,
       const char *errors
       );
# 214 "/data/data/com.termux/files/usr/include/python3.12/codecs.h"
__attribute__ ((visibility ("default"))) int PyCodec_RegisterError(const char *name, PyObject *error);




__attribute__ ((visibility ("default"))) PyObject * PyCodec_LookupError(const char *name);


__attribute__ ((visibility ("default"))) PyObject * PyCodec_StrictErrors(PyObject *exc);


__attribute__ ((visibility ("default"))) PyObject * PyCodec_IgnoreErrors(PyObject *exc);


__attribute__ ((visibility ("default"))) PyObject * PyCodec_ReplaceErrors(PyObject *exc);


__attribute__ ((visibility ("default"))) PyObject * PyCodec_XMLCharRefReplaceErrors(PyObject *exc);


__attribute__ ((visibility ("default"))) PyObject * PyCodec_BackslashReplaceErrors(PyObject *exc);



__attribute__ ((visibility ("default"))) PyObject * PyCodec_NameReplaceErrors(PyObject *exc);



extern __attribute__ ((visibility ("default"))) const char * Py_hexdigits;



}
# 89 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pythread.h" 1



typedef void *PyThread_type_lock;


extern "C" {




typedef enum PyLockStatus {
    PY_LOCK_FAILURE = 0,
    PY_LOCK_ACQUIRED = 1,
    PY_LOCK_INTR
} PyLockStatus;

__attribute__ ((visibility ("default"))) void PyThread_init_thread(void);
__attribute__ ((visibility ("default"))) unsigned long PyThread_start_new_thread(void (*)(void *), void *);
__attribute__ ((visibility ("default"))) void __attribute__((__noreturn__)) PyThread_exit_thread(void);
__attribute__ ((visibility ("default"))) unsigned long PyThread_get_thread_ident(void);





__attribute__ ((visibility ("default"))) unsigned long PyThread_get_thread_native_id(void);


__attribute__ ((visibility ("default"))) PyThread_type_lock PyThread_allocate_lock(void);
__attribute__ ((visibility ("default"))) void PyThread_free_lock(PyThread_type_lock);
__attribute__ ((visibility ("default"))) int PyThread_acquire_lock(PyThread_type_lock, int);
# 77 "/data/data/com.termux/files/usr/include/python3.12/pythread.h"
__attribute__ ((visibility ("default"))) PyLockStatus PyThread_acquire_lock_timed(PyThread_type_lock,
                                                     long long microseconds,
                                                     int intr_flag);

__attribute__ ((visibility ("default"))) void PyThread_release_lock(PyThread_type_lock);

__attribute__ ((visibility ("default"))) size_t PyThread_get_stacksize(void);
__attribute__ ((visibility ("default"))) int PyThread_set_stacksize(size_t);


__attribute__ ((visibility ("default"))) PyObject* PyThread_GetInfo(void);
# 98 "/data/data/com.termux/files/usr/include/python3.12/pythread.h"
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) int PyThread_create_key(void);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PyThread_delete_key(int key);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) int PyThread_set_key_value(int key,
                                                          void *value);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void * PyThread_get_key_value(int key);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PyThread_delete_key_value(int key);


__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PyThread_ReInitTLS(void);






typedef struct _Py_tss_t Py_tss_t;

__attribute__ ((visibility ("default"))) Py_tss_t * PyThread_tss_alloc(void);
__attribute__ ((visibility ("default"))) void PyThread_tss_free(Py_tss_t *key);


__attribute__ ((visibility ("default"))) int PyThread_tss_is_created(Py_tss_t *key);
__attribute__ ((visibility ("default"))) int PyThread_tss_create(Py_tss_t *key);
__attribute__ ((visibility ("default"))) void PyThread_tss_delete(Py_tss_t *key);
__attribute__ ((visibility ("default"))) int PyThread_tss_set(Py_tss_t *key, void *value);
__attribute__ ((visibility ("default"))) void * PyThread_tss_get(Py_tss_t *key);




# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pythread.h" 1
# 11 "/data/data/com.termux/files/usr/include/python3.12/cpython/pythread.h"
__attribute__ ((visibility ("default"))) int _PyThread_at_fork_reinit(PyThread_type_lock *lock);




# 1 "/data/data/com.termux/files/usr/include/pthread.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sched.h" 1 3 4
# 37 "/data/data/com.termux/files/usr/include/sched.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/sched.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/linux/sched.h" 3 4
struct clone_args {
  __u64 __attribute__((aligned(8))) flags;
  __u64 __attribute__((aligned(8))) pidfd;
  __u64 __attribute__((aligned(8))) child_tid;
  __u64 __attribute__((aligned(8))) parent_tid;
  __u64 __attribute__((aligned(8))) exit_signal;
  __u64 __attribute__((aligned(8))) stack;
  __u64 __attribute__((aligned(8))) stack_size;
  __u64 __attribute__((aligned(8))) tls;
  __u64 __attribute__((aligned(8))) set_tid;
  __u64 __attribute__((aligned(8))) set_tid_size;
  __u64 __attribute__((aligned(8))) cgroup;
};
# 38 "/data/data/com.termux/files/usr/include/sched.h" 2 3 4


extern "C" {
# 97 "/data/data/com.termux/files/usr/include/sched.h" 3 4
struct sched_param {
  int sched_priority;
};







int sched_setscheduler(pid_t __pid, int __policy, const struct sched_param* _Nonnull __param);
# 116 "/data/data/com.termux/files/usr/include/sched.h" 3 4
int sched_getscheduler(pid_t __pid);







int sched_yield(void);







int sched_get_priority_max(int __policy);







int sched_get_priority_min(int __policy);







int sched_setparam(pid_t __pid, const struct sched_param* _Nonnull __param);







int sched_getparam(pid_t __pid, struct sched_param* _Nonnull __param);







int sched_rr_get_interval(pid_t __pid, struct timespec* _Nonnull __quantum);
# 175 "/data/data/com.termux/files/usr/include/sched.h" 3 4
int clone(int (* _Null_unspecified __fn)(void* _Null_unspecified ), void* _Null_unspecified __child_stack, int __flags, void* _Nullable __arg, ...);







int unshare(int __flags);







int setns(int __fd, int __ns_type);
# 200 "/data/data/com.termux/files/usr/include/sched.h" 3 4
int sched_getcpu(void);
# 217 "/data/data/com.termux/files/usr/include/sched.h" 3 4
typedef struct {
  unsigned long int __bits[ 1024 / (8 * sizeof(unsigned long int)) ];
} cpu_set_t;







int sched_setaffinity(pid_t __pid, size_t __set_size, const cpu_set_t* _Nonnull __set);







int sched_getaffinity(pid_t __pid, size_t __set_size, cpu_set_t* _Nonnull __set);
# 307 "/data/data/com.termux/files/usr/include/sched.h" 3 4
int __sched_cpucount(size_t __set_size, const cpu_set_t* _Nonnull __set);
# 378 "/data/data/com.termux/files/usr/include/sched.h" 3 4
cpu_set_t* _Nullable __sched_cpualloc(size_t __count);






void __sched_cpufree(cpu_set_t* _Nonnull __set);



}
# 40 "/data/data/com.termux/files/usr/include/pthread.h" 2 3 4




extern "C" {

enum {
  PTHREAD_MUTEX_NORMAL = 0,
  PTHREAD_MUTEX_RECURSIVE = 1,
  PTHREAD_MUTEX_ERRORCHECK = 2,

  PTHREAD_MUTEX_ERRORCHECK_NP = PTHREAD_MUTEX_ERRORCHECK,
  PTHREAD_MUTEX_RECURSIVE_NP = PTHREAD_MUTEX_RECURSIVE,

  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL
};
# 66 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
enum {
  PTHREAD_RWLOCK_PREFER_READER_NP = 0,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 1,
};
# 98 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_atfork(void (* _Nullable __prepare)(void), void (* _Nullable __parent)(void), void (* _Nullable __child)(void));

int pthread_attr_destroy(pthread_attr_t* _Nonnull __attr);
int pthread_attr_getdetachstate(const pthread_attr_t* _Nonnull __attr, int* _Nonnull __state);
int pthread_attr_getguardsize(const pthread_attr_t* _Nonnull __attr, size_t* _Nonnull __size);





int pthread_attr_getschedparam(const pthread_attr_t* _Nonnull __attr, struct sched_param* _Nonnull __param);
int pthread_attr_getschedpolicy(const pthread_attr_t* _Nonnull __attr, int* _Nonnull __policy);
int pthread_attr_getscope(const pthread_attr_t* _Nonnull __attr, int* _Nonnull __scope);
int pthread_attr_getstack(const pthread_attr_t* _Nonnull __attr, void* _Nullable * _Nonnull __addr, size_t* _Nonnull __size);
int pthread_attr_getstacksize(const pthread_attr_t* _Nonnull __attr, size_t* _Nonnull __size);
int pthread_attr_init(pthread_attr_t* _Nonnull __attr);
int pthread_attr_setdetachstate(pthread_attr_t* _Nonnull __attr, int __state);
int pthread_attr_setguardsize(pthread_attr_t* _Nonnull __attr, size_t __size);





int pthread_attr_setschedparam(pthread_attr_t* _Nonnull __attr, const struct sched_param* _Nonnull __param);
int pthread_attr_setschedpolicy(pthread_attr_t* _Nonnull __attr, int __policy);
int pthread_attr_setscope(pthread_attr_t* _Nonnull __attr, int __scope);
int pthread_attr_setstack(pthread_attr_t* _Nonnull __attr, void* _Nonnull __addr, size_t __size);
int pthread_attr_setstacksize(pthread_attr_t* _Nonnull __addr, size_t __size);

int pthread_condattr_destroy(pthread_condattr_t* _Nonnull __attr);
int pthread_condattr_getclock(const pthread_condattr_t* _Nonnull __attr, clockid_t* _Nonnull __clock);
int pthread_condattr_getpshared(const pthread_condattr_t* _Nonnull __attr, int* _Nonnull __shared);
int pthread_condattr_init(pthread_condattr_t* _Nonnull __attr);
int pthread_condattr_setclock(pthread_condattr_t* _Nonnull __attr, clockid_t __clock);
int pthread_condattr_setpshared(pthread_condattr_t* _Nonnull __attr, int __shared);

int pthread_cond_broadcast(pthread_cond_t* _Nonnull __cond);






int pthread_cond_destroy(pthread_cond_t* _Nonnull __cond);
int pthread_cond_init(pthread_cond_t* _Nonnull __cond, const pthread_condattr_t* _Nullable __attr);
int pthread_cond_signal(pthread_cond_t* _Nonnull __cond);
int pthread_cond_timedwait(pthread_cond_t* _Nonnull __cond, pthread_mutex_t* _Nonnull __mutex, const struct timespec* _Nullable __timeout);
# 161 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_cond_wait(pthread_cond_t* _Nonnull __cond, pthread_mutex_t* _Nonnull __mutex);








#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wbuiltin-requires-header"

int pthread_create(pthread_t* _Nonnull __pthread_ptr, pthread_attr_t const* _Nullable __attr, void* _Nonnull (* _Nonnull __start_routine)(void* _Nonnull), void* _Nullable);

#pragma clang diagnostic pop


int pthread_detach(pthread_t __pthread);
void pthread_exit(void* _Nullable __return_value) __attribute__((__noreturn__));

int pthread_equal(pthread_t __lhs, pthread_t __rhs);

int pthread_getattr_np(pthread_t __pthread, pthread_attr_t* _Nonnull __attr);

int pthread_getcpuclockid(pthread_t __pthread, clockid_t* _Nonnull __clock);

void* _Nullable pthread_getspecific(pthread_key_t __key);

pid_t pthread_gettid_np(pthread_t __pthread);

int pthread_join(pthread_t __pthread, void* _Nullable * _Nullable __return_value_ptr);
# 208 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_key_create(pthread_key_t* _Nonnull __key_ptr, void (* _Nullable __key_destructor)(void* _Nullable));







int pthread_key_delete(pthread_key_t __key);

int pthread_mutexattr_destroy(pthread_mutexattr_t* _Nonnull __attr);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t* _Nonnull __attr, int* _Nonnull __shared);
int pthread_mutexattr_gettype(const pthread_mutexattr_t* _Nonnull __attr, int* _Nonnull __type);





int pthread_mutexattr_init(pthread_mutexattr_t* _Nonnull __attr);
int pthread_mutexattr_setpshared(pthread_mutexattr_t* _Nonnull __attr, int __shared);
int pthread_mutexattr_settype(pthread_mutexattr_t* _Nonnull __attr, int __type);
# 241 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_mutex_destroy(pthread_mutex_t* _Nonnull __mutex);
int pthread_mutex_init(pthread_mutex_t* _Nonnull __mutex, const pthread_mutexattr_t* _Nullable __attr);
int pthread_mutex_lock(pthread_mutex_t* _Nonnull __mutex);
int pthread_mutex_timedlock(pthread_mutex_t* _Nonnull __mutex, const struct timespec* _Nullable __timeout);
# 261 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_mutex_trylock(pthread_mutex_t* _Nonnull __mutex);
int pthread_mutex_unlock(pthread_mutex_t* _Nonnull __mutex);

int pthread_once(pthread_once_t* _Nonnull __once, void (* _Nonnull __init_routine)(void));

int pthread_rwlockattr_init(pthread_rwlockattr_t* _Nonnull __attr);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t* _Nonnull __attr);
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t* _Nonnull __attr, int* _Nonnull __shared);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t* _Nonnull __attr, int __shared);


int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t* _Nonnull __attr, int* _Nonnull __kind)
  __attribute__((__availability__(android,strict,introduced=23 )));
int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t* _Nonnull __attr, int __kind) __attribute__((__availability__(android,strict,introduced=23 )));
# 286 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_rwlock_destroy(pthread_rwlock_t* _Nonnull __rwlock);
int pthread_rwlock_init(pthread_rwlock_t* _Nonnull __rwlock, const pthread_rwlockattr_t* _Nullable __attr);
int pthread_rwlock_rdlock(pthread_rwlock_t* _Nonnull __rwlock);
int pthread_rwlock_timedrdlock(pthread_rwlock_t* _Nonnull __rwlock, const struct timespec* _Nullable __timeout);







int pthread_rwlock_timedwrlock(pthread_rwlock_t* _Nonnull __rwlock, const struct timespec* _Nullable __timeout);







int pthread_rwlock_tryrdlock(pthread_rwlock_t* _Nonnull __rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t* _Nonnull __rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t* _Nonnull __rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t* _Nonnull __rwlock);


int pthread_barrierattr_init(pthread_barrierattr_t* _Nonnull __attr) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_barrierattr_destroy(pthread_barrierattr_t* _Nonnull __attr) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_barrierattr_getpshared(const pthread_barrierattr_t* _Nonnull __attr, int* _Nonnull __shared) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_barrierattr_setpshared(pthread_barrierattr_t* _Nonnull __attr, int __shared) __attribute__((__availability__(android,strict,introduced=24 )));



int pthread_barrier_init(pthread_barrier_t* _Nonnull __barrier, const pthread_barrierattr_t* _Nullable __attr, unsigned __count) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_barrier_destroy(pthread_barrier_t* _Nonnull __barrier) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_barrier_wait(pthread_barrier_t* _Nonnull __barrier) __attribute__((__availability__(android,strict,introduced=24 )));



int pthread_spin_destroy(pthread_spinlock_t* _Nonnull __spinlock) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_spin_init(pthread_spinlock_t* _Nonnull __spinlock, int __shared) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_spin_lock(pthread_spinlock_t* _Nonnull __spinlock) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_spin_trylock(pthread_spinlock_t* _Nonnull __spinlock) __attribute__((__availability__(android,strict,introduced=24 )));
int pthread_spin_unlock(pthread_spinlock_t* _Nonnull __spinlock) __attribute__((__availability__(android,strict,introduced=24 )));


pthread_t pthread_self(void) __attribute__((__const__));
# 341 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_setname_np(pthread_t __pthread, const char* _Nonnull __name);
# 354 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_setschedparam(pthread_t __pthread, int __policy, const struct sched_param* _Nonnull __param);







int pthread_getschedparam(pthread_t __pthread, int* _Nonnull __policy, struct sched_param* _Nonnull __param);
# 383 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
int pthread_setspecific(pthread_key_t __key, const void* _Nullable __value);

typedef void (* _Nullable __pthread_cleanup_func_t)(void* _Nullable);

typedef struct __pthread_cleanup_t {
  struct __pthread_cleanup_t* _Nullable __cleanup_prev;
  __pthread_cleanup_func_t _Nullable __cleanup_routine;
  void* _Nullable __cleanup_arg;
} __pthread_cleanup_t;

void __pthread_cleanup_push(__pthread_cleanup_t* _Nonnull c, __pthread_cleanup_func_t _Nullable, void* _Nullable);
void __pthread_cleanup_pop(__pthread_cleanup_t* _Nonnull, int);
# 411 "/data/data/com.termux/files/usr/include/pthread.h" 3 4
}
# 17 "/data/data/com.termux/files/usr/include/python3.12/cpython/pythread.h" 2
# 34 "/data/data/com.termux/files/usr/include/python3.12/cpython/pythread.h"
struct _Py_tss_t {
    int _is_initialized;
    pthread_key_t _key;
};
# 129 "/data/data/com.termux/files/usr/include/python3.12/pythread.h" 2




}
# 90 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/context.h" 1




extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PyContext_Type;
typedef struct _pycontextobject PyContext;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyContextVar_Type;
typedef struct _pycontextvarobject PyContextVar;

extern __attribute__ ((visibility ("default"))) PyTypeObject PyContextToken_Type;
typedef struct _pycontexttokenobject PyContextToken;







__attribute__ ((visibility ("default"))) PyObject * PyContext_New(void);
__attribute__ ((visibility ("default"))) PyObject * PyContext_Copy(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * PyContext_CopyCurrent(void);

__attribute__ ((visibility ("default"))) int PyContext_Enter(PyObject *);
__attribute__ ((visibility ("default"))) int PyContext_Exit(PyObject *);






__attribute__ ((visibility ("default"))) PyObject * PyContextVar_New(
    const char *name, PyObject *default_value);
# 54 "/data/data/com.termux/files/usr/include/python3.12/cpython/context.h"
__attribute__ ((visibility ("default"))) int PyContextVar_Get(
    PyObject *var, PyObject *default_value, PyObject **value);





__attribute__ ((visibility ("default"))) PyObject * PyContextVar_Set(PyObject *var, PyObject *value);





__attribute__ ((visibility ("default"))) int PyContextVar_Reset(PyObject *var, PyObject *token);



__attribute__ ((visibility ("default"))) PyObject * _PyContext_NewHamtForTests(void);



}
# 91 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/modsupport.h" 1




extern "C" {




# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stdarg.h" 1 3
# 11 "/data/data/com.termux/files/usr/include/python3.12/modsupport.h" 2
# 26 "/data/data/com.termux/files/usr/include/python3.12/modsupport.h"
__attribute__ ((visibility ("default"))) int _PyArg_Parse_SizeT(PyObject *, const char *, ...);
__attribute__ ((visibility ("default"))) int _PyArg_ParseTuple_SizeT(PyObject *, const char *, ...);
__attribute__ ((visibility ("default"))) int _PyArg_ParseTupleAndKeywords_SizeT(PyObject *, PyObject *,
                                                  const char *, char **, ...);
__attribute__ ((visibility ("default"))) int _PyArg_VaParse_SizeT(PyObject *, const char *, va_list);
__attribute__ ((visibility ("default"))) int _PyArg_VaParseTupleAndKeywords_SizeT(PyObject *, PyObject *,
                                                  const char *, char **, va_list);

__attribute__ ((visibility ("default"))) int PyArg_ValidateKeywordArguments(PyObject *);
__attribute__ ((visibility ("default"))) int PyArg_UnpackTuple(PyObject *, const char *, Py_ssize_t, Py_ssize_t, ...);
__attribute__ ((visibility ("default"))) PyObject * _Py_BuildValue_SizeT(const char *, ...);
__attribute__ ((visibility ("default"))) PyObject * _Py_BuildValue_SizeT(const char *, ...);


__attribute__ ((visibility ("default"))) PyObject * _Py_VaBuildValue_SizeT(const char *, va_list);





__attribute__ ((visibility ("default"))) int PyModule_AddObjectRef(PyObject *mod, const char *name, PyObject *value);




__attribute__ ((visibility ("default"))) int PyModule_AddObject(PyObject *mod, const char *, PyObject *value);

__attribute__ ((visibility ("default"))) int PyModule_AddIntConstant(PyObject *, const char *, long);
__attribute__ ((visibility ("default"))) int PyModule_AddStringConstant(PyObject *, const char *, const char *);



__attribute__ ((visibility ("default"))) int PyModule_AddType(PyObject *module, PyTypeObject *type);







__attribute__ ((visibility ("default"))) int PyModule_SetDocString(PyObject *, const char *);
__attribute__ ((visibility ("default"))) int PyModule_AddFunctions(PyObject *, PyMethodDef *);
__attribute__ ((visibility ("default"))) int PyModule_ExecDef(PyObject *module, PyModuleDef *def);
# 133 "/data/data/com.termux/files/usr/include/python3.12/modsupport.h"
__attribute__ ((visibility ("default"))) PyObject * PyModule_Create2(PyModuleDef*, int apiver);
# 145 "/data/data/com.termux/files/usr/include/python3.12/modsupport.h"
__attribute__ ((visibility ("default"))) PyObject * PyModule_FromDefAndSpec2(PyModuleDef *def,
                                                PyObject *spec,
                                                int module_api_version);
# 161 "/data/data/com.termux/files/usr/include/python3.12/modsupport.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/modsupport.h" 1
# 19 "/data/data/com.termux/files/usr/include/python3.12/cpython/modsupport.h"
__attribute__ ((visibility ("default"))) int _PyArg_UnpackStack(
    PyObject *const *args,
    Py_ssize_t nargs,
    const char *name,
    Py_ssize_t min,
    Py_ssize_t max,
    ...);

__attribute__ ((visibility ("default"))) int _PyArg_NoKeywords(const char *funcname, PyObject *kwargs);
__attribute__ ((visibility ("default"))) int _PyArg_NoKwnames(const char *funcname, PyObject *kwnames);
__attribute__ ((visibility ("default"))) int _PyArg_NoPositional(const char *funcname, PyObject *args);
# 39 "/data/data/com.termux/files/usr/include/python3.12/cpython/modsupport.h"
__attribute__ ((visibility ("default"))) void _PyArg_BadArgument(const char *, const char *, const char *, PyObject *);
__attribute__ ((visibility ("default"))) int _PyArg_CheckPositional(const char *, Py_ssize_t,
                                       Py_ssize_t, Py_ssize_t);




__attribute__ ((visibility ("default"))) PyObject ** _Py_VaBuildStack_SizeT(
    PyObject **small_stack,
    Py_ssize_t small_stack_len,
    const char *format,
    va_list va,
    Py_ssize_t *p_nargs);

typedef struct _PyArg_Parser {
    int initialized;
    const char *format;
    const char * const *keywords;
    const char *fname;
    const char *custom_msg;
    int pos;
    int min;
    int max;
    PyObject *kwtuple;
    struct _PyArg_Parser *next;
} _PyArg_Parser;
# 73 "/data/data/com.termux/files/usr/include/python3.12/cpython/modsupport.h"
__attribute__ ((visibility ("default"))) int _PyArg_ParseTupleAndKeywordsFast_SizeT(PyObject *, PyObject *,
                                                 struct _PyArg_Parser *, ...);
__attribute__ ((visibility ("default"))) int _PyArg_ParseStack_SizeT(
    PyObject *const *args,
    Py_ssize_t nargs,
    const char *format,
    ...);
__attribute__ ((visibility ("default"))) int _PyArg_ParseStackAndKeywords_SizeT(
    PyObject *const *args,
    Py_ssize_t nargs,
    PyObject *kwnames,
    struct _PyArg_Parser *,
    ...);
__attribute__ ((visibility ("default"))) int _PyArg_VaParseTupleAndKeywordsFast_SizeT(PyObject *, PyObject *,
                                                   struct _PyArg_Parser *, va_list);
__attribute__ ((visibility ("default"))) PyObject * const * _PyArg_UnpackKeywords(
        PyObject *const *args, Py_ssize_t nargs,
        PyObject *kwargs, PyObject *kwnames,
        struct _PyArg_Parser *parser,
        int minpos, int maxpos, int minkw,
        PyObject **buf);

__attribute__ ((visibility ("default"))) PyObject * const * _PyArg_UnpackKeywordsWithVararg(
        PyObject *const *args, Py_ssize_t nargs,
        PyObject *kwargs, PyObject *kwnames,
        struct _PyArg_Parser *parser,
        int minpos, int maxpos, int minkw,
        int vararg, PyObject **buf);







__attribute__ ((visibility ("default"))) PyObject * _PyModule_CreateInitialized(PyModuleDef*, int apiver);
__attribute__ ((visibility ("default"))) int _PyModule_Add(PyObject *, const char *, PyObject *);
# 162 "/data/data/com.termux/files/usr/include/python3.12/modsupport.h" 2




}
# 92 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/compile.h" 1



extern "C" {
# 15 "/data/data/com.termux/files/usr/include/python3.12/compile.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/compile.h" 1
# 26 "/data/data/com.termux/files/usr/include/python3.12/cpython/compile.h"
typedef struct {
    int cf_flags;
    int cf_feature_version;
} PyCompilerFlags;





typedef struct {
    int lineno;
    int end_lineno;
    int col_offset;
    int end_col_offset;
} _PyCompilerSrcLocation;
# 51 "/data/data/com.termux/files/usr/include/python3.12/cpython/compile.h"
typedef struct {
    int ff_features;
    _PyCompilerSrcLocation ff_location;
} PyFutureFeatures;
# 68 "/data/data/com.termux/files/usr/include/python3.12/cpython/compile.h"
__attribute__ ((visibility ("default"))) int PyCompile_OpcodeStackEffect(int opcode, int oparg);
__attribute__ ((visibility ("default"))) int PyCompile_OpcodeStackEffectWithJump(int opcode, int oparg, int jump);
# 16 "/data/data/com.termux/files/usr/include/python3.12/compile.h" 2




}
# 93 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pythonrun.h" 1






extern "C" {


__attribute__ ((visibility ("default"))) PyObject * Py_CompileString(const char *, const char *, int);

__attribute__ ((visibility ("default"))) void PyErr_Print(void);
__attribute__ ((visibility ("default"))) void PyErr_PrintEx(int);
__attribute__ ((visibility ("default"))) void PyErr_Display(PyObject *, PyObject *, PyObject *);


__attribute__ ((visibility ("default"))) void PyErr_DisplayException(PyObject *);




extern __attribute__ ((visibility ("default"))) int (*PyOS_InputHook)(void);
# 42 "/data/data/com.termux/files/usr/include/python3.12/pythonrun.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pythonrun.h" 1




__attribute__ ((visibility ("default"))) int PyRun_SimpleStringFlags(const char *, PyCompilerFlags *);
__attribute__ ((visibility ("default"))) int _PyRun_SimpleFileObject(
    FILE *fp,
    PyObject *filename,
    int closeit,
    PyCompilerFlags *flags);
__attribute__ ((visibility ("default"))) int PyRun_AnyFileExFlags(
    FILE *fp,
    const char *filename,
    int closeit,
    PyCompilerFlags *flags);
__attribute__ ((visibility ("default"))) int _PyRun_AnyFileObject(
    FILE *fp,
    PyObject *filename,
    int closeit,
    PyCompilerFlags *flags);
__attribute__ ((visibility ("default"))) int PyRun_SimpleFileExFlags(
    FILE *fp,
    const char *filename,
    int closeit,
    PyCompilerFlags *flags);
__attribute__ ((visibility ("default"))) int PyRun_InteractiveOneFlags(
    FILE *fp,
    const char *filename,
    PyCompilerFlags *flags);
__attribute__ ((visibility ("default"))) int PyRun_InteractiveOneObject(
    FILE *fp,
    PyObject *filename,
    PyCompilerFlags *flags);
__attribute__ ((visibility ("default"))) int PyRun_InteractiveLoopFlags(
    FILE *fp,
    const char *filename,
    PyCompilerFlags *flags);
__attribute__ ((visibility ("default"))) int _PyRun_InteractiveLoopObject(
    FILE *fp,
    PyObject *filename,
    PyCompilerFlags *flags);


__attribute__ ((visibility ("default"))) PyObject * PyRun_StringFlags(const char *, int, PyObject *,
                                         PyObject *, PyCompilerFlags *);

__attribute__ ((visibility ("default"))) PyObject * PyRun_FileExFlags(
    FILE *fp,
    const char *filename,
    int start,
    PyObject *globals,
    PyObject *locals,
    int closeit,
    PyCompilerFlags *flags);


__attribute__ ((visibility ("default"))) PyObject * Py_CompileStringExFlags(
    const char *str,
    const char *filename,
    int start,
    PyCompilerFlags *flags,
    int optimize);
__attribute__ ((visibility ("default"))) PyObject * Py_CompileStringObject(
    const char *str,
    PyObject *filename, int start,
    PyCompilerFlags *flags,
    int optimize);





__attribute__ ((visibility ("default"))) const char * _Py_SourceAsString(
    PyObject *cmd,
    const char *funcname,
    const char *what,
    PyCompilerFlags *cf,
    PyObject **cmd_copy);






__attribute__ ((visibility ("default"))) PyObject * PyRun_String(const char *str, int s, PyObject *g, PyObject *l);
__attribute__ ((visibility ("default"))) int PyRun_AnyFile(FILE *fp, const char *name);
__attribute__ ((visibility ("default"))) int PyRun_AnyFileEx(FILE *fp, const char *name, int closeit);
__attribute__ ((visibility ("default"))) int PyRun_AnyFileFlags(FILE *, const char *, PyCompilerFlags *);
__attribute__ ((visibility ("default"))) int PyRun_SimpleString(const char *s);
__attribute__ ((visibility ("default"))) int PyRun_SimpleFile(FILE *f, const char *p);
__attribute__ ((visibility ("default"))) int PyRun_SimpleFileEx(FILE *f, const char *p, int c);
__attribute__ ((visibility ("default"))) int PyRun_InteractiveOne(FILE *f, const char *p);
__attribute__ ((visibility ("default"))) int PyRun_InteractiveLoop(FILE *f, const char *p);
__attribute__ ((visibility ("default"))) PyObject * PyRun_File(FILE *fp, const char *p, int s, PyObject *g, PyObject *l);
__attribute__ ((visibility ("default"))) PyObject * PyRun_FileEx(FILE *fp, const char *p, int s, PyObject *g, PyObject *l, int c);
__attribute__ ((visibility ("default"))) PyObject * PyRun_FileFlags(FILE *fp, const char *p, int s, PyObject *g, PyObject *l, PyCompilerFlags *flags);
# 119 "/data/data/com.termux/files/usr/include/python3.12/cpython/pythonrun.h"
__attribute__ ((visibility ("default"))) char * PyOS_Readline(FILE *, FILE *, const char *);
extern __attribute__ ((visibility ("default"))) PyThreadState* _PyOS_ReadlineTState;
extern __attribute__ ((visibility ("default"))) char *(*PyOS_ReadlineFunctionPointer)(FILE *, FILE *, const char *);
# 43 "/data/data/com.termux/files/usr/include/python3.12/pythonrun.h" 2




}
# 94 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pylifecycle.h" 1






extern "C" {




__attribute__ ((visibility ("default"))) void Py_Initialize(void);
__attribute__ ((visibility ("default"))) void Py_InitializeEx(int);
__attribute__ ((visibility ("default"))) void Py_Finalize(void);

__attribute__ ((visibility ("default"))) int Py_FinalizeEx(void);

__attribute__ ((visibility ("default"))) int Py_IsInitialized(void);


__attribute__ ((visibility ("default"))) PyThreadState * Py_NewInterpreter(void);
__attribute__ ((visibility ("default"))) void Py_EndInterpreter(PyThreadState *);





__attribute__ ((visibility ("default"))) int Py_AtExit(void (*func)(void));

__attribute__ ((visibility ("default"))) void __attribute__((__noreturn__)) Py_Exit(int);


__attribute__ ((visibility ("default"))) int Py_Main(int argc, wchar_t **argv);
__attribute__ ((visibility ("default"))) int Py_BytesMain(int argc, char **argv);


__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void Py_SetProgramName(const wchar_t *);
__attribute__ ((visibility ("default"))) wchar_t * Py_GetProgramName(void);

__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void Py_SetPythonHome(const wchar_t *);
__attribute__ ((visibility ("default"))) wchar_t * Py_GetPythonHome(void);

__attribute__ ((visibility ("default"))) wchar_t * Py_GetProgramFullPath(void);

__attribute__ ((visibility ("default"))) wchar_t * Py_GetPrefix(void);
__attribute__ ((visibility ("default"))) wchar_t * Py_GetExecPrefix(void);
__attribute__ ((visibility ("default"))) wchar_t * Py_GetPath(void);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void Py_SetPath(const wchar_t *);





__attribute__ ((visibility ("default"))) const char * Py_GetVersion(void);
__attribute__ ((visibility ("default"))) const char * Py_GetPlatform(void);
__attribute__ ((visibility ("default"))) const char * Py_GetCopyright(void);
__attribute__ ((visibility ("default"))) const char * Py_GetCompiler(void);
__attribute__ ((visibility ("default"))) const char * Py_GetBuildInfo(void);


typedef void (*PyOS_sighandler_t)(int);
__attribute__ ((visibility ("default"))) PyOS_sighandler_t PyOS_getsig(int);
__attribute__ ((visibility ("default"))) PyOS_sighandler_t PyOS_setsig(int, PyOS_sighandler_t);


extern __attribute__ ((visibility ("default"))) const unsigned long Py_Version;




# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pylifecycle.h" 1






__attribute__ ((visibility ("default"))) int Py_FrozenMain(int argc, char **argv);




__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) int Py_SetStandardStreamEncoding(
    const char *encoding,
    const char *errors);



__attribute__ ((visibility ("default"))) PyStatus Py_PreInitialize(
    const PyPreConfig *src_config);
__attribute__ ((visibility ("default"))) PyStatus Py_PreInitializeFromBytesArgs(
    const PyPreConfig *src_config,
    Py_ssize_t argc,
    char **argv);
__attribute__ ((visibility ("default"))) PyStatus Py_PreInitializeFromArgs(
    const PyPreConfig *src_config,
    Py_ssize_t argc,
    wchar_t **argv);

__attribute__ ((visibility ("default"))) int _Py_IsCoreInitialized(void);




__attribute__ ((visibility ("default"))) PyStatus Py_InitializeFromConfig(
    const PyConfig *config);
__attribute__ ((visibility ("default"))) PyStatus _Py_InitializeMain(void);

__attribute__ ((visibility ("default"))) int Py_RunMain(void);


__attribute__ ((visibility ("default"))) void __attribute__((__noreturn__)) Py_ExitStatusException(PyStatus err);


__attribute__ ((visibility ("default"))) void _Py_RestoreSignals(void);

__attribute__ ((visibility ("default"))) int Py_FdIsInteractive(FILE *, const char *);
__attribute__ ((visibility ("default"))) int _Py_FdIsInteractive(FILE *fp, PyObject *filename);

__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void _Py_SetProgramFullPath(const wchar_t *);

__attribute__ ((visibility ("default"))) const char * _Py_gitidentifier(void);
__attribute__ ((visibility ("default"))) const char * _Py_gitversion(void);

__attribute__ ((visibility ("default"))) int _Py_IsFinalizing(void);
__attribute__ ((visibility ("default"))) int _Py_IsInterpreterFinalizing(PyInterpreterState *interp);


__attribute__ ((visibility ("default"))) int _PyOS_URandom(void *buffer, Py_ssize_t size);
__attribute__ ((visibility ("default"))) int _PyOS_URandomNonblock(void *buffer, Py_ssize_t size);


__attribute__ ((visibility ("default"))) int _Py_CoerceLegacyLocale(int warn);
__attribute__ ((visibility ("default"))) int _Py_LegacyLocaleDetected(int warn);
__attribute__ ((visibility ("default"))) char * _Py_SetLocaleFromEnv(int category);







typedef struct {

    int use_main_obmalloc;
    int allow_fork;
    int allow_exec;
    int allow_threads;
    int allow_daemon_threads;
    int check_multi_interp_extensions;
    int gil;
} PyInterpreterConfig;
# 105 "/data/data/com.termux/files/usr/include/python3.12/cpython/pylifecycle.h"
__attribute__ ((visibility ("default"))) PyStatus Py_NewInterpreterFromConfig(
    PyThreadState **tstate_p,
    const PyInterpreterConfig *config);

typedef void (*atexit_datacallbackfunc)(void *);
__attribute__ ((visibility ("default"))) int _Py_AtExit(
        PyInterpreterState *, atexit_datacallbackfunc, void *);
# 72 "/data/data/com.termux/files/usr/include/python3.12/pylifecycle.h" 2




}
# 95 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/ceval.h" 1





extern "C" {



__attribute__ ((visibility ("default"))) PyObject * PyEval_EvalCode(PyObject *, PyObject *, PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyEval_EvalCodeEx(PyObject *co,
                                         PyObject *globals,
                                         PyObject *locals,
                                         PyObject *const *args, int argc,
                                         PyObject *const *kwds, int kwdc,
                                         PyObject *const *defs, int defc,
                                         PyObject *kwdefs, PyObject *closure);
# 27 "/data/data/com.termux/files/usr/include/python3.12/ceval.h"
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) PyObject * PyEval_CallObjectWithKeywords(
    PyObject *callable,
    PyObject *args,
    PyObject *kwargs);





__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) PyObject * PyEval_CallFunction(
    PyObject *callable, const char *format, ...);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) PyObject * PyEval_CallMethod(
    PyObject *obj, const char *name, const char *format, ...);

__attribute__ ((visibility ("default"))) PyObject * PyEval_GetBuiltins(void);
__attribute__ ((visibility ("default"))) PyObject * PyEval_GetGlobals(void);
__attribute__ ((visibility ("default"))) PyObject * PyEval_GetLocals(void);
__attribute__ ((visibility ("default"))) PyFrameObject * PyEval_GetFrame(void);

__attribute__ ((visibility ("default"))) int Py_AddPendingCall(int (*func)(void *), void *arg);
__attribute__ ((visibility ("default"))) int Py_MakePendingCalls(void);
# 74 "/data/data/com.termux/files/usr/include/python3.12/ceval.h"
__attribute__ ((visibility ("default"))) void Py_SetRecursionLimit(int);
__attribute__ ((visibility ("default"))) int Py_GetRecursionLimit(void);

__attribute__ ((visibility ("default"))) int Py_EnterRecursiveCall(const char *where);
__attribute__ ((visibility ("default"))) void Py_LeaveRecursiveCall(void);

__attribute__ ((visibility ("default"))) const char * PyEval_GetFuncName(PyObject *);
__attribute__ ((visibility ("default"))) const char * PyEval_GetFuncDesc(PyObject *);

__attribute__ ((visibility ("default"))) PyObject * PyEval_EvalFrame(PyFrameObject *);
__attribute__ ((visibility ("default"))) PyObject * PyEval_EvalFrameEx(PyFrameObject *f, int exc);
# 128 "/data/data/com.termux/files/usr/include/python3.12/ceval.h"
__attribute__ ((visibility ("default"))) PyThreadState * PyEval_SaveThread(void);
__attribute__ ((visibility ("default"))) void PyEval_RestoreThread(PyThreadState *);

__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) int PyEval_ThreadsInitialized(void);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PyEval_InitThreads(void);




__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PyEval_AcquireLock(void);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PyEval_ReleaseLock(void);
__attribute__ ((visibility ("default"))) void PyEval_AcquireThread(PyThreadState *tstate);
__attribute__ ((visibility ("default"))) void PyEval_ReleaseThread(PyThreadState *tstate);
# 161 "/data/data/com.termux/files/usr/include/python3.12/ceval.h"
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/ceval.h" 1




__attribute__ ((visibility ("default"))) void PyEval_SetProfile(Py_tracefunc, PyObject *);
__attribute__ ((visibility ("default"))) void PyEval_SetProfileAllThreads(Py_tracefunc, PyObject *);
extern __attribute__ ((visibility ("default"))) int _PyEval_SetProfile(PyThreadState *tstate, Py_tracefunc func, PyObject *arg);
__attribute__ ((visibility ("default"))) void PyEval_SetTrace(Py_tracefunc, PyObject *);
__attribute__ ((visibility ("default"))) void PyEval_SetTraceAllThreads(Py_tracefunc, PyObject *);
__attribute__ ((visibility ("default"))) int _PyEval_SetTrace(PyThreadState *tstate, Py_tracefunc func, PyObject *arg);


__attribute__ ((visibility ("default"))) PyObject * _PyEval_GetBuiltin(PyObject *);
__attribute__ ((visibility ("default"))) PyObject * _PyEval_GetBuiltinId(_Py_Identifier *);



__attribute__ ((visibility ("default"))) int PyEval_MergeCompilerFlags(PyCompilerFlags *cf);

__attribute__ ((visibility ("default"))) PyObject * _PyEval_EvalFrameDefault(PyThreadState *tstate, struct _PyInterpreterFrame *f, int exc);

__attribute__ ((visibility ("default"))) void _PyEval_SetSwitchInterval(unsigned long microseconds);
__attribute__ ((visibility ("default"))) unsigned long _PyEval_GetSwitchInterval(void);

__attribute__ ((visibility ("default"))) int _PyEval_MakePendingCalls(PyThreadState *);

__attribute__ ((visibility ("default"))) Py_ssize_t PyUnstable_Eval_RequestCodeExtraIndex(freefunc);

__attribute__((__deprecated__)) static inline Py_ssize_t
_PyEval_RequestCodeExtraIndex(freefunc f) {
    return PyUnstable_Eval_RequestCodeExtraIndex(f);
}

__attribute__ ((visibility ("default"))) int _PyEval_SliceIndex(PyObject *, Py_ssize_t *);
__attribute__ ((visibility ("default"))) int _PyEval_SliceIndexNotNone(PyObject *, Py_ssize_t *);
# 162 "/data/data/com.termux/files/usr/include/python3.12/ceval.h" 2




}
# 96 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/sysmodule.h" 1






extern "C" {


__attribute__ ((visibility ("default"))) PyObject * PySys_GetObject(const char *);
__attribute__ ((visibility ("default"))) int PySys_SetObject(const char *, PyObject *);

__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PySys_SetArgv(int, wchar_t **);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PySys_SetArgvEx(int, wchar_t **, int);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PySys_SetPath(const wchar_t *);

__attribute__ ((visibility ("default"))) void PySys_WriteStdout(const char *format, ...)
                 __attribute__((format(printf, 1, 2)));
__attribute__ ((visibility ("default"))) void PySys_WriteStderr(const char *format, ...)
                 __attribute__((format(printf, 1, 2)));
__attribute__ ((visibility ("default"))) void PySys_FormatStdout(const char *format, ...);
__attribute__ ((visibility ("default"))) void PySys_FormatStderr(const char *format, ...);

__attribute__ ((visibility ("default"))) void PySys_ResetWarnOptions(void);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PySys_AddWarnOption(const wchar_t *);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PySys_AddWarnOptionUnicode(PyObject *);
__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) int PySys_HasWarnOptions(void);

__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PySys_AddXOption(const wchar_t *);
__attribute__ ((visibility ("default"))) PyObject * PySys_GetXOptions(void);


typedef struct {
    FILE* perf_map;
    PyThread_type_lock map_lock;
} PerfMapState;

__attribute__ ((visibility ("default"))) int PyUnstable_PerfMapState_Init(void);

__attribute__ ((visibility ("default"))) int PyUnstable_WritePerfMapEntry(const void *code_addr, unsigned int code_size, const char *entry_name);

__attribute__ ((visibility ("default"))) void PyUnstable_PerfMapState_Fini(void);




# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/sysmodule.h" 1




__attribute__ ((visibility ("default"))) PyObject * _PySys_GetAttr(PyThreadState *tstate,
                                      PyObject *name);

__attribute__ ((visibility ("default"))) size_t _PySys_GetSizeOf(PyObject *);

typedef int(*Py_AuditHookFunction)(const char *, PyObject *, void *);

__attribute__ ((visibility ("default"))) int PySys_Audit(
    const char *event,
    const char *argFormat,
    ...);
__attribute__ ((visibility ("default"))) int PySys_AddAuditHook(Py_AuditHookFunction, void*);
# 48 "/data/data/com.termux/files/usr/include/python3.12/sysmodule.h" 2




}
# 97 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/osmodule.h" 1






extern "C" {



__attribute__ ((visibility ("default"))) PyObject * PyOS_FSPath(PyObject *path);



}
# 98 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/intrcheck.h" 1



extern "C" {


__attribute__ ((visibility ("default"))) int PyOS_InterruptOccurred(void);


__attribute__ ((visibility ("default"))) void PyOS_BeforeFork(void);
__attribute__ ((visibility ("default"))) void PyOS_AfterFork_Parent(void);
__attribute__ ((visibility ("default"))) void PyOS_AfterFork_Child(void);



__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) void PyOS_AfterFork(void);


__attribute__ ((visibility ("default"))) int _PyOS_IsMainThread(void);
# 28 "/data/data/com.termux/files/usr/include/python3.12/intrcheck.h"
}
# 99 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/import.h" 1





extern "C" {


__attribute__ ((visibility ("default"))) long PyImport_GetMagicNumber(void);
__attribute__ ((visibility ("default"))) const char * PyImport_GetMagicTag(void);
__attribute__ ((visibility ("default"))) PyObject * PyImport_ExecCodeModule(
    const char *name,
    PyObject *co
    );
__attribute__ ((visibility ("default"))) PyObject * PyImport_ExecCodeModuleEx(
    const char *name,
    PyObject *co,
    const char *pathname
    );
__attribute__ ((visibility ("default"))) PyObject * PyImport_ExecCodeModuleWithPathnames(
    const char *name,
    PyObject *co,
    const char *pathname,
    const char *cpathname
    );

__attribute__ ((visibility ("default"))) PyObject * PyImport_ExecCodeModuleObject(
    PyObject *name,
    PyObject *co,
    PyObject *pathname,
    PyObject *cpathname
    );

__attribute__ ((visibility ("default"))) PyObject * PyImport_GetModuleDict(void);

__attribute__ ((visibility ("default"))) PyObject * PyImport_GetModule(PyObject *name);


__attribute__ ((visibility ("default"))) PyObject * PyImport_AddModuleObject(
    PyObject *name
    );

__attribute__ ((visibility ("default"))) PyObject * PyImport_AddModule(
    const char *name
    );
__attribute__ ((visibility ("default"))) PyObject * PyImport_ImportModule(
    const char *name
    );
__attribute__ ((visibility ("default"))) PyObject * PyImport_ImportModuleNoBlock(
    const char *name
    );
__attribute__ ((visibility ("default"))) PyObject * PyImport_ImportModuleLevel(
    const char *name,
    PyObject *globals,
    PyObject *locals,
    PyObject *fromlist,
    int level
    );

__attribute__ ((visibility ("default"))) PyObject * PyImport_ImportModuleLevelObject(
    PyObject *name,
    PyObject *globals,
    PyObject *locals,
    PyObject *fromlist,
    int level
    );





__attribute__ ((visibility ("default"))) PyObject * PyImport_GetImporter(PyObject *path);
__attribute__ ((visibility ("default"))) PyObject * PyImport_Import(PyObject *name);
__attribute__ ((visibility ("default"))) PyObject * PyImport_ReloadModule(PyObject *m);

__attribute__ ((visibility ("default"))) int PyImport_ImportFrozenModuleObject(
    PyObject *name
    );

__attribute__ ((visibility ("default"))) int PyImport_ImportFrozenModule(
    const char *name
    );

__attribute__ ((visibility ("default"))) int PyImport_AppendInittab(
    const char *name,
    PyObject* (*initfunc)(void)
    );



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/import.h" 1




extern "C" __attribute__ ((visibility ("default"))) PyObject* PyInit__imp(void);

__attribute__ ((visibility ("default"))) int _PyImport_IsInitialized(PyInterpreterState *);

__attribute__ ((visibility ("default"))) PyObject * _PyImport_GetModuleId(_Py_Identifier *name);
__attribute__ ((visibility ("default"))) int _PyImport_SetModule(PyObject *name, PyObject *module);
__attribute__ ((visibility ("default"))) int _PyImport_SetModuleString(const char *name, PyObject* module);

__attribute__ ((visibility ("default"))) void _PyImport_AcquireLock(PyInterpreterState *interp);
__attribute__ ((visibility ("default"))) int _PyImport_ReleaseLock(PyInterpreterState *interp);

__attribute__ ((visibility ("default"))) int _PyImport_FixupBuiltin(
    PyObject *mod,
    const char *name,
    PyObject *modules
    );
__attribute__ ((visibility ("default"))) int _PyImport_FixupExtensionObject(PyObject*, PyObject *,
                                               PyObject *, PyObject *);

struct _inittab {
    const char *name;
    PyObject* (*initfunc)(void);
};

extern __attribute__ ((visibility ("default"))) struct _inittab * PyImport_Inittab;
__attribute__ ((visibility ("default"))) int PyImport_ExtendInittab(struct _inittab *newtab);

struct _frozen {
    const char *name;
    const unsigned char *code;
    int size;
    int is_package;
    PyObject *(*get_code)(void);
};




extern __attribute__ ((visibility ("default"))) const struct _frozen * PyImport_FrozenModules;

extern __attribute__ ((visibility ("default"))) PyObject * _PyImport_GetModuleAttr(PyObject *, PyObject *);
extern __attribute__ ((visibility ("default"))) PyObject * _PyImport_GetModuleAttrString(const char *, const char *);
# 92 "/data/data/com.termux/files/usr/include/python3.12/import.h" 2




}
# 100 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/abstract.h" 1





extern "C" {
# 146 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyObject_CallNoArgs(PyObject *func);
# 158 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyObject_Call(PyObject *callable,
                                     PyObject *args, PyObject *kwargs);
# 169 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyObject_CallObject(PyObject *callable,
                                           PyObject *args);
# 182 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * _PyObject_CallFunction_SizeT(PyObject *callable,
                                             const char *format, ...);
# 194 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * _PyObject_CallMethod_SizeT(PyObject *obj,
                                           const char *name,
                                           const char *format, ...);

__attribute__ ((visibility ("default"))) PyObject * _PyObject_CallFunction_SizeT(PyObject *callable,
                                                    const char *format,
                                                    ...);

__attribute__ ((visibility ("default"))) PyObject * _PyObject_CallMethod_SizeT(PyObject *obj,
                                                  const char *name,
                                                  const char *format,
                                                  ...);
# 215 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyObject_CallFunctionObjArgs(PyObject *callable,
                                                    ...);
# 226 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyObject_CallMethodObjArgs(
    PyObject *obj,
    PyObject *name,
    ...);





__attribute__ ((visibility ("default"))) Py_ssize_t PyVectorcall_NARGS(size_t nargsf);



__attribute__ ((visibility ("default"))) PyObject * PyVectorcall_Call(PyObject *callable, PyObject *tuple, PyObject *dict);






__attribute__ ((visibility ("default"))) PyObject * PyObject_Vectorcall(
    PyObject *callable,
    PyObject *const *args,
    size_t nargsf,
    PyObject *kwnames);


__attribute__ ((visibility ("default"))) PyObject * PyObject_VectorcallMethod(
    PyObject *name, PyObject *const *args,
    size_t nargsf, PyObject *kwnames);
# 294 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyObject_Type(PyObject *o);
# 303 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) Py_ssize_t PyObject_Size(PyObject *o);




__attribute__ ((visibility ("default"))) Py_ssize_t PyObject_Length(PyObject *o);






__attribute__ ((visibility ("default"))) PyObject * PyObject_GetItem(PyObject *o, PyObject *key);







__attribute__ ((visibility ("default"))) int PyObject_SetItem(PyObject *o, PyObject *key, PyObject *v);





__attribute__ ((visibility ("default"))) int PyObject_DelItemString(PyObject *o, const char *key);





__attribute__ ((visibility ("default"))) int PyObject_DelItem(PyObject *o, PyObject *key);
# 351 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__((__deprecated__))
__attribute__ ((visibility ("default"))) int PyObject_AsCharBuffer(PyObject *obj,
                                      const char **buffer,
                                      Py_ssize_t *buffer_len);





__attribute__((__deprecated__)) __attribute__ ((visibility ("default"))) int PyObject_CheckReadBuffer(PyObject *obj);







__attribute__((__deprecated__))
__attribute__ ((visibility ("default"))) int PyObject_AsReadBuffer(PyObject *obj,
                                      const void **buffer,
                                      Py_ssize_t *buffer_len);







__attribute__((__deprecated__))
__attribute__ ((visibility ("default"))) int PyObject_AsWriteBuffer(PyObject *obj,
                                       void **buffer,
                                       Py_ssize_t *buffer_len);






__attribute__ ((visibility ("default"))) PyObject * PyObject_Format(PyObject *obj,
                                       PyObject *format_spec);







__attribute__ ((visibility ("default"))) PyObject * PyObject_GetIter(PyObject *);




__attribute__ ((visibility ("default"))) PyObject * PyObject_GetAIter(PyObject *);




__attribute__ ((visibility ("default"))) int PyIter_Check(PyObject *);




__attribute__ ((visibility ("default"))) int PyAIter_Check(PyObject *);
# 422 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyIter_Next(PyObject *);
# 434 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PySendResult PyIter_Send(PyObject *, PyObject *, PyObject **);
# 443 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) int PyNumber_Check(PyObject *o);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Add(PyObject *o1, PyObject *o2);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Subtract(PyObject *o1, PyObject *o2);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Multiply(PyObject *o1, PyObject *o2);



__attribute__ ((visibility ("default"))) PyObject * PyNumber_MatrixMultiply(PyObject *o1, PyObject *o2);






__attribute__ ((visibility ("default"))) PyObject * PyNumber_FloorDivide(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_TrueDivide(PyObject *o1, PyObject *o2);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Remainder(PyObject *o1, PyObject *o2);






__attribute__ ((visibility ("default"))) PyObject * PyNumber_Divmod(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_Power(PyObject *o1, PyObject *o2,
                                      PyObject *o3);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Negative(PyObject *o);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Positive(PyObject *o);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Absolute(PyObject *o);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Invert(PyObject *o);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Lshift(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_Rshift(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_And(PyObject *o1, PyObject *o2);




__attribute__ ((visibility ("default"))) PyObject * PyNumber_Xor(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_Or(PyObject *o1, PyObject *o2);



__attribute__ ((visibility ("default"))) int PyIndex_Check(PyObject *);



__attribute__ ((visibility ("default"))) PyObject * PyNumber_Index(PyObject *o);







__attribute__ ((visibility ("default"))) Py_ssize_t PyNumber_AsSsize_t(PyObject *o, PyObject *exc);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_Long(PyObject *o);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_Float(PyObject *o);
# 579 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceAdd(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceSubtract(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceMultiply(PyObject *o1, PyObject *o2);



__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceMatrixMultiply(PyObject *o1, PyObject *o2);






__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceFloorDivide(PyObject *o1,
                                                   PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceTrueDivide(PyObject *o1,
                                                  PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceRemainder(PyObject *o1, PyObject *o2);






__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlacePower(PyObject *o1, PyObject *o2,
                                             PyObject *o3);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceLshift(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceRshift(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceAnd(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceXor(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_InPlaceOr(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PyNumber_ToBase(PyObject *n, int base);
# 669 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) int PySequence_Check(PyObject *o);


__attribute__ ((visibility ("default"))) Py_ssize_t PySequence_Size(PyObject *o);



__attribute__ ((visibility ("default"))) Py_ssize_t PySequence_Length(PyObject *o);






__attribute__ ((visibility ("default"))) PyObject * PySequence_Concat(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PySequence_Repeat(PyObject *o, Py_ssize_t count);




__attribute__ ((visibility ("default"))) PyObject * PySequence_GetItem(PyObject *o, Py_ssize_t i);




__attribute__ ((visibility ("default"))) PyObject * PySequence_GetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2);





__attribute__ ((visibility ("default"))) int PySequence_SetItem(PyObject *o, Py_ssize_t i, PyObject *v);




__attribute__ ((visibility ("default"))) int PySequence_DelItem(PyObject *o, Py_ssize_t i);





__attribute__ ((visibility ("default"))) int PySequence_SetSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2,
                                    PyObject *v);





__attribute__ ((visibility ("default"))) int PySequence_DelSlice(PyObject *o, Py_ssize_t i1, Py_ssize_t i2);




__attribute__ ((visibility ("default"))) PyObject * PySequence_Tuple(PyObject *o);



__attribute__ ((visibility ("default"))) PyObject * PySequence_List(PyObject *o);
# 741 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PySequence_Fast(PyObject *o, const char* m);
# 764 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) Py_ssize_t PySequence_Count(PyObject *o, PyObject *value);





__attribute__ ((visibility ("default"))) int PySequence_Contains(PyObject *seq, PyObject *ob);







__attribute__ ((visibility ("default"))) int PySequence_In(PyObject *o, PyObject *value);
# 788 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) Py_ssize_t PySequence_Index(PyObject *o, PyObject *value);
# 797 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PySequence_InPlaceConcat(PyObject *o1, PyObject *o2);





__attribute__ ((visibility ("default"))) PyObject * PySequence_InPlaceRepeat(PyObject *o, Py_ssize_t count);







__attribute__ ((visibility ("default"))) int PyMapping_Check(PyObject *o);



__attribute__ ((visibility ("default"))) Py_ssize_t PyMapping_Size(PyObject *o);



__attribute__ ((visibility ("default"))) Py_ssize_t PyMapping_Length(PyObject *o);
# 849 "/data/data/com.termux/files/usr/include/python3.12/abstract.h"
__attribute__ ((visibility ("default"))) int PyMapping_HasKeyString(PyObject *o, const char *key);






__attribute__ ((visibility ("default"))) int PyMapping_HasKey(PyObject *o, PyObject *key);



__attribute__ ((visibility ("default"))) PyObject * PyMapping_Keys(PyObject *o);



__attribute__ ((visibility ("default"))) PyObject * PyMapping_Values(PyObject *o);




__attribute__ ((visibility ("default"))) PyObject * PyMapping_Items(PyObject *o);




__attribute__ ((visibility ("default"))) PyObject * PyMapping_GetItemString(PyObject *o,
                                               const char *key);





__attribute__ ((visibility ("default"))) int PyMapping_SetItemString(PyObject *o, const char *key,
                                        PyObject *value);


__attribute__ ((visibility ("default"))) int PyObject_IsInstance(PyObject *object, PyObject *typeorclass);


__attribute__ ((visibility ("default"))) int PyObject_IsSubclass(PyObject *object, PyObject *typeorclass);



# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/abstract.h" 1
# 21 "/data/data/com.termux/files/usr/include/python3.12/cpython/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * _PyStack_AsDict(
    PyObject *const *values,
    PyObject *kwnames);
# 36 "/data/data/com.termux/files/usr/include/python3.12/cpython/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * _Py_CheckFunctionResult(
    PyThreadState *tstate,
    PyObject *callable,
    PyObject *result,
    const char *where);






__attribute__ ((visibility ("default"))) PyObject * _PyObject_MakeTpCall(
    PyThreadState *tstate,
    PyObject *callable,
    PyObject *const *args, Py_ssize_t nargs,
    PyObject *keywords);





static inline Py_ssize_t
_PyVectorcall_NARGS(size_t n)
{
    return n & ~(static_cast<size_t>(1) << (8 * sizeof(size_t) - 1));
}

__attribute__ ((visibility ("default"))) vectorcallfunc PyVectorcall_Function(PyObject *callable);
# 76 "/data/data/com.termux/files/usr/include/python3.12/cpython/abstract.h"
__attribute__ ((visibility ("default"))) PyObject * PyObject_VectorcallDict(
    PyObject *callable,
    PyObject *const *args,
    size_t nargsf,
    PyObject *kwargs);


__attribute__ ((visibility ("default"))) PyObject * _PyObject_FastCall(
    PyObject *func,
    PyObject *const *args,
    Py_ssize_t nargs);

__attribute__ ((visibility ("default"))) PyObject * PyObject_CallOneArg(PyObject *func, PyObject *arg);

static inline PyObject *
PyObject_CallMethodNoArgs(PyObject *self, PyObject *name)
{
    size_t nargsf = 1 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1));
    return PyObject_VectorcallMethod(name, &self, nargsf, nullptr);
}

static inline PyObject *
PyObject_CallMethodOneArg(PyObject *self, PyObject *name, PyObject *arg)
{
    PyObject *args[2] = {self, arg};
    size_t nargsf = 2 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1));
    ((arg != __null) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/abstract.h", 102, __PRETTY_FUNCTION__, "arg != NULL"));
    return PyObject_VectorcallMethod(name, args, nargsf, nullptr);
}

__attribute__ ((visibility ("default"))) PyObject * _PyObject_CallMethod(PyObject *obj,
                                            PyObject *name,
                                            const char *format, ...);



__attribute__ ((visibility ("default"))) PyObject * _PyObject_CallMethodId_SizeT(PyObject *obj,
                                              _Py_Identifier *name,
                                              const char *format, ...);

__attribute__ ((visibility ("default"))) PyObject * _PyObject_CallMethodId_SizeT(PyObject *obj,
                                                    _Py_Identifier *name,
                                                    const char *format,
                                                    ...);

__attribute__ ((visibility ("default"))) PyObject * _PyObject_CallMethodIdObjArgs(
    PyObject *obj,
    _Py_Identifier *name,
    ...);

static inline PyObject *
_PyObject_VectorcallMethodId(
    _Py_Identifier *name, PyObject *const *args,
    size_t nargsf, PyObject *kwnames)
{
    PyObject *oname = _PyUnicode_FromId(name);
    if (!oname) {
        return nullptr;
    }
    return PyObject_VectorcallMethod(oname, args, nargsf, kwnames);
}

static inline PyObject *
_PyObject_CallMethodIdNoArgs(PyObject *self, _Py_Identifier *name)
{
    size_t nargsf = 1 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1));
    return _PyObject_VectorcallMethodId(name, &self, nargsf, nullptr);
}

static inline PyObject *
_PyObject_CallMethodIdOneArg(PyObject *self, _Py_Identifier *name, PyObject *arg)
{
    PyObject *args[2] = {self, arg};
    size_t nargsf = 2 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1));
    ((arg != __null) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/cpython/abstract.h", 150, __PRETTY_FUNCTION__, "arg != NULL"));
    return _PyObject_VectorcallMethodId(name, args, nargsf, nullptr);
}

__attribute__ ((visibility ("default"))) int _PyObject_HasLen(PyObject *o);




__attribute__ ((visibility ("default"))) Py_ssize_t PyObject_LengthHint(PyObject *o, Py_ssize_t);
# 183 "/data/data/com.termux/files/usr/include/python3.12/cpython/abstract.h"
__attribute__ ((visibility ("default"))) Py_ssize_t _PySequence_IterSearch(PyObject *seq,
                                              PyObject *obj, int operation);



__attribute__ ((visibility ("default"))) int _PyObject_RealIsInstance(PyObject *inst, PyObject *cls);

__attribute__ ((visibility ("default"))) int _PyObject_RealIsSubclass(PyObject *derived, PyObject *cls);

__attribute__ ((visibility ("default"))) char *const * _PySequence_BytesToCharpArray(PyObject* self);

__attribute__ ((visibility ("default"))) void _Py_FreeCharPArray(char *const array[]);


__attribute__ ((visibility ("default"))) void _Py_add_one_to_index_F(int nd, Py_ssize_t *index,
                                        const Py_ssize_t *shape);
__attribute__ ((visibility ("default"))) void _Py_add_one_to_index_C(int nd, Py_ssize_t *index,
                                        const Py_ssize_t *shape);


__attribute__ ((visibility ("default"))) int _Py_convert_optional_to_ssize_t(PyObject *, void *);


__attribute__ ((visibility ("default"))) PyObject * _PyNumber_Index(PyObject *o);
# 893 "/data/data/com.termux/files/usr/include/python3.12/abstract.h" 2




}
# 101 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/bltinmodule.h" 1



extern "C" {


extern __attribute__ ((visibility ("default"))) PyTypeObject PyFilter_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyMap_Type;
extern __attribute__ ((visibility ("default"))) PyTypeObject PyZip_Type;


}
# 102 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pyctype.h" 1




extern "C" {
# 16 "/data/data/com.termux/files/usr/include/python3.12/cpython/pyctype.h"
extern __attribute__ ((visibility ("default"))) const unsigned int _Py_ctype_table[256];
# 29 "/data/data/com.termux/files/usr/include/python3.12/cpython/pyctype.h"
extern __attribute__ ((visibility ("default"))) const unsigned char _Py_ctype_tolower[256];
extern __attribute__ ((visibility ("default"))) const unsigned char _Py_ctype_toupper[256];





}
# 103 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pystrtod.h" 1




extern "C" {



__attribute__ ((visibility ("default"))) double PyOS_string_to_double(const char *str,
                                         char **endptr,
                                         PyObject *overflow_exception);



__attribute__ ((visibility ("default"))) char * PyOS_double_to_string(double val,
                                         char format_code,
                                         int precision,
                                         int flags,
                                         int *type);


__attribute__ ((visibility ("default"))) PyObject * _Py_string_to_number_with_underscores(
    const char *str, Py_ssize_t len, const char *what, PyObject *obj, void *arg,
    PyObject *(*innerfunc)(const char *, Py_ssize_t, void *));

__attribute__ ((visibility ("default"))) double _Py_parse_inf_or_nan(const char *p, char **endptr);
# 43 "/data/data/com.termux/files/usr/include/python3.12/pystrtod.h"
}
# 104 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/pystrcmp.h" 1




extern "C" {


__attribute__ ((visibility ("default"))) int PyOS_mystrnicmp(const char *, const char *, Py_ssize_t);
__attribute__ ((visibility ("default"))) int PyOS_mystricmp(const char *, const char *);
# 20 "/data/data/com.termux/files/usr/include/python3.12/pystrcmp.h"
}
# 105 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/fileutils.h" 1



extern "C" {



__attribute__ ((visibility ("default"))) wchar_t * Py_DecodeLocale(
    const char *arg,
    size_t *size);

__attribute__ ((visibility ("default"))) char* Py_EncodeLocale(
    const wchar_t *text,
    size_t *error_pos);




# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/fileutils.h" 1





__attribute__ ((visibility ("default"))) FILE* _Py_fopen_obj(
    PyObject *path,
    const char *mode);
# 20 "/data/data/com.termux/files/usr/include/python3.12/fileutils.h" 2




}
# 106 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/pyfpe.h" 1
# 107 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/tracemalloc.h" 1




extern "C" {
# 15 "/data/data/com.termux/files/usr/include/python3.12/tracemalloc.h"
__attribute__ ((visibility ("default"))) int PyTraceMalloc_Track(
    unsigned int domain,
    uintptr_t ptr,
    size_t size);





__attribute__ ((visibility ("default"))) int PyTraceMalloc_Untrack(
    unsigned int domain,
    uintptr_t ptr);
# 36 "/data/data/com.termux/files/usr/include/python3.12/tracemalloc.h"
__attribute__ ((visibility ("default"))) PyObject* _PyTraceMalloc_GetTraceback(
    unsigned int domain,
    uintptr_t ptr);


__attribute__ ((visibility ("default"))) int _PyTraceMalloc_IsTracing(void);


__attribute__ ((visibility ("default"))) void _PyTraceMalloc_ClearTraces(void);


__attribute__ ((visibility ("default"))) PyObject * _PyTraceMalloc_GetTraces(void);


__attribute__ ((visibility ("default"))) PyObject * _PyTraceMalloc_GetObjectTraceback(PyObject *obj);


__attribute__ ((visibility ("default"))) PyStatus _PyTraceMalloc_Init(void);


__attribute__ ((visibility ("default"))) int _PyTraceMalloc_Start(int max_nframe);


__attribute__ ((visibility ("default"))) void _PyTraceMalloc_Stop(void);


__attribute__ ((visibility ("default"))) int _PyTraceMalloc_GetTracebackLimit(void);


__attribute__ ((visibility ("default"))) size_t _PyTraceMalloc_GetMemory(void);


__attribute__ ((visibility ("default"))) PyObject * _PyTraceMalloc_GetTracedMemory(void);


__attribute__ ((visibility ("default"))) void _PyTraceMalloc_ResetPeak(void);


}
# 108 "/data/data/com.termux/files/usr/include/python3.12/Python.h" 2
# 17 "yxdfb/Kynaraa.cpp" 2
# 32 "yxdfb/Kynaraa.cpp"
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3
# 33 "yxdfb/Kynaraa.cpp" 2
# 426 "yxdfb/Kynaraa.cpp"
    enum { __pyx_check_sizeof_voidp = 1 / (int)(8 == sizeof(void*)) };
# 472 "yxdfb/Kynaraa.cpp"
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
# 523 "yxdfb/Kynaraa.cpp"
    typedef uintptr_t __pyx_uintptr_t;
# 557 "yxdfb/Kynaraa.cpp"
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
# 580 "yxdfb/Kynaraa.cpp"
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(__null) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};
# 678 "yxdfb/Kynaraa.cpp"
  static __inline__ __attribute__ ((__unused__)) PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return __null;
    result =

        PyUnstable_Code_NewWithPosOnlyArgs



        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(((PyObject*)((empty_bytes))));
    return result;
  }
# 812 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return ((((PyCFunctionObject*)(func))->m_ml->ml_flags) & 0x0020) ? __null : ((PyCFunctionObject*)func)->m_self;
}

static __inline__ __attribute__ ((__unused__)) int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {



    return PyObject_TypeCheck(((PyObject*)(((func)))), (&PyCFunction_Type)) && PyCFunction_GET_FUNCTION(((PyObject*)((func)))) == (PyCFunction) cfunc;

}
# 941 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash);
    if (res == __null) PyErr_Clear();
    return res;
}
# 1130 "yxdfb/Kynaraa.cpp"
  static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(((PyObject*)((module))));
      return module;
  }
# 1197 "yxdfb/Kynaraa.cpp"
# 1 "/data/data/com.termux/files/usr/include/c++/v1/math.h" 1 3
# 1198 "yxdfb/Kynaraa.cpp" 2
# 1242 "yxdfb/Kynaraa.cpp"
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;
# 1263 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}

# 1 "/data/data/com.termux/files/usr/include/c++/v1/cstdlib" 1 3
# 87 "/data/data/com.termux/files/usr/include/c++/v1/cstdlib" 3
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdlib.h" 1 3
# 88 "/data/data/com.termux/files/usr/include/c++/v1/cstdlib" 2 3
# 99 "/data/data/com.termux/files/usr/include/c++/v1/cstdlib" 3


namespace __attribute__((__type_visibility__("default"))) std { inline namespace __ndk1 {

using ::size_t __attribute__((__using_if_exists__));
using ::div_t __attribute__((__using_if_exists__));
using ::ldiv_t __attribute__((__using_if_exists__));
using ::lldiv_t __attribute__((__using_if_exists__));
using ::atof __attribute__((__using_if_exists__));
using ::atoi __attribute__((__using_if_exists__));
using ::atol __attribute__((__using_if_exists__));
using ::atoll __attribute__((__using_if_exists__));
using ::strtod __attribute__((__using_if_exists__));
using ::strtof __attribute__((__using_if_exists__));
using ::strtold __attribute__((__using_if_exists__));
using ::strtol __attribute__((__using_if_exists__));
using ::strtoll __attribute__((__using_if_exists__));
using ::strtoul __attribute__((__using_if_exists__));
using ::strtoull __attribute__((__using_if_exists__));
using ::rand __attribute__((__using_if_exists__));
using ::srand __attribute__((__using_if_exists__));
using ::calloc __attribute__((__using_if_exists__));
using ::free __attribute__((__using_if_exists__));
using ::malloc __attribute__((__using_if_exists__));
using ::realloc __attribute__((__using_if_exists__));
using ::abort __attribute__((__using_if_exists__));
using ::atexit __attribute__((__using_if_exists__));
using ::exit __attribute__((__using_if_exists__));
using ::_Exit __attribute__((__using_if_exists__));
using ::getenv __attribute__((__using_if_exists__));
using ::system __attribute__((__using_if_exists__));
using ::bsearch __attribute__((__using_if_exists__));
using ::qsort __attribute__((__using_if_exists__));
using ::abs __attribute__((__using_if_exists__));
using ::labs __attribute__((__using_if_exists__));
using ::llabs __attribute__((__using_if_exists__));
using ::div __attribute__((__using_if_exists__));
using ::ldiv __attribute__((__using_if_exists__));
using ::lldiv __attribute__((__using_if_exists__));
using ::mblen __attribute__((__using_if_exists__));

using ::mbtowc __attribute__((__using_if_exists__));
using ::wctomb __attribute__((__using_if_exists__));
using ::mbstowcs __attribute__((__using_if_exists__));
using ::wcstombs __attribute__((__using_if_exists__));


using ::at_quick_exit __attribute__((__using_if_exists__));
using ::quick_exit __attribute__((__using_if_exists__));


using ::aligned_alloc __attribute__((__using_if_exists__));


}}
# 1268 "yxdfb/Kynaraa.cpp" 2
# 1282 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) Py_ssize_t __Pyx_ssize_strlen(const char *s);
static __inline__ __attribute__ ((__unused__)) const char* __Pyx_PyObject_AsString(PyObject*);
static __inline__ __attribute__ ((__unused__)) const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyByteArray_FromString(const char*);



static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyUnicode_FromString(const char*);
# 1317 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject * __Pyx_PyBool_FromLong(long b);
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyObject_IsTrue(PyObject*);
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);


static __inline__ __attribute__ ((__unused__)) Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static __inline__ __attribute__ ((__unused__)) PyObject * __Pyx_PyInt_FromSize_t(size_t);
static __inline__ __attribute__ ((__unused__)) Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
# 1361 "yxdfb/Kynaraa.cpp"
  typedef Py_ssize_t __Pyx_compact_pylong;
  typedef size_t __Pyx_compact_upylong;
# 1469 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }


static PyObject *__pyx_m = __null;

static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = "yxdfb/Kynaraa.cpp";
static const char *__pyx_filename;



static const char *__pyx_f[] = {
  "yxdfb/Kynaraa.py",
};
# 1495 "yxdfb/Kynaraa.cpp"
struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api;
struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr;
struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr;
struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr;
# 1507 "yxdfb/Kynaraa.cpp"
struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api {
  PyObject ob_base;
  PyObject *__pyx_v_response_text;
};
# 1520 "yxdfb/Kynaraa.cpp"
struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr {
  PyObject ob_base;
  struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *__pyx_outer_scope;
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_pattern;
};
# 1535 "yxdfb/Kynaraa.cpp"
struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr {
  PyObject ob_base;
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_key;
  PyObject *__pyx_v_value;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
};
# 1554 "yxdfb/Kynaraa.cpp"
struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr {
  PyObject ob_base;
  PyObject *__pyx_genexpr_arg_0;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};
# 1648 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
# 1678 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static __inline__ __attribute__ ((__unused__)) void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
# 1698 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);





static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);


static PyObject *__Pyx_GetBuiltinName(PyObject *name);



static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);






static __inline__ __attribute__ ((__unused__)) int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);


static __inline__ __attribute__ ((__unused__)) int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);
# 1747 "yxdfb/Kynaraa.cpp"
    static __inline__ __attribute__ ((__unused__)) PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
# 1774 "yxdfb/Kynaraa.cpp"
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);


static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);


static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);




static __inline__ __attribute__ ((__unused__)) int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
# 1839 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
# 1879 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);






static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);




static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);





static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);







static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);





static __inline__ __attribute__ ((__unused__)) void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);

static __inline__ __attribute__ ((__unused__)) void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
# 1922 "yxdfb/Kynaraa.cpp"
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);





static __inline__ __attribute__ ((__unused__)) int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);
# 1953 "yxdfb/Kynaraa.cpp"
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);
# 1966 "yxdfb/Kynaraa.cpp"
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);


static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);


static __inline__ __attribute__ ((__unused__)) int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return __builtin_expect(!!(result < 0), 0) ? result : (result == (eq == 2));
}


static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);



static __inline__ __attribute__ ((__unused__)) int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(((PyObject*)((list))));
    if (__builtin_expect(!!(L->allocated > len), 1) & __builtin_expect(!!(len > (L->allocated >> 1)), 1)) {
        Py_INCREF(((PyObject*)((x))));



        PyList_SET_ITEM(((PyObject*)((list))), (len), ((PyObject*)((x))));

        Py_SET_SIZE(((PyVarObject*)((list))), (len + 1));
        return 0;
    }
    return PyList_Append(list, x);
}





static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
# 2015 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);




static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseUnboundLocalError(const char *varname);


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseClosureNameError(const char *varname);


static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);
# 2044 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx_IterFinish(void);


static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);


static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);


static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseNoneNotIterableError(void);


static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);
# 2074 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);


static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static __inline__ __attribute__ ((__unused__)) int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);



static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);






static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);


static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
# 2107 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
# 2116 "yxdfb/Kynaraa.cpp"
    static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right



    );
# 2144 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static __inline__ __attribute__ ((__unused__)) int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
# 2159 "yxdfb/Kynaraa.cpp"
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
# 2170 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(((PyObject*)((list))));
    if (__builtin_expect(!!(L->allocated > len), 1)) {
        Py_INCREF(((PyObject*)((x))));



        PyList_SET_ITEM(((PyObject*)((list))), (len), ((PyObject*)((x))));

        Py_SET_SIZE(((PyVarObject*)((list))), (len + 1));
        return 0;
    }
    return PyList_Append(list, x);
}





# 1 "/data/data/com.termux/files/usr/include/python3.12/structmember.h" 1



extern "C" {
# 21 "/data/data/com.termux/files/usr/include/python3.12/structmember.h"
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3
# 22 "/data/data/com.termux/files/usr/include/python3.12/structmember.h" 2
# 54 "/data/data/com.termux/files/usr/include/python3.12/structmember.h"
}
# 2191 "yxdfb/Kynaraa.cpp" 2








static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);



[[maybe_unused]] static int __Pyx_PyType_Ready(PyTypeObject *t);
# 2213 "yxdfb/Kynaraa.cpp"
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);


static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);



static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);


static PyObject *__Pyx_FetchSharedCythonABIModule(void);



static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
# 2251 "yxdfb/Kynaraa.cpp"
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return (Py_INCREF(((PyObject*)((func)))), func);
    return PyMethod_New(func, self);
}






static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
# 2287 "yxdfb/Kynaraa.cpp"
typedef struct {






    PyCMethodObject func;







    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;



    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;




static __inline__ __attribute__ ((__unused__)) int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);


static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static __inline__ __attribute__ ((__unused__)) void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static __inline__ __attribute__ ((__unused__)) void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static __inline__ __attribute__ ((__unused__)) void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static __inline__ __attribute__ ((__unused__)) void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static __inline__ __attribute__ ((__unused__)) void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);

static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
# 2358 "yxdfb/Kynaraa.cpp"
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
# 2376 "yxdfb/Kynaraa.cpp"
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);


static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);





static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);




typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,__null};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);



static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);


static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyInt_From_long(long value);
# 2422 "yxdfb/Kynaraa.cpp"
typedef const char *__Pyx_TypeName;






static __inline__ __attribute__ ((__unused__)) long __Pyx_PyInt_As_long(PyObject *);


static __inline__ __attribute__ ((__unused__)) int __Pyx_PyInt_As_int(PyObject *);


static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);




static __inline__ __attribute__ ((__unused__)) void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);





struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
# 2457 "yxdfb/Kynaraa.cpp"
typedef struct __pyx_CoroutineObject {
    PyObject ob_base;
    __pyx_coroutine_body_t body;
    PyObject *closure;
    _PyErr_StackItem gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static __inline__ __attribute__ ((__unused__)) void __Pyx_Coroutine_ExceptionClear(_PyErr_StackItem *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
# 2504 "yxdfb/Kynaraa.cpp"
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static __inline__ __attribute__ ((__unused__)) void __Pyx_Coroutine_ResetFrameBackpointer(_PyErr_StackItem *exc_state);


static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);


static int __Pyx_patch_abc(void);






static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);


static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);


static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);







extern int __pyx_module_is_main_Kynaraa;
int __pyx_module_is_main_Kynaraa = 0;



static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_input;
static PyObject *__pyx_builtin_exit;

static const char __pyx_k_[] = "\n";
static const char __pyx_k_0[] = "0";
static const char __pyx_k_1[] = "1";
static const char __pyx_k_2[] = "2";
static const char __pyx_k_H[] = "H";
static const char __pyx_k_K[] = "K";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_R[] = "R";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_01[] = "01";
static const char __pyx_k_02[] = "02";
static const char __pyx_k_0m[] = "\033[0m";
static const char __pyx_k_11[] = "11";
static const char __pyx_k_12[] = "12";
static const char __pyx_k_13[] = "13";
static const char __pyx_k_14[] = "14";
static const char __pyx_k_1f[] = ".1f";
static const char __pyx_k_CP[] = " CP-:";
static const char __pyx_k_ID[] = "ID";
static const char __pyx_k_OK[] = " OK-:";
static const char __pyx_k_XL[] = "XL";
static const char __pyx_k__3[] = "\r[";
static const char __pyx_k__4[] = "]-[";
static const char __pyx_k__5[] = "] ";
static const char __pyx_k__6[] = "/";
static const char __pyx_k__7[] = " ";
static const char __pyx_k__8[] = "";
static const char __pyx_k__9[] = "\n[";
static const char __pyx_k_aw[] = "aw";
static const char __pyx_k_cp[] = "cp";
static const char __pyx_k_fr[] = "fr";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_gp[] = "gp";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_li[] = "li";
static const char __pyx_k_ok[] = "ok";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_pw[] = "pw";
static const char __pyx_k_re[] = "re";
static const char __pyx_k_rr[] = "rr";
static const char __pyx_k_sb[] = "sb";
static const char __pyx_k_ss[] = "ss";
static const char __pyx_k_ua[] = "ua";
static const char __pyx_k_xs[] = "xs";
static const char __pyx_k_0_0[] = ".0.0.";
static const char __pyx_k_0_2[] = ".0.";
static const char __pyx_k_0_3[] = "?0";
static const char __pyx_k_123[] = "123";
static const char __pyx_k_1_2[] = "?1";
static const char __pyx_k_200[] = "200";
static const char __pyx_k_321[] = "321";
static const char __pyx_k_400[] = "400";
static const char __pyx_k_401[] = "401";
static const char __pyx_k_403[] = "403";
static const char __pyx_k_404[] = "404";
static const char __pyx_k_429[] = "429";
static const char __pyx_k_500[] = "500";
static const char __pyx_k_980[] = "980";
static const char __pyx_k_Pws[] = "Pws";
static const char __pyx_k_Tod[] = "Tod";
static const char __pyx_k__10[] = "?";
static const char __pyx_k__11[] = ",";
static const char __pyx_k__12[] = "[";
static const char __pyx_k__13[] = "*";
static const char __pyx_k__14[] = " ]";
static const char __pyx_k__15[] = "#";
static const char __pyx_k__16[] = "     ";
static const char __pyx_k__17[] = "         ---------------------------------------";
static const char __pyx_k__20[] = "|";
static const char __pyx_k__24[] = ".";
static const char __pyx_k__31[] = "; ";
static const char __pyx_k__32[] = ";]";
static const char __pyx_k__33[] = "=";
static const char __pyx_k__35[] = "\\";
static const char __pyx_k__38[] = "+";
static const char __pyx_k__39[] = "_";
static const char __pyx_k__41[] = "-";
static const char __pyx_k__43[] = ";";
static const char __pyx_k__44[] = "]";
static const char __pyx_k__45[] = "            ";
static const char __pyx_k__46[] = "\r";
static const char __pyx_k__47[] = "                                                  ";
static const char __pyx_k__50[] = "\"";
static const char __pyx_k__53[] = "\"\"";
static const char __pyx_k_asu[] = "asu";
static const char __pyx_k_asw[] = "asw";
static const char __pyx_k_bs4[] = "bs4";
static const char __pyx_k_cpl[] = "cpl";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_dpr[] = "dpr";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_lop[] = "lop";
static const char __pyx_k_lsd[] = "lsd";
static const char __pyx_k_s_s[] = "%s=%s";
static const char __pyx_k_ses[] = "ses";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_tod[] = "tod";
static const char __pyx_k_txt[] = ".txt";
static const char __pyx_k_uid[] = "uid";
static const char __pyx_k_x86[] = "x86";
static const char __pyx_k_xpw[] = "xpw";
static const char __pyx_k_1234[] = "1234";
static const char __pyx_k_1633[] = "1633";
static const char __pyx_k_AXIS[] = "AXIS";
static const char __pyx_k_CP_2[] = "CP";
static const char __pyx_k_FB4A[] = "FB4A";
static const char __pyx_k_FBAN[] = "FBAN";
static const char __pyx_k_FBAV[] = ";FBAV/";
static const char __pyx_k_FBBV[] = ";FBBV/";
static const char __pyx_k_FBCA[] = ";FBCA/";
static const char __pyx_k_FBCR[] = ";FBCR/";
static const char __pyx_k_FBLC[] = ";FBLC/";
static const char __pyx_k_FBPN[] = ";FBPN/";
static const char __pyx_k_FBSV[] = ";FBSV/";
static const char __pyx_k_Host[] = "Host";
static const char __pyx_k_Logo[] = "Logo";
static const char __pyx_k_OK_2[] = "OK";
static const char __pyx_k_True[] = "True";
static const char __pyx_k_abcd[] = "abcd";
static const char __pyx_k_adid[] = "adid";
static const char __pyx_k_aman[] = "aman";
static const char __pyx_k_apcb[] = "apcb";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_code[] = "code";
static const char __pyx_k_coki[] = "coki";
static const char __pyx_k_cokz[] = "cokz";
static const char __pyx_k_curl[] = "curl";
static const char __pyx_k_dark[] = "dark";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_datr[] = "datr";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "exit";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_find[] = "find";
static const char __pyx_k_head[] = "head";
static const char __pyx_k_host[] = "host";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_kyan[] = "kyan";
static const char __pyx_k_kyna[] = "kyna";
static const char __pyx_k_m_ts[] = "m_ts";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_nama[] = "nama";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_note[] = "note";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_pass[] = "pass";
static const char __pyx_k_pasw[] = "pasw";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_post[] = "post";
static const char __pyx_k_pwek[] = "pwek";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_spam[] = "spam";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_szaz[] = "szaz";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_tggl[] = "tggl";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_true[] = "true";
static const char __pyx_k_user[] = "user";
static const char __pyx_k_uuid[] = "uuid";
static const char __pyx_k_xpwd[] = "xpwd";
static const char __pyx_k_0_31m[] = "\033[0;31m";
static const char __pyx_k_12345[] = "12345";
static const char __pyx_k_123_2[] = " 123";
static const char __pyx_k_1_92m[] = "\033[1;92m";
static const char __pyx_k_1_93m[] = "\033[1;93m";
static const char __pyx_k_51001[] = "51001";
static const char __pyx_k_51011[] = "51011";
static const char __pyx_k_Build[] = " Build/";
static const char __pyx_k_FB_FW[] = "};FB_FW/";
static const char __pyx_k_False[] = "False";
static const char __pyx_k_Kynaa[] = "Kynaa";
static const char __pyx_k_Linux[] = "\"Linux\"";
static const char __pyx_k_THREE[] = "THREE";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_cokie[] = "cokie";
static const char __pyx_k_depan[] = "depan";
static const char __pyx_k_dumps[] = "dumps";
static const char __pyx_k_email[] = "email";
static const char __pyx_k_en_US[] = "en_US";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_es_ES[] = "es_ES";
static const char __pyx_k_false[] = "false";
static const char __pyx_k_fb_fw[] = "fb_fw";
static const char __pyx_k_fbans[] = "fbans";
static const char __pyx_k_fbavs[] = "fbavs";
static const char __pyx_k_fbbvs[] = "fbbvs";
static const char __pyx_k_fbcas[] = "fbcas";
static const char __pyx_k_fbcrs[] = "fbcrs";
static const char __pyx_k_fblcs[] = "fblcs";
static const char __pyx_k_fbpns[] = "fbpns";
static const char __pyx_k_fetch[] = "fetch";
static const char __pyx_k_fr_FR[] = "fr_FR";
static const char __pyx_k_group[] = "group";
static const char __pyx_k_id_ID[] = "id_ID";
static const char __pyx_k_input[] = "input";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_pwnya[] = "pwnya";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_u_3_i[] = "u=3, i";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_uuid4[] = "uuid4";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = ",width=";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_123456[] = "123456";
static const char __pyx_k_1234_2[] = " 1234";
static const char __pyx_k_FBAN_2[] = ") [FBAN/";
static const char __pyx_k_Module[] = "Module";
static const char __pyx_k_accept[] = "accept";
static const char __pyx_k_app_id[] = "app_id";
static const char __pyx_k_base64[] = "base64";
static const char __pyx_k_c_user[] = "c_user";
static const char __pyx_k_choice[] = "choice";
static const char __pyx_k_cookie[] = "cookie";
static const char __pyx_k_datr_2[] = "datr=";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_exit_2[] = "__exit__";
static const char __pyx_k_fesnuk[] = "fesnuk";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_google[] = "google";
static const char __pyx_k_height[] = ",height=";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_locale[] = "locale";
static const char __pyx_k_method[] = "method";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_notice[] = "notice";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_pretty[] = "pretty";
static const char __pyx_k_random[] = "random";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_stdout[] = "stdout";
static const char __pyx_k_submit[] = "submit";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_12345_2[] = " 12345";
static const char __pyx_k_INDOSAT[] = "INDOSAT";
static const char __pyx_k_Kynaraa[] = "Kynaraa";
static const char __pyx_k_Session[] = "Session";
static const char __pyx_k_br_gzip[] = "br, gzip";
static const char __pyx_k_cookies[] = "cookies";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_headers[] = "headers";
static const char __pyx_k_jazoest[] = "jazoest";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_purpose[] = "purpose";
static const char __pyx_k_randint[] = "randint";
static const char __pyx_k_referer[] = "referer";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_try_num[] = "try_num";
static const char __pyx_k_uniform[] = "uniform";
static const char __pyx_k_urandom[] = "urandom";
static const char __pyx_k_GRAPH_V1[] = "GRAPH V1";
static const char __pyx_k_GRAPH_V2[] = "GRAPH V2";
static const char __pyx_k_Password[] = "Password";
static const char __pyx_k_Priority[] = "Priority";
static const char __pyx_k_VALID_V1[] = "VALID V1";
static const char __pyx_k_VALID_V2[] = "VALID V2";
static const char __pyx_k_belakang[] = "belakang";
static const char __pyx_k_document[] = "document";
static const char __pyx_k_executor[] = "executor";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_get_dict[] = "get_dict";
static const char __pyx_k_graph_v1[] = "graph_v1";
static const char __pyx_k_graph_v2[] = "graph_v2";
static const char __pyx_k_navigate[] = "navigate";
static const char __pyx_k_password[] = "password";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_reguller[] = "reguller";
static const char __pyx_k_requests[] = "requests";
static const char __pyx_k_response[] = "response";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_valid_v1[] = "valid_v1";
static const char __pyx_k_123456789[] = "123456789";
static const char __pyx_k_TELKOMSEL[] = "TELKOMSEL";
static const char __pyx_k_UserAgent[] = "UserAgent";
static const char __pyx_k_arm64_v8a[] = "arm64-v8a";
static const char __pyx_k_authority[] = "authority";
static const char __pyx_k_b64encode[] = "b64encode";
static const char __pyx_k_build_ids[] = "build_ids";
static const char __pyx_k_densities[] = "densities";
static const char __pyx_k_device_id[] = "device_id";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_max_age_0[] = "max-age=0";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_sec_ch_ua[] = "sec-ch-ua";
static const char __pyx_k_styles_id[] = "styles_id";
static const char __pyx_k_ua_fb_val[] = "ua_fb_val";
static const char __pyx_k_variables[] = "variables";
static const char __pyx_k_Chromium_v[] = "\", \"Chromium\";v=\"";
static const char __pyx_k_Connection[] = "Connection";
static const char __pyx_k_GRAPH_V1_2[] = "\r[GRAPH V1]-[";
static const char __pyx_k_IGNORECASE[] = "IGNORECASE";
static const char __pyx_k_Kynaa_abcd[] = "Kynaa.abcd";
static const char __pyx_k_MOBILE_LTE[] = "MOBILE.LTE";
static const char __pyx_k_PWD_FB4A_0[] = "#PWD_FB4A:0:{}:{}";
static const char __pyx_k_User_Agent[] = "User-Agent";
static const char __pyx_k_auth_login[] = "auth.login";
static const char __pyx_k_bluid_data[] = "bluid.data";
static const char __pyx_k_bluid_logo[] = "bluid.logo";
static const char __pyx_k_checkpoint[] = "checkpoint";
static const char __pyx_k_exceptions[] = "exceptions";
static const char __pyx_k_is_push_on[] = "is_push_on";
static const char __pyx_k_keep_alive[] = "keep-alive";
static const char __pyx_k_nt_context[] = "nt_context";
static const char __pyx_k_save_hasil[] = "save_hasil";
static const char __pyx_k_try_number[] = "try_number";
static const char __pyx_k_user_agent[] = "user-agent";
static const char __pyx_k_01710940017[] = "['01710940017']";
static const char __pyx_k_Tigon_Liger[] = "Tigon/Liger";
static const char __pyx_k_armeabi_v7a[] = "armeabi-v7a";
static const char __pyx_k_fb_noscript[] = "_fb_noscript";
static const char __pyx_k_html_parser[] = "html.parser";
static const char __pyx_k_itel_S666LN[] = "itel S666LN";
static const char __pyx_k_max_workers[] = "max_workers";
static const char __pyx_k_openid_flow[] = "openid_flow";
static const char __pyx_k_pixel_ratio[] = "pixel_ratio";
static const char __pyx_k_same_origin[] = "same-origin";
static const char __pyx_k_session_key[] = "session_key";
static const char __pyx_k_sim_serials[] = "sim_serials";
static const char __pyx_k_status_code[] = "status_code";
static const char __pyx_k_Content_Type[] = "Content-Type";
static const char __pyx_k_FBDM_density[] = ";FBDM/{density=";
static const char __pyx_k_Kynaa___init[] = "Kynaa.__init__";
static const char __pyx_k_Kynaa_notice[] = "Kynaa.notice";
static const char __pyx_k_Orca_Android[] = "Orca-Android";
static const char __pyx_k_access_token[] = "access_token";
static const char __pyx_k_authenticate[] = "authenticate";
static const char __pyx_k_content_type[] = "content-type";
static const char __pyx_k_graphservice[] = "graphservice";
static const char __pyx_k_gzip_deflate[] = "gzip, deflate";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_phone_models[] = "phone_models";
static const char __pyx_k_prefill_type[] = "prefill_type";
static const char __pyx_k_print_proses[] = "print_proses";
static const char __pyx_k_screen_width[] = "screen_width";
static const char __pyx_k_theme_params[] = "theme_params";
static const char __pyx_k_user_agent_2[] = "user_agent";
static const char __pyx_k_x_fb_net_hni[] = "x-fb-net-hni";
static const char __pyx_k_x_fb_sim_hni[] = "x-fb-sim-hni";
static const char __pyx_k_Authorization[] = "Authorization";
static const char __pyx_k_BeautifulSoup[] = "BeautifulSoup";
static const char __pyx_k_GraphServices[] = "[\"GraphServices\"]";
static const char __pyx_k_Not_A_Brand_v[] = "\"Not.A/Brand\";v=\"";
static const char __pyx_k_android_login[] = "android_login";
static const char __pyx_k_authorization[] = "authorization";
static const char __pyx_k_bloks_version[] = "bloks_version";
static const char __pyx_k_cache_control[] = "cache-control";
static const char __pyx_k_client_doc_id[] = "client_doc_id";
static const char __pyx_k_contact_point[] = "contact_point";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_is_smart_lock[] = "is_smart_lock";
static const char __pyx_k_name_fr_value[] = "\"name\":\"fr\",\"value\":\"(.*?)\"";
static const char __pyx_k_name_xs_value[] = "\"name\":\"xs\",\"value\":\"(.*?)\"";
static const char __pyx_k_openid_emails[] = "openid_emails";
static const char __pyx_k_openid_tokens[] = "openid_tokens";
static const char __pyx_k_response_text[] = "response_text";
static const char __pyx_k_screen_height[] = "screen_height";
static const char __pyx_k_spam_patterns[] = "spam_patterns";
static const char __pyx_k_Kynaa_graph_v1[] = "Kynaa.graph_v1";
static const char __pyx_k_Kynaa_graph_v2[] = "Kynaa.graph_v2";
static const char __pyx_k_Kynaa_reguller[] = "Kynaa.reguller";
static const char __pyx_k_prefill_source[] = "prefill_source";
static const char __pyx_k_sandi_tambahan[] = "] sandi tambahan -> [ ";
static const char __pyx_k_sec_fetch_dest[] = "sec-fetch-dest";
static const char __pyx_k_sec_fetch_mode[] = "sec-fetch-mode";
static const char __pyx_k_sec_fetch_site[] = "sec-fetch-site";
static const char __pyx_k_sec_fetch_user[] = "sec-fetch-user";
static const char __pyx_k_viewport_width[] = "viewport-width";
static const char __pyx_k_x_facebook_com[] = "x.facebook.com";
static const char __pyx_k_x_fb_client_ip[] = "x-fb-client-ip";
static const char __pyx_k_Accept_Encoding[] = "Accept-Encoding";
static const char __pyx_k_ConnectionError[] = "ConnectionError";
static const char __pyx_k_Google_Chrome_v[] = "\", \"Google Chrome\";v=\"";
static const char __pyx_k_QP1A_190711_020[] = "QP1A.190711.020";
static const char __pyx_k_RP1A_200720_011[] = "RP1A.200720.011";
static const char __pyx_k_SP1A_210812_016[] = "SP1A.210812.016";
static const char __pyx_k_TP1A_220905_001[] = "TP1A.220905.001";
static const char __pyx_k_UP1A_231005_007[] = "UP1A.231005.007";
static const char __pyx_k_accept_encoding[] = "accept-encoding";
static const char __pyx_k_accept_language[] = "accept-language";
static const char __pyx_k_allow_redirects[] = "allow_redirects";
static const char __pyx_k_client_trace_id[] = "client_trace_id";
static const char __pyx_k_name_datr_value[] = "\"name\":\"datr\",\"value\":\"(.*?)\"";
static const char __pyx_k_openid_provider[] = "openid_provider";
static const char __pyx_k_password_manual[] = "password_manual";
static const char __pyx_k_sec_ch_ua_model[] = "sec-ch-ua-model";
static const char __pyx_k_session_cookies[] = "session_cookies";
static const char __pyx_k_0_0_0_Chromium_v[] = ".0.0.0\", \"Chromium\";v=\"";
static const char __pyx_k_3643298472347298[] = "3643298472347298";
static const char __pyx_k_Cracking_selesai[] = "\n[#] Cracking selesai.";
static const char __pyx_k_Kynaa_save_hasil[] = "Kynaa.save_hasil";
static const char __pyx_k_account_recovery[] = "account_recovery";
static const char __pyx_k_android_versions[] = "android_versions";
static const char __pyx_k_family_device_id[] = "family_device_id";
static const char __pyx_k_had_cp_prefilled[] = "had_cp_prefilled";
static const char __pyx_k_print_proses_api[] = "print_proses_api";
static const char __pyx_k_sec_ch_ua_mobile[] = "sec-ch-ua-mobile";
static const char __pyx_k_x_fb_http_engine[] = "x-fb-http-engine";
static const char __pyx_k_x_tigon_is_retry[] = "x-tigon-is-retry";
static const char __pyx_k_yxdfb_Kynaraa_py[] = "yxdfb/Kynaraa.py";
static const char __pyx_k_123456_anjing_dll[] = "123456,anjing,dll";
static const char __pyx_k_1_600000023841858[] = "1.600000023841858";
static const char __pyx_k_com_facebook_orca[] = "com.facebook.orca";
static const char __pyx_k_data_result_CP_CP[] = "data/result/CP/CP-";
static const char __pyx_k_data_result_OK_OK[] = "data/result/OK/OK-";
static const char __pyx_k_error_detail_type[] = "error_detail_type";
static const char __pyx_k_server_timestamps[] = "server_timestamps";
static const char __pyx_k_user_agent_status[] = "user_agent_status";
static const char __pyx_k_x_fb_device_group[] = "x-fb-device-group";
static const char __pyx_k_Kynaa_print_proses[] = "Kynaa.print_proses";
static const char __pyx_k_ThreadPoolExecutor[] = "ThreadPoolExecutor";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_concurrent_futures[] = "concurrent.futures";
static const char __pyx_k_encrypted_password[] = "\\\",\\\"encrypted_password\\\":\\\"";
static const char __pyx_k_first_prefill_type[] = "first_prefill_type";
static const char __pyx_k_graph_facebook_com[] = "graph.facebook.com";
static const char __pyx_k_is_flipper_enabled[] = "is_flipper_enabled";
static const char __pyx_k_sec_ch_ua_platform[] = "sec-ch-ua-platform";
static const char __pyx_k_sementara_diblokir[] = "sementara diblokir";
static const char __pyx_k_unrecognized_tries[] = "unrecognized_tries";
static const char __pyx_k_using_white_navbar[] = "using_white_navbar";
static const char __pyx_k_x_fb_friendly_name[] = "x-fb-friendly-name";
static const char __pyx_k_bloks_versioning_id[] = "bloks_versioning_id";
static const char __pyx_k_client_country_code[] = "client_country_code";
static const char __pyx_k_com_facebook_katana[] = "com.facebook.katana";
static const char __pyx_k_fb_api_caller_class[] = "fb_api_caller_class";
static const char __pyx_k_name_c_user_value_d[] = "\"name\":\"c_user\",\"value\":\"(\\d+)\"";
static const char __pyx_k_x_fb_server_cluster[] = "x-fb-server-cluster";
static const char __pyx_k_80973453345210784798[] = "['80973453345210784798']";
static const char __pyx_k_button_with_disabled[] = "button_with_disabled";
static const char __pyx_k_first_prefill_source[] = "first_prefill_source";
static const char __pyx_k_https_x_facebook_com[] = "https://x.facebook.com";
static const char __pyx_k_mode_pesawat_5_detik[] = "] mode pesawat 5 detik. ";
static const char __pyx_k_x_fb_connection_type[] = "x-fb-connection-type";
static const char __pyx_k_x_fb_privacy_context[] = "x-fb-privacy-context";
static const char __pyx_k_fb_api_analytics_tags[] = "fb_api_analytics_tags";
static const char __pyx_k_prefill_contact_point[] = "prefill_contact_point";
static const char __pyx_k_Kynaa_print_proses_api[] = "Kynaa.print_proses_api";
static const char __pyx_k_aktivitas_mencurigakan[] = "aktivitas mencurigakan";
static const char __pyx_k_had_password_prefilled[] = "had_password_prefilled";
static const char __pyx_k_https_x_facebook_com_2[] = "https://x.facebook.com/";
static const char __pyx_k_UserAgent_bawaan_script[] = "UserAgent bawaan script";
static const char __pyx_k_secure_family_device_id[] = "secure_family_device_id";
static const char __pyx_k_FBMF_ITEL_FBBD_Itel_FBDV[] = ";FBMF/ITEL;FBBD/Itel;FBDV/";
static const char __pyx_k_UserAgent_yang_disetting[] = "UserAgent yang disetting";
static const char __pyx_k_fb_api_req_friendly_name[] = "fb_api_req_friendly_name";
static const char __pyx_k_generate_session_cookies[] = "generate_session_cookies";
static const char __pyx_k_provided_or_soft_matched[] = "provided_or_soft_matched";
static const char __pyx_k_terlalu_banyak_percobaan[] = "terlalu banyak percobaan";
static const char __pyx_k_x_graphql_client_library[] = "x-graphql-client-library";
static const char __pyx_k_anda_saat_ini_menggunakan[] = "] anda saat ini menggunakan ";
static const char __pyx_k_data_cache_sett_UaFB_json[] = "data/cache/.sett_UaFB.json";
static const char __pyx_k_fallback_triggered_s_true[] = "fallback_triggered\\\":\\s*true";
static const char __pyx_k_upgrade_insecure_requests[] = "upgrade-insecure-requests";
static const char __pyx_k_x_graphql_request_purpose[] = "x-graphql-request-purpose";
static const char __pyx_k_generate_random_user_agent[] = "generate_random_user_agent";
static const char __pyx_k_sec_ch_ua_platform_version[] = "sec-ch-ua-platform-version";
static const char __pyx_k_sec_ch_prefers_color_scheme[] = "sec-ch-prefers-color-scheme";
static const char __pyx_k_sec_ch_ua_full_version_list[] = "sec-ch-ua-full-version-list";
static const char __pyx_k_x_fb_request_analytics_tags[] = "x-fb-request-analytics-tags";
static const char __pyx_k_Dalvik_2_1_0_Linux_U_Android[] = "Dalvik/2.1.0 (Linux; U; Android ";
static const char __pyx_k_Kesalahan_Kueriterkena_batas[] = "Kesalahan Kueriterkena batas";
static const char __pyx_k_PROSES_CRACK_METODE_GRAPH_V1[] = "         PROSES CRACK METODE GRAPH V1";
static const char __pyx_k_PROSES_CRACK_METODE_GRAPH_V2[] = "         PROSES CRACK METODE GRAPH V2";
static const char __pyx_k_PROSES_CRACK_METODE_VALID_V1[] = "         PROSES CRACK METODE VALID V1";
static const char __pyx_k_PROSES_CRACK_METODE_VALID_V2[] = "         PROSES CRACK METODE VALID V2";
static const char __pyx_k_debug_tooling_metadata_token[] = "debug_tooling_metadata_token";
static const char __pyx_k_Kynaa_graph_v1_locals_genexpr[] = "Kynaa.graph_v1.<locals>.genexpr";
static const char __pyx_k_Kynaa_graph_v2_locals_genexpr[] = "Kynaa.graph_v2.<locals>.genexpr";
static const char __pyx_k_119940804214876861379510865434[] = "119940804214876861379510865434";
static const char __pyx_k_ON_OFF_MODE_PESAWAT_SETIAP_200[] = "             ON-OFF MODE PESAWAT SETIAP 200 ID";
static const char __pyx_k_User_must_verify_their_account[] = "User must verify their account";
static const char __pyx_k_https_x_facebook_com_login_php[] = "https://x.facebook.com/login.php?";
static const char __pyx_k_m_pixel_ratio_1_25_dpr_1_25_wd[] = ";m_pixel_ratio=1.25;dpr=1.25;wd=448x931;";
static const char __pyx_k_setiap_kata_minimal_6_karakter[] = ". setiap kata minimal 6 karakter atau lebih";
static const char __pyx_k_eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd[] = "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ...']";
static const char __pyx_k_gunakan_koma_untuk_pemisah_cont[] = "\n[!] gunakan , (koma) untuk pemisah contoh : ";
static const char __pyx_k_https_b_graph_facebook_com_auth[] = "https://b-graph.facebook.com/auth/login";
static const char __pyx_k_id_ID_id_q_0_9_en_US_q_0_8_en_q[] = "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7";
static const char __pyx_k_masukan_kata_sandi_tambahan_ops[] = "] masukan kata sandi tambahan (opsional) : ";
static const char __pyx_k_network_tags_product_3506855317[] = "{\"network_tags\":{\"product\":\"350685531728\",\"purpose\":\"fetch\",\"request_category\":\"graphql\",\"retry_attempt\":\"0\"},\"application_tags\":\"graphservice\"}";
static const char __pyx_k_params_client_input_params_devi[] = "{\"params\":\"{\\\"client_input_params\\\":{\\\"device_id\\\":\\\"db00d712-bd44-4358-bcf2-2fe14e2885d2\\\",\\\"lois_settings\\\":{\\\"lois_token\\\":\\\"\\\",\\\"lara_override\\\":\\\"\\\"},\\\"name\\\":null,\\\"machine_id\\\":\\\"FXQ7Z_eNU42Pnt5I_CpRlzIh\\\",\\\"profile_pic_url\\\":null,\\\"contact_point\\\":\\\"";
static const char __pyx_k_server_params_is_from_logged_ou[] = "\\\"},\\\"server_params\\\":{\\\"is_from_logged_out\\\":1,\\\"layered_homepage_experiment_group\\\":null,\\\"device_id\\\":\\\"db00d712-bd44-4358-bcf2-2fe14e2885d2\\\",\\\"waterfall_id\\\":\\\"278dd0ac-58b3-46e4-aa8e-ea55021589a6\\\",\\\"INTERNAL__latency_qpl_instance_id\\\":2.9809277900605E13,\\\"login_source\\\":\\\"Login\\\",\\\"is_platform_login\\\":0,\\\"INTERNAL__latency_qpl_marker_id\\\":36707139,\\\"family_device_id\\\":\\\"db00d712-bd44-4358-bcf2-2fe14e2885d2\\\",\\\"offline_experiment_group\\\":\\\"caa_iteration_v6_perf_fb_2\\\",\\\"INTERNAL_INFRA_THEME\\\":\\\"default,default\\\",\\\"access_flow_version\\\":\\\"F2_FLOW\\\",\\\"is_from_logged_in_switcher\\\":0}}\"}";
static const char __pyx_k_text_html_application_xhtml_xml[] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
static const char __pyx_k_3711cb070fe0ab5acd59ae663b1ae4dc[] = "3711cb070fe0ab5acd59ae663b1ae4dc75db6f0c463d26a232fd9d72a63fb3e5";
static const char __pyx_k_Anda_Tidak_Dapat_Menggunakan_Fit[] = "Anda Tidak Dapat Menggunakan Fitur Ini Sekarang";
static const char __pyx_k_AuthOperations_PasswordAuthOpera[] = "AuthOperations$PasswordAuthOperation";
static const char __pyx_k_FbBloksActionRootQuery_com_bloks[] = "FbBloksActionRootQuery-com.bloks.www.bloks.caa.login.async.send_google_smartlock_login_request";
static const char __pyx_k_Kynaa_generate_random_user_agent[] = "Kynaa.generate_random_user_agent";
static const char __pyx_k_Kynaa_print_proses_api_locals_ge[] = "Kynaa.print_proses_api.<locals>.genexpr";
static const char __pyx_k_OAuth_350685531728_62f8ce9f74b12[] = "OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32";
static const char __pyx_k_application_x_www_form_urlencode[] = "application/x-www-form-urlencoded";
static const char __pyx_k_c4663a0f_a919_4454_bf17_3d542589[] = "c4663a0f-a919-4454-bf17-3d542589eafe";
static const char __pyx_k_cfe75e13b386d5c54b1de2dcca1bee5a[] = "cfe75e13b386d5c54b1de2dcca1bee5a";
static const char __pyx_k_com_bloks_www_ap_two_step_verifi[] = "com.bloks.www.ap.two_step_verification.entrypoint_async";
static const char __pyx_k_com_bloks_www_bloks_caa_login_as[] = "com.bloks.www.bloks.caa.login.async.send_google_smartlock_login_request";
static const char __pyx_k_com_bloks_www_two_step_verificat[] = "com.bloks.www.two_step_verification.async.entrypoint";
static const char __pyx_k_https_graph_facebook_com_graphql[] = "https://graph.facebook.com/graphql";
static const char __pyx_k_https_touch_facebook_com_login_p[] = "https://touch.facebook.com/login.php?";
static const char __pyx_k_https_www_facebook_com_login_dev[] = "https://www.facebook.com/login/device-based/regular/login/?refsrc=deprecated&lwv=100&refid=9";
static const char __pyx_k_membatasi_seberapa_sering_Anda_d[] = "membatasi seberapa sering Anda dapat";
static const char __pyx_k_silakan_coba_lagi_nantiGagal_men[] = "silakan coba lagi nantiGagal menampilkan kueri";

static PyObject *__pyx_pf_7Kynaraa_5Kynaa___init__([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_aw);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_2save_hasil([[maybe_unused]] PyObject *__pyx_self, [[maybe_unused]] PyObject *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_data);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_4print_proses([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_code, PyObject *__pyx_v_gp);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_6notice([[maybe_unused]] PyObject *__pyx_self, [[maybe_unused]] PyObject *__pyx_v_self, PyObject *__pyx_v_tod);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_8abcd([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_asu);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_16print_proses_api_genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_10print_proses_api([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_response_text, PyObject *__pyx_v_gp);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_12generate_random_user_agent([[maybe_unused]] PyObject *__pyx_self, [[maybe_unused]] PyObject *__pyx_v_self);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_8graph_v1_genexpr([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_14graph_v1([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_user, PyObject *__pyx_v_pasw);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_8graph_v2_genexpr([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_16graph_v2([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_user, PyObject *__pyx_v_pasw);
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_18reguller([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_user, PyObject *__pyx_v_pasw, PyObject *__pyx_v_host, PyObject *__pyx_v_note);
static PyObject *__pyx_tp_new_7Kynaraa___pyx_scope_struct__print_proses_api(PyTypeObject *t, PyObject *a, PyObject *k);
static PyObject *__pyx_tp_new_7Kynaraa___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k);
static PyObject *__pyx_tp_new_7Kynaraa___pyx_scope_struct_2_genexpr(PyTypeObject *t, PyObject *a, PyObject *k);
static PyObject *__pyx_tp_new_7Kynaraa___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k);


typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;

  PyTypeObject *__pyx_CyFunctionType;





  PyTypeObject *__pyx_GeneratorType;
# 3121 "yxdfb/Kynaraa.cpp"
  PyTypeObject *__pyx_ptype_7Kynaraa___pyx_scope_struct__print_proses_api;
  PyTypeObject *__pyx_ptype_7Kynaraa___pyx_scope_struct_1_genexpr;
  PyTypeObject *__pyx_ptype_7Kynaraa___pyx_scope_struct_2_genexpr;
  PyTypeObject *__pyx_ptype_7Kynaraa___pyx_scope_struct_3_genexpr;
  PyObject *__pyx_kp_s_;
  PyObject *__pyx_kp_s_0;
  PyObject *__pyx_kp_s_01;
  PyObject *__pyx_kp_s_01710940017;
  PyObject *__pyx_kp_s_02;
  PyObject *__pyx_kp_u_0_0;
  PyObject *__pyx_kp_u_0_0_0_Chromium_v;
  PyObject *__pyx_kp_u_0_2;
  PyObject *__pyx_kp_s_0_3;
  PyObject *__pyx_kp_s_0_31m;
  PyObject *__pyx_kp_s_0m;
  PyObject *__pyx_kp_s_1;
  PyObject *__pyx_kp_s_11;
  PyObject *__pyx_kp_s_119940804214876861379510865434;
  PyObject *__pyx_kp_s_12;
  PyObject *__pyx_kp_s_123;
  PyObject *__pyx_kp_s_1234;
  PyObject *__pyx_kp_s_12345;
  PyObject *__pyx_kp_s_123456;
  PyObject *__pyx_kp_s_123456789;
  PyObject *__pyx_kp_u_123456_anjing_dll;
  PyObject *__pyx_kp_s_12345_2;
  PyObject *__pyx_kp_s_1234_2;
  PyObject *__pyx_kp_s_123_2;
  PyObject *__pyx_kp_s_13;
  PyObject *__pyx_kp_s_14;
  PyObject *__pyx_kp_s_1633;
  PyObject *__pyx_kp_s_1_2;
  PyObject *__pyx_kp_s_1_600000023841858;
  PyObject *__pyx_kp_s_1_92m;
  PyObject *__pyx_kp_s_1_93m;
  PyObject *__pyx_kp_u_1f;
  PyObject *__pyx_kp_s_2;
  PyObject *__pyx_kp_u_200;
  PyObject *__pyx_kp_s_321;
  PyObject *__pyx_kp_s_3643298472347298;
  PyObject *__pyx_kp_s_3711cb070fe0ab5acd59ae663b1ae4dc;
  PyObject *__pyx_kp_u_400;
  PyObject *__pyx_kp_u_401;
  PyObject *__pyx_kp_u_403;
  PyObject *__pyx_kp_u_404;
  PyObject *__pyx_kp_u_429;
  PyObject *__pyx_kp_u_500;
  PyObject *__pyx_kp_s_51001;
  PyObject *__pyx_kp_s_51011;
  PyObject *__pyx_kp_s_80973453345210784798;
  PyObject *__pyx_kp_s_980;
  PyObject *__pyx_n_s_AXIS;
  PyObject *__pyx_kp_s_Accept_Encoding;
  PyObject *__pyx_kp_s_Anda_Tidak_Dapat_Menggunakan_Fit;
  PyObject *__pyx_kp_s_AuthOperations_PasswordAuthOpera;
  PyObject *__pyx_n_s_Authorization;
  PyObject *__pyx_n_s_BeautifulSoup;
  PyObject *__pyx_kp_u_Build;
  PyObject *__pyx_kp_u_CP;
  PyObject *__pyx_n_u_CP_2;
  PyObject *__pyx_kp_u_Chromium_v;
  PyObject *__pyx_n_s_Connection;
  PyObject *__pyx_n_s_ConnectionError;
  PyObject *__pyx_kp_s_Content_Type;
  PyObject *__pyx_kp_s_Cracking_selesai;
  PyObject *__pyx_kp_u_Dalvik_2_1_0_Linux_U_Android;
  PyObject *__pyx_n_s_FB4A;
  PyObject *__pyx_n_s_FBAN;
  PyObject *__pyx_kp_u_FBAN_2;
  PyObject *__pyx_kp_u_FBAV;
  PyObject *__pyx_kp_u_FBBV;
  PyObject *__pyx_kp_u_FBCA;
  PyObject *__pyx_kp_u_FBCR;
  PyObject *__pyx_kp_u_FBDM_density;
  PyObject *__pyx_kp_u_FBLC;
  PyObject *__pyx_kp_u_FBMF_ITEL_FBBD_Itel_FBDV;
  PyObject *__pyx_kp_u_FBPN;
  PyObject *__pyx_kp_u_FBSV;
  PyObject *__pyx_kp_u_FB_FW;
  PyObject *__pyx_n_s_False;
  PyObject *__pyx_kp_s_FbBloksActionRootQuery_com_bloks;
  PyObject *__pyx_kp_s_GRAPH_V1;
  PyObject *__pyx_kp_u_GRAPH_V1_2;
  PyObject *__pyx_kp_s_GRAPH_V2;
  PyObject *__pyx_kp_u_Google_Chrome_v;
  PyObject *__pyx_kp_s_GraphServices;
  PyObject *__pyx_n_s_H;
  PyObject *__pyx_n_s_Host;
  PyObject *__pyx_n_s_ID;
  PyObject *__pyx_n_s_IGNORECASE;
  PyObject *__pyx_n_s_INDOSAT;
  PyObject *__pyx_n_s_K;
  PyObject *__pyx_kp_s_Kesalahan_Kueriterkena_batas;
  PyObject *__pyx_n_s_Kynaa;
  PyObject *__pyx_n_s_Kynaa___init;
  PyObject *__pyx_n_s_Kynaa_abcd;
  PyObject *__pyx_n_s_Kynaa_generate_random_user_agent;
  PyObject *__pyx_n_s_Kynaa_graph_v1;
  PyObject *__pyx_n_s_Kynaa_graph_v1_locals_genexpr;
  PyObject *__pyx_n_s_Kynaa_graph_v2;
  PyObject *__pyx_n_s_Kynaa_graph_v2_locals_genexpr;
  PyObject *__pyx_n_s_Kynaa_notice;
  PyObject *__pyx_n_s_Kynaa_print_proses;
  PyObject *__pyx_n_s_Kynaa_print_proses_api;
  PyObject *__pyx_n_s_Kynaa_print_proses_api_locals_ge;
  PyObject *__pyx_n_s_Kynaa_reguller;
  PyObject *__pyx_n_s_Kynaa_save_hasil;
  PyObject *__pyx_n_s_Kynaraa;
  PyObject *__pyx_kp_s_Linux;
  PyObject *__pyx_n_s_Logo;
  PyObject *__pyx_kp_s_MOBILE_LTE;
  PyObject *__pyx_n_s_Module;
  PyObject *__pyx_n_s_N;
  PyObject *__pyx_kp_u_Not_A_Brand_v;
  PyObject *__pyx_kp_s_OAuth_350685531728_62f8ce9f74b12;
  PyObject *__pyx_kp_u_OK;
  PyObject *__pyx_n_u_OK_2;
  PyObject *__pyx_kp_s_ON_OFF_MODE_PESAWAT_SETIAP_200;
  PyObject *__pyx_kp_s_Orca_Android;
  PyObject *__pyx_kp_u_PROSES_CRACK_METODE_GRAPH_V1;
  PyObject *__pyx_kp_u_PROSES_CRACK_METODE_GRAPH_V2;
  PyObject *__pyx_kp_u_PROSES_CRACK_METODE_VALID_V1;
  PyObject *__pyx_kp_u_PROSES_CRACK_METODE_VALID_V2;
  PyObject *__pyx_kp_s_PWD_FB4A_0;
  PyObject *__pyx_n_s_Password;
  PyObject *__pyx_n_s_Priority;
  PyObject *__pyx_n_s_Pws;
  PyObject *__pyx_kp_s_QP1A_190711_020;
  PyObject *__pyx_n_s_R;
  PyObject *__pyx_kp_s_RP1A_200720_011;
  PyObject *__pyx_kp_s_SP1A_210812_016;
  PyObject *__pyx_n_s_Session;
  PyObject *__pyx_n_s_TELKOMSEL;
  PyObject *__pyx_n_s_THREE;
  PyObject *__pyx_kp_s_TP1A_220905_001;
  PyObject *__pyx_n_s_ThreadPoolExecutor;
  PyObject *__pyx_kp_s_Tigon_Liger;
  PyObject *__pyx_n_s_Tod;
  PyObject *__pyx_n_s_True;
  PyObject *__pyx_kp_s_UP1A_231005_007;
  PyObject *__pyx_n_s_UserAgent;
  PyObject *__pyx_kp_s_UserAgent_bawaan_script;
  PyObject *__pyx_kp_s_UserAgent_yang_disetting;
  PyObject *__pyx_kp_s_User_Agent;
  PyObject *__pyx_kp_s_User_must_verify_their_account;
  PyObject *__pyx_kp_s_VALID_V1;
  PyObject *__pyx_kp_s_VALID_V2;
  PyObject *__pyx_n_s_XL;
  PyObject *__pyx_n_s__10;
  PyObject *__pyx_kp_u__10;
  PyObject *__pyx_kp_s__11;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_n_s__13;
  PyObject *__pyx_kp_u__13;
  PyObject *__pyx_kp_u__14;
  PyObject *__pyx_kp_u__15;
  PyObject *__pyx_kp_s__16;
  PyObject *__pyx_kp_s__17;
  PyObject *__pyx_kp_s__20;
  PyObject *__pyx_kp_u__20;
  PyObject *__pyx_kp_u__24;
  PyObject *__pyx_kp_u__3;
  PyObject *__pyx_kp_u__31;
  PyObject *__pyx_kp_u__32;
  PyObject *__pyx_kp_s__33;
  PyObject *__pyx_kp_u__33;
  PyObject *__pyx_kp_s__35;
  PyObject *__pyx_kp_s__38;
  PyObject *__pyx_n_s__39;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_kp_s__41;
  PyObject *__pyx_kp_s__43;
  PyObject *__pyx_kp_u__43;
  PyObject *__pyx_kp_u__44;
  PyObject *__pyx_kp_u__45;
  PyObject *__pyx_kp_s__46;
  PyObject *__pyx_kp_s__47;
  PyObject *__pyx_kp_u__5;
  PyObject *__pyx_kp_u__50;
  PyObject *__pyx_kp_s__53;
  PyObject *__pyx_kp_s__6;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_s__7;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_kp_s__8;
  PyObject *__pyx_kp_u__9;
  PyObject *__pyx_n_s_a;
  PyObject *__pyx_n_s_abcd;
  PyObject *__pyx_n_s_accept;
  PyObject *__pyx_kp_s_accept_encoding;
  PyObject *__pyx_kp_s_accept_language;
  PyObject *__pyx_n_s_access_token;
  PyObject *__pyx_n_s_account_recovery;
  PyObject *__pyx_n_s_adid;
  PyObject *__pyx_kp_s_aktivitas_mencurigakan;
  PyObject *__pyx_n_s_allow_redirects;
  PyObject *__pyx_n_u_aman;
  PyObject *__pyx_kp_u_anda_saat_ini_menggunakan;
  PyObject *__pyx_n_s_android_login;
  PyObject *__pyx_n_s_android_versions;
  PyObject *__pyx_n_s_apcb;
  PyObject *__pyx_n_s_app_id;
  PyObject *__pyx_kp_s_application_x_www_form_urlencode;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_kp_s_arm64_v8a;
  PyObject *__pyx_kp_s_armeabi_v7a;
  PyObject *__pyx_n_s_asu;
  PyObject *__pyx_n_s_asw;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_kp_s_auth_login;
  PyObject *__pyx_n_s_authenticate;
  PyObject *__pyx_n_s_authority;
  PyObject *__pyx_n_s_authorization;
  PyObject *__pyx_n_s_aw;
  PyObject *__pyx_n_s_b64encode;
  PyObject *__pyx_n_s_base64;
  PyObject *__pyx_n_s_belakang;
  PyObject *__pyx_n_s_bloks_version;
  PyObject *__pyx_n_s_bloks_versioning_id;
  PyObject *__pyx_n_s_bluid_data;
  PyObject *__pyx_n_s_bluid_logo;
  PyObject *__pyx_kp_s_br_gzip;
  PyObject *__pyx_n_s_bs4;
  PyObject *__pyx_n_s_build_ids;
  PyObject *__pyx_n_s_button_with_disabled;
  PyObject *__pyx_kp_s_c4663a0f_a919_4454_bf17_3d542589;
  PyObject *__pyx_n_s_c_user;
  PyObject *__pyx_kp_s_cache_control;
  PyObject *__pyx_n_s_cfe75e13b386d5c54b1de2dcca1bee5a;
  PyObject *__pyx_n_s_checkpoint;
  PyObject *__pyx_n_s_choice;
  PyObject *__pyx_n_s_client_country_code;
  PyObject *__pyx_n_s_client_doc_id;
  PyObject *__pyx_n_s_client_trace_id;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_code;
  PyObject *__pyx_n_s_coki;
  PyObject *__pyx_n_s_cokie;
  PyObject *__pyx_n_s_cokz;
  PyObject *__pyx_kp_s_com_bloks_www_ap_two_step_verifi;
  PyObject *__pyx_kp_s_com_bloks_www_bloks_caa_login_as;
  PyObject *__pyx_kp_s_com_bloks_www_two_step_verificat;
  PyObject *__pyx_kp_s_com_facebook_katana;
  PyObject *__pyx_kp_s_com_facebook_orca;
  PyObject *__pyx_n_s_concurrent_futures;
  PyObject *__pyx_n_s_contact_point;
  PyObject *__pyx_kp_s_content_type;
  PyObject *__pyx_n_s_cookie;
  PyObject *__pyx_n_s_cookies;
  PyObject *__pyx_n_s_cp;
  PyObject *__pyx_n_s_cpl;
  PyObject *__pyx_n_s_curl;
  PyObject *__pyx_n_s_dark;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_kp_s_data_cache_sett_UaFB_json;
  PyObject *__pyx_kp_u_data_result_CP_CP;
  PyObject *__pyx_kp_u_data_result_OK_OK;
  PyObject *__pyx_n_s_datr;
  PyObject *__pyx_kp_u_datr_2;
  PyObject *__pyx_n_s_debug_tooling_metadata_token;
  PyObject *__pyx_n_s_decode;
  PyObject *__pyx_n_s_densities;
  PyObject *__pyx_n_s_depan;
  PyObject *__pyx_n_s_device_id;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_document;
  PyObject *__pyx_n_s_dpr;
  PyObject *__pyx_n_s_dumps;
  PyObject *__pyx_n_s_email;
  PyObject *__pyx_n_s_en_US;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_kp_s_encrypted_password;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_s_enter;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_error_detail_type;
  PyObject *__pyx_n_s_es_ES;
  PyObject *__pyx_n_s_exceptions;
  PyObject *__pyx_n_s_executor;
  PyObject *__pyx_n_s_exists;
  PyObject *__pyx_n_s_exit;
  PyObject *__pyx_n_s_exit_2;
  PyObject *__pyx_kp_s_eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd;
  PyObject *__pyx_kp_s_fallback_triggered_s_true;
  PyObject *__pyx_n_s_false;
  PyObject *__pyx_n_s_family_device_id;
  PyObject *__pyx_n_s_fb_api_analytics_tags;
  PyObject *__pyx_n_s_fb_api_caller_class;
  PyObject *__pyx_n_s_fb_api_req_friendly_name;
  PyObject *__pyx_n_s_fb_fw;
  PyObject *__pyx_n_s_fb_noscript;
  PyObject *__pyx_n_s_fbans;
  PyObject *__pyx_n_s_fbavs;
  PyObject *__pyx_n_s_fbbvs;
  PyObject *__pyx_n_s_fbcas;
  PyObject *__pyx_n_s_fbcrs;
  PyObject *__pyx_n_s_fblcs;
  PyObject *__pyx_n_s_fbpns;
  PyObject *__pyx_n_s_fesnuk;
  PyObject *__pyx_n_s_fetch;
  PyObject *__pyx_n_s_file;
  PyObject *__pyx_n_s_filename;
  PyObject *__pyx_n_s_find;
  PyObject *__pyx_n_s_first_prefill_source;
  PyObject *__pyx_n_s_first_prefill_type;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_fr;
  PyObject *__pyx_n_s_fr_FR;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_generate_random_user_agent;
  PyObject *__pyx_n_s_generate_session_cookies;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_get_dict;
  PyObject *__pyx_n_s_google;
  PyObject *__pyx_n_s_gp;
  PyObject *__pyx_kp_s_graph_facebook_com;
  PyObject *__pyx_n_s_graph_v1;
  PyObject *__pyx_n_s_graph_v2;
  PyObject *__pyx_n_s_graphservice;
  PyObject *__pyx_n_s_group;
  PyObject *__pyx_kp_u_gunakan_koma_untuk_pemisah_cont;
  PyObject *__pyx_kp_s_gzip_deflate;
  PyObject *__pyx_n_s_had_cp_prefilled;
  PyObject *__pyx_n_s_had_password_prefilled;
  PyObject *__pyx_n_s_head;
  PyObject *__pyx_n_s_headers;
  PyObject *__pyx_kp_u_height;
  PyObject *__pyx_n_s_host;
  PyObject *__pyx_kp_s_html_parser;
  PyObject *__pyx_kp_s_https_b_graph_facebook_com_auth;
  PyObject *__pyx_kp_s_https_graph_facebook_com_graphql;
  PyObject *__pyx_kp_s_https_touch_facebook_com_login_p;
  PyObject *__pyx_kp_u_https_www_facebook_com_login_dev;
  PyObject *__pyx_kp_s_https_x_facebook_com;
  PyObject *__pyx_kp_s_https_x_facebook_com_2;
  PyObject *__pyx_kp_s_https_x_facebook_com_login_php;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_n_s_id_ID;
  PyObject *__pyx_kp_s_id_ID_id_q_0_9_en_US_q_0_8_en_q;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_input;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_flipper_enabled;
  PyObject *__pyx_n_s_is_push_on;
  PyObject *__pyx_n_s_is_smart_lock;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_kp_s_itel_S666LN;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_s_jazoest;
  PyObject *__pyx_n_s_join;
  PyObject *__pyx_n_s_json;
  PyObject *__pyx_kp_s_keep_alive;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_kyan;
  PyObject *__pyx_n_s_kyna;
  PyObject *__pyx_n_s_li;
  PyObject *__pyx_n_s_locale;
  PyObject *__pyx_n_s_lop;
  PyObject *__pyx_n_s_lower;
  PyObject *__pyx_n_s_lsd;
  PyObject *__pyx_kp_u_m_pixel_ratio_1_25_dpr_1_25_wd;
  PyObject *__pyx_n_s_m_ts;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_kp_u_masukan_kata_sandi_tambahan_ops;
  PyObject *__pyx_kp_s_max_age_0;
  PyObject *__pyx_n_s_max_workers;
  PyObject *__pyx_kp_s_membatasi_seberapa_sering_Anda_d;
  PyObject *__pyx_n_s_message;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_method;
  PyObject *__pyx_kp_u_mode_pesawat_5_detik;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_nama;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_kp_s_name_c_user_value_d;
  PyObject *__pyx_kp_s_name_datr_value;
  PyObject *__pyx_kp_s_name_fr_value;
  PyObject *__pyx_kp_s_name_xs_value;
  PyObject *__pyx_n_s_navigate;
  PyObject *__pyx_kp_s_network_tags_product_3506855317;
  PyObject *__pyx_n_s_note;
  PyObject *__pyx_n_s_notice;
  PyObject *__pyx_n_s_nt_context;
  PyObject *__pyx_n_s_ok;
  PyObject *__pyx_n_s_open;
  PyObject *__pyx_n_s_openid_emails;
  PyObject *__pyx_n_s_openid_flow;
  PyObject *__pyx_n_s_openid_provider;
  PyObject *__pyx_n_s_openid_tokens;
  PyObject *__pyx_n_s_origin;
  PyObject *__pyx_n_s_os;
  PyObject *__pyx_n_s_params;
  PyObject *__pyx_kp_s_params_client_input_params_devi;
  PyObject *__pyx_n_s_pass;
  PyObject *__pyx_n_s_password;
  PyObject *__pyx_n_s_password_manual;
  PyObject *__pyx_n_s_pasw;
  PyObject *__pyx_n_s_path;
  PyObject *__pyx_n_s_phone_models;
  PyObject *__pyx_n_s_pixel_ratio;
  PyObject *__pyx_n_s_post;
  PyObject *__pyx_n_s_prefill_contact_point;
  PyObject *__pyx_n_s_prefill_source;
  PyObject *__pyx_n_s_prefill_type;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_pretty;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_print_proses;
  PyObject *__pyx_n_s_print_proses_api;
  PyObject *__pyx_n_s_provided_or_soft_matched;
  PyObject *__pyx_n_s_purpose;
  PyObject *__pyx_n_s_pw;
  PyObject *__pyx_n_s_pwek;
  PyObject *__pyx_n_s_pwnya;
  PyObject *__pyx_n_s_q;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_randint;
  PyObject *__pyx_n_s_random;
  PyObject *__pyx_n_s_re;
  PyObject *__pyx_n_s_referer;
  PyObject *__pyx_n_s_reguller;
  PyObject *__pyx_n_s_replace;
  PyObject *__pyx_n_s_requests;
  PyObject *__pyx_n_s_response;
  PyObject *__pyx_n_s_response_text;
  PyObject *__pyx_n_s_rr;
  PyObject *__pyx_kp_s_s_s;
  PyObject *__pyx_kp_s_same_origin;
  PyObject *__pyx_kp_u_sandi_tambahan;
  PyObject *__pyx_n_s_save_hasil;
  PyObject *__pyx_n_s_sb;
  PyObject *__pyx_n_s_scale;
  PyObject *__pyx_n_s_screen_height;
  PyObject *__pyx_n_s_screen_width;
  PyObject *__pyx_n_s_search;
  PyObject *__pyx_kp_s_sec_ch_prefers_color_scheme;
  PyObject *__pyx_kp_s_sec_ch_ua;
  PyObject *__pyx_kp_s_sec_ch_ua_full_version_list;
  PyObject *__pyx_kp_s_sec_ch_ua_mobile;
  PyObject *__pyx_kp_s_sec_ch_ua_model;
  PyObject *__pyx_kp_s_sec_ch_ua_platform;
  PyObject *__pyx_kp_s_sec_ch_ua_platform_version;
  PyObject *__pyx_kp_s_sec_fetch_dest;
  PyObject *__pyx_kp_s_sec_fetch_mode;
  PyObject *__pyx_kp_s_sec_fetch_site;
  PyObject *__pyx_kp_s_sec_fetch_user;
  PyObject *__pyx_n_s_secure_family_device_id;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_sementara_diblokir;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_kp_s_server_params_is_from_logged_ou;
  PyObject *__pyx_n_s_server_timestamps;
  PyObject *__pyx_n_s_ses;
  PyObject *__pyx_n_s_session_cookies;
  PyObject *__pyx_n_s_session_key;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_kp_u_setiap_kata_minimal_6_karakter;
  PyObject *__pyx_kp_s_silakan_coba_lagi_nantiGagal_men;
  PyObject *__pyx_n_s_sim_serials;
  PyObject *__pyx_n_s_sleep;
  PyObject *__pyx_n_s_source;
  PyObject *__pyx_n_u_spam;
  PyObject *__pyx_n_s_spam_patterns;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_split;
  PyObject *__pyx_n_s_ss;
  PyObject *__pyx_n_s_status_code;
  PyObject *__pyx_n_s_stdout;
  PyObject *__pyx_n_s_styles_id;
  PyObject *__pyx_n_s_submit;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_szaz;
  PyObject *__pyx_kp_s_terlalu_banyak_percobaan;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_text;
  PyObject *__pyx_kp_s_text_html_application_xhtml_xml;
  PyObject *__pyx_n_s_tggl;
  PyObject *__pyx_n_s_theme_params;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_n_s_time;
  PyObject *__pyx_n_s_tod;
  PyObject *__pyx_n_s_true;
  PyObject *__pyx_n_s_try_num;
  PyObject *__pyx_n_s_try_number;
  PyObject *__pyx_kp_u_txt;
  PyObject *__pyx_kp_s_u_3_i;
  PyObject *__pyx_n_s_ua;
  PyObject *__pyx_n_s_ua_fb_val;
  PyObject *__pyx_n_s_uid;
  PyObject *__pyx_n_s_uniform;
  PyObject *__pyx_n_s_unrecognized_tries;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_kp_s_upgrade_insecure_requests;
  PyObject *__pyx_n_s_upper;
  PyObject *__pyx_n_s_urandom;
  PyObject *__pyx_n_s_user;
  PyObject *__pyx_kp_s_user_agent;
  PyObject *__pyx_n_s_user_agent_2;
  PyObject *__pyx_n_s_user_agent_status;
  PyObject *__pyx_n_s_using_white_navbar;
  PyObject *__pyx_n_s_uuid;
  PyObject *__pyx_n_s_uuid4;
  PyObject *__pyx_n_s_valid_v1;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_variables;
  PyObject *__pyx_kp_s_viewport_width;
  PyObject *__pyx_kp_u_width;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_s_x86;
  PyObject *__pyx_kp_s_x_facebook_com;
  PyObject *__pyx_kp_s_x_fb_client_ip;
  PyObject *__pyx_kp_s_x_fb_connection_type;
  PyObject *__pyx_kp_s_x_fb_device_group;
  PyObject *__pyx_kp_s_x_fb_friendly_name;
  PyObject *__pyx_kp_s_x_fb_http_engine;
  PyObject *__pyx_kp_s_x_fb_net_hni;
  PyObject *__pyx_kp_s_x_fb_privacy_context;
  PyObject *__pyx_kp_s_x_fb_request_analytics_tags;
  PyObject *__pyx_kp_s_x_fb_server_cluster;
  PyObject *__pyx_kp_s_x_fb_sim_hni;
  PyObject *__pyx_kp_s_x_graphql_client_library;
  PyObject *__pyx_kp_s_x_graphql_request_purpose;
  PyObject *__pyx_kp_s_x_tigon_is_retry;
  PyObject *__pyx_n_s_xpw;
  PyObject *__pyx_n_s_xpwd;
  PyObject *__pyx_n_s_xs;
  PyObject *__pyx_kp_s_yxdfb_Kynaraa_py;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_3_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_6;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_10;
  PyObject *__pyx_int_15;
  PyObject *__pyx_int_18;
  PyObject *__pyx_int_20;
  PyObject *__pyx_int_30;
  PyObject *__pyx_int_40;
  PyObject *__pyx_int_75;
  PyObject *__pyx_int_114;
  PyObject *__pyx_int_200;
  PyObject *__pyx_int_300;
  PyObject *__pyx_int_399;
  PyObject *__pyx_int_400;
  PyObject *__pyx_int_401;
  PyObject *__pyx_int_403;
  PyObject *__pyx_int_404;
  PyObject *__pyx_int_429;
  PyObject *__pyx_int_500;
  PyObject *__pyx_int_720;
  PyObject *__pyx_int_1280;
  PyObject *__pyx_int_1440;
  PyObject *__pyx_int_2000;
  PyObject *__pyx_int_2880;
  PyObject *__pyx_int_5999;
  PyObject *__pyx_int_300000000;
  PyObject *__pyx_int_600000000;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__37;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__49;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__59;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__63;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__71;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__62;
  PyObject *__pyx_codeobj__64;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__70;
  PyObject *__pyx_codeobj__72;
  PyObject *__pyx_codeobj__74;
} __pyx_mstate;
# 3751 "yxdfb/Kynaraa.cpp"
static __pyx_mstate __pyx_mstate_global_static =

    {};



static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
# 5688 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_1__init__(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_1__init__ = {"__init__", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_1__init__, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_1__init__(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_aw = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                     ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_id,&__pyx_mstate_global->__pyx_n_s_aw,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 3: values[2] = __pyx_args[2];
        [[fallthrough]];
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 5746; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_id)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 5754; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 5756; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 2:
        if (__builtin_expect(!!((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_aw)) != 0), 1)) {
          (void)values[2];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 5764; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 5766; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 5771; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 3), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
      values[2] = __pyx_args[2];
    }
    __pyx_v_self = values[0];
    __pyx_v_id = values[1];
    __pyx_v_aw = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 5786; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa___init__(__pyx_self, __pyx_v_self, __pyx_v_id, __pyx_v_aw);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}

static PyObject *__pyx_pf_7Kynaraa_5Kynaa___init__([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_aw) {
  PyObject *__pyx_r = __null;

  PyObject *__pyx_t_1 = __null;
  PyObject *__pyx_t_2 = __null;
  PyObject *__pyx_t_3 = __null;
  unsigned int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                           ;
# 5832 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = __pyx_v_id;
  Py_INCREF(((PyObject*)((__pyx_t_1))));
  __pyx_t_2 = __pyx_v_aw;
  Py_INCREF(((PyObject*)((__pyx_t_2))));
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_asu, __pyx_t_1) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 20; (void)__pyx_lineno; __pyx_clineno = 5836; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_asw, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 20; (void)__pyx_lineno; __pyx_clineno = 5838; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
# 5848 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_requests); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 21; (void)__pyx_lineno; __pyx_clineno = 5848; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_Session); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 21; (void)__pyx_lineno; __pyx_clineno = 5850; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __null;
  __pyx_t_4 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyMethod_Type))), 0)) {
    __pyx_t_1 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_3))));
    if (__builtin_expect(!!(__pyx_t_1), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_3))));
      Py_INCREF(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_3; __pyx_t_3 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_4 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __null};
    __pyx_t_2 = __Pyx_PyObject_FastCallDict(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 21; (void)__pyx_lineno; __pyx_clineno = 5871; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  }
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ses, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 21; (void)__pyx_lineno; __pyx_clineno = 5875; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
# 5885 "yxdfb/Kynaraa.cpp"
  __pyx_t_2 = __pyx_mstate_global->__pyx_int_0;
  Py_INCREF(((PyObject*)((__pyx_t_2))));
  __pyx_t_3 = __pyx_mstate_global->__pyx_int_0;
  Py_INCREF(((PyObject*)((__pyx_t_3))));
  __pyx_t_1 = __pyx_mstate_global->__pyx_int_0;
  Py_INCREF(((PyObject*)((__pyx_t_1))));
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 22; (void)__pyx_lineno; __pyx_clineno = 5891; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp, __pyx_t_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 22; (void)__pyx_lineno; __pyx_clineno = 5893; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop, __pyx_t_1) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 22; (void)__pyx_lineno; __pyx_clineno = 5895; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 5907 "yxdfb/Kynaraa.cpp"
  __pyx_r = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_2))));
  Py_XDECREF(((PyObject*)((__pyx_t_3))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
                         ;
                               ;
  return __pyx_r;
}
# 5930 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_3save_hasil(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_3save_hasil = {"save_hasil", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_3save_hasil, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_3save_hasil(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  [[maybe_unused]] PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_data = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                       ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_filename,&__pyx_mstate_global->__pyx_n_s_data,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 3: values[2] = __pyx_args[2];
        [[fallthrough]];
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 5988; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_filename)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 5996; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("save_hasil", 1, 3, 3, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 5998; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 2:
        if (__builtin_expect(!!((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_data)) != 0), 1)) {
          (void)values[2];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 6006; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("save_hasil", 1, 3, 3, 2); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 6008; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "save_hasil") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 6013; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 3), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
      values[2] = __pyx_args[2];
    }
    __pyx_v_self = values[0];
    __pyx_v_filename = values[1];
    __pyx_v_data = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_hasil", 1, 3, 3, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 6028; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.save_hasil", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_2save_hasil(__pyx_self, __pyx_v_self, __pyx_v_filename, __pyx_v_data);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}

static PyObject *__pyx_pf_7Kynaraa_5Kynaa_2save_hasil([[maybe_unused]] PyObject *__pyx_self, [[maybe_unused]] PyObject *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_data) {
  PyObject *__pyx_v_file = __null;
  PyObject *__pyx_r = __null;

  PyObject *__pyx_t_1 = __null;
  PyObject *__pyx_t_2 = __null;
  PyObject *__pyx_t_3 = __null;
  PyObject *__pyx_t_4 = __null;
  PyObject *__pyx_t_5 = __null;
  unsigned int __pyx_t_6;
  PyObject *__pyx_t_7 = __null;
  PyObject *__pyx_t_8 = __null;
  PyObject *__pyx_t_9 = __null;
  PyObject *__pyx_t_10 = __null;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                             ;
# 6083 "yxdfb/Kynaraa.cpp"
            {
    __pyx_t_1 = PyTuple_New(2); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6084; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_INCREF(((PyObject*)((__pyx_v_filename))));
                                   ;
    if ((PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_v_filename)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6088; (void)__pyx_clineno; } goto __pyx_L1_error; };
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_a))));
                              ;
    if ((PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_a)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6091; (void)__pyx_clineno; } goto __pyx_L1_error; };
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6092; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx__PyObject_LookupSpecial(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_exit_2, 1); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6095; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_4 = __Pyx__PyObject_LookupSpecial(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_enter, 1); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6097; (void)__pyx_clineno; } goto __pyx_L3_error; }
                           ;
    __pyx_t_5 = __null;
    __pyx_t_6 = 0;

    if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 1)) {
      __pyx_t_5 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
      if (__builtin_expect(!!(__pyx_t_5), 1)) {
        PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
        Py_INCREF(((PyObject*)((__pyx_t_5))));
        Py_INCREF(((PyObject*)((function))));
        do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_6 = 1;
      }
    }

    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __null};
      __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, (size_t)(0+__pyx_t_6), __null);
      Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
      if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6117; (void)__pyx_clineno; } goto __pyx_L3_error; }
                             ;
      Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    }
    __pyx_t_4 = __pyx_t_1;
    __pyx_t_1 = 0;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
             {
      {
        PyThreadState *__pyx_tstate;
        __pyx_tstate = _PyThreadState_UncheckedGet();
        __Pyx__ExceptionSave(__pyx_tstate, &__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
                                ;
                                ;
                                ;
                 {
          __pyx_v_file = __pyx_t_4;
          __pyx_t_4 = 0;
# 6143 "yxdfb/Kynaraa.cpp"
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_mstate_global->__pyx_n_s_write); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 26; (void)__pyx_lineno; __pyx_clineno = 6143; (void)__pyx_clineno; } goto __pyx_L7_error; }
                                 ;
          __pyx_t_1 = PyNumber_Add(__pyx_v_data, __pyx_mstate_global->__pyx_kp_s_); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 26; (void)__pyx_lineno; __pyx_clineno = 6145; (void)__pyx_clineno; } goto __pyx_L7_error; }
                                 ;
          __pyx_t_5 = __null;
          __pyx_t_6 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyMethod_Type))), 1)) {
            __pyx_t_5 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_2))));
            if (__builtin_expect(!!(__pyx_t_5), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_2))));
              Py_INCREF(((PyObject*)((__pyx_t_5))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_2; __pyx_t_2 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_6 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_1};
            __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
            if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 26; (void)__pyx_lineno; __pyx_clineno = 6166; (void)__pyx_clineno; } goto __pyx_L7_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
# 6179 "yxdfb/Kynaraa.cpp"
        }
        Py_XDECREF(((PyObject*)((__pyx_t_7)))); __pyx_t_7 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
                    {
          __Pyx_AddTraceback("Kynaraa.Kynaa.save_hasil", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx__GetException(__pyx_tstate, &__pyx_t_4, &__pyx_t_2, &__pyx_t_1) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6191; (void)__pyx_clineno; } goto __pyx_L9_except_error; }
                                  ;
                                  ;
                                  ;
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_2, __pyx_t_1); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6195; (void)__pyx_clineno; } goto __pyx_L9_except_error; }
                                 ;
          __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __null);
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
          if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6200; (void)__pyx_clineno; } goto __pyx_L9_except_error; }
                                  ;
          __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_10);
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          if (__pyx_t_11 < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6204; (void)__pyx_clineno; } goto __pyx_L9_except_error; }
          __pyx_t_12 = (!__pyx_t_11);
          if (__builtin_expect(!!(__pyx_t_12), 0)) {
                                    ;
                                    ;
                                     ;
            __Pyx_ErrRestoreInState(PyThreadState_Get(), __pyx_t_4, __pyx_t_2, __pyx_t_1);
            __pyx_t_4 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0;
            { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6212; (void)__pyx_clineno; } goto __pyx_L9_except_error; }
          }
          Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          Py_XDECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
          Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
                                 ;
                                 ;
                                 ;
        __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
                                 ;
                                 ;
                                 ;
        __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L12_try_end:;
      }
    }
                 {
                      {
        if (__pyx_t_3) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_mstate_global->__pyx_tuple__2, __null);
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 6238; (void)__pyx_clineno; } goto __pyx_L1_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L16;
    __pyx_L3_error:;
    Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
    goto __pyx_L1_error;
    __pyx_L16:;
  }
# 6262 "yxdfb/Kynaraa.cpp"
  __pyx_r = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_2))));
  Py_XDECREF(((PyObject*)((__pyx_t_4))));
  Py_XDECREF(((PyObject*)((__pyx_t_5))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.save_hasil", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_file))));
                         ;
                               ;
  return __pyx_r;
}
# 6287 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_5print_proses(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_5print_proses = {"print_proses", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_5print_proses, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_5print_proses(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_code = 0;
  PyObject *__pyx_v_gp = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                         ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_code,&__pyx_mstate_global->__pyx_n_s_gp,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 3: values[2] = __pyx_args[2];
        [[fallthrough]];
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 6345; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_code)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 6353; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("print_proses", 1, 3, 3, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 6355; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 2:
        if (__builtin_expect(!!((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_gp)) != 0), 1)) {
          (void)values[2];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 6363; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("print_proses", 1, 3, 3, 2); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 6365; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "print_proses") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 6370; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 3), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
      values[2] = __pyx_args[2];
    }
    __pyx_v_self = values[0];
    __pyx_v_code = values[1];
    __pyx_v_gp = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_proses", 1, 3, 3, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 6385; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.print_proses", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_4print_proses(__pyx_self, __pyx_v_self, __pyx_v_code, __pyx_v_gp);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}

static PyObject *__pyx_pf_7Kynaraa_5Kynaa_4print_proses([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_code, PyObject *__pyx_v_gp) {
  PyObject *__pyx_v_kyna = __null;
  PyObject *__pyx_r = __null;

  int __pyx_t_1;
  PyObject *__pyx_t_2 = __null;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = __null;
  PyObject *__pyx_t_6 = __null;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                               ;
# 6435 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_code, __pyx_mstate_global->__pyx_int_200, 0xC8, 0)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 29; (void)__pyx_lineno; __pyx_clineno = 6435; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 6445 "yxdfb/Kynaraa.cpp"
    __pyx_t_2 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 30; (void)__pyx_lineno; __pyx_clineno = 6445; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 30; (void)__pyx_lineno; __pyx_clineno = 6449; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 30; (void)__pyx_lineno; __pyx_clineno = 6451; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_200))));
    __pyx_t_3 += 3;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_200))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 30; (void)__pyx_lineno; __pyx_clineno = 6463; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 30; (void)__pyx_lineno; __pyx_clineno = 6465; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_t_5))));
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 30; (void)__pyx_lineno; __pyx_clineno = 6473; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
# 6486 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 6496 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_code, __pyx_mstate_global->__pyx_int_400, 0x190, 0)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 31; (void)__pyx_lineno; __pyx_clineno = 6496; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 6506 "yxdfb/Kynaraa.cpp"
    __pyx_t_5 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 32; (void)__pyx_lineno; __pyx_clineno = 6506; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 32; (void)__pyx_lineno; __pyx_clineno = 6510; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_2)))), __pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_2) : PyObject_Format(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 32; (void)__pyx_lineno; __pyx_clineno = 6512; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_400))));
    __pyx_t_3 += 3;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_400))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 32; (void)__pyx_lineno; __pyx_clineno = 6524; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_2 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 32; (void)__pyx_lineno; __pyx_clineno = 6526; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_2))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (2), ((PyObject*)((__pyx_t_2))));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 32; (void)__pyx_lineno; __pyx_clineno = 6534; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
# 6547 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 6557 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_code, __pyx_mstate_global->__pyx_int_401, 0x191, 0)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 33; (void)__pyx_lineno; __pyx_clineno = 6557; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 6567 "yxdfb/Kynaraa.cpp"
    __pyx_t_2 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 34; (void)__pyx_lineno; __pyx_clineno = 6567; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 34; (void)__pyx_lineno; __pyx_clineno = 6571; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 34; (void)__pyx_lineno; __pyx_clineno = 6573; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_401))));
    __pyx_t_3 += 3;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_401))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 34; (void)__pyx_lineno; __pyx_clineno = 6585; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 34; (void)__pyx_lineno; __pyx_clineno = 6587; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_t_5))));
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 34; (void)__pyx_lineno; __pyx_clineno = 6595; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
# 6608 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 6618 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_code, __pyx_mstate_global->__pyx_int_403, 0x193, 0)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 35; (void)__pyx_lineno; __pyx_clineno = 6618; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 6628 "yxdfb/Kynaraa.cpp"
    __pyx_t_5 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 36; (void)__pyx_lineno; __pyx_clineno = 6628; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 36; (void)__pyx_lineno; __pyx_clineno = 6632; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_2)))), __pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_2) : PyObject_Format(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 36; (void)__pyx_lineno; __pyx_clineno = 6634; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_403))));
    __pyx_t_3 += 3;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_403))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 36; (void)__pyx_lineno; __pyx_clineno = 6646; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_2 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 36; (void)__pyx_lineno; __pyx_clineno = 6648; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_2))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (2), ((PyObject*)((__pyx_t_2))));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 36; (void)__pyx_lineno; __pyx_clineno = 6656; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
# 6669 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 6679 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_code, __pyx_mstate_global->__pyx_int_404, 0x194, 0)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 37; (void)__pyx_lineno; __pyx_clineno = 6679; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 6689 "yxdfb/Kynaraa.cpp"
    __pyx_t_2 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 38; (void)__pyx_lineno; __pyx_clineno = 6689; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 38; (void)__pyx_lineno; __pyx_clineno = 6693; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 38; (void)__pyx_lineno; __pyx_clineno = 6695; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_404))));
    __pyx_t_3 += 3;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_404))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 38; (void)__pyx_lineno; __pyx_clineno = 6707; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 38; (void)__pyx_lineno; __pyx_clineno = 6709; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_t_5))));
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 38; (void)__pyx_lineno; __pyx_clineno = 6717; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
# 6730 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 6740 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_code, __pyx_mstate_global->__pyx_int_429, 0x1AD, 0)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 39; (void)__pyx_lineno; __pyx_clineno = 6740; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 6750 "yxdfb/Kynaraa.cpp"
    __pyx_t_5 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 40; (void)__pyx_lineno; __pyx_clineno = 6750; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 40; (void)__pyx_lineno; __pyx_clineno = 6754; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_2)))), __pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_2) : PyObject_Format(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 40; (void)__pyx_lineno; __pyx_clineno = 6756; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_429))));
    __pyx_t_3 += 3;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_429))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 40; (void)__pyx_lineno; __pyx_clineno = 6768; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_2 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 40; (void)__pyx_lineno; __pyx_clineno = 6770; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_2))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (2), ((PyObject*)((__pyx_t_2))));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 40; (void)__pyx_lineno; __pyx_clineno = 6778; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
# 6791 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 6801 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_code, __pyx_mstate_global->__pyx_int_500, 0x1F4, 0)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 41; (void)__pyx_lineno; __pyx_clineno = 6801; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 6811 "yxdfb/Kynaraa.cpp"
    __pyx_t_2 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 42; (void)__pyx_lineno; __pyx_clineno = 6811; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 42; (void)__pyx_lineno; __pyx_clineno = 6815; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 42; (void)__pyx_lineno; __pyx_clineno = 6817; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_500))));
    __pyx_t_3 += 3;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_500))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 42; (void)__pyx_lineno; __pyx_clineno = 6829; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 42; (void)__pyx_lineno; __pyx_clineno = 6831; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_t_5))));
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 42; (void)__pyx_lineno; __pyx_clineno = 6839; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
# 6852 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 6862 "yxdfb/Kynaraa.cpp"
           {
    __pyx_t_5 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 44; (void)__pyx_lineno; __pyx_clineno = 6863; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 44; (void)__pyx_lineno; __pyx_clineno = 6867; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_2)))), __pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_2) : PyObject_Format(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 44; (void)__pyx_lineno; __pyx_clineno = 6869; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_code)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_code)))), __pyx_v_code) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_code)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_code) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_code)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_code) : PyObject_Format(__pyx_v_code, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 44; (void)__pyx_lineno; __pyx_clineno = 6877; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (1), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 44; (void)__pyx_lineno; __pyx_clineno = 6884; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_2 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 44; (void)__pyx_lineno; __pyx_clineno = 6886; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_2))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (2), ((PyObject*)((__pyx_t_2))));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 44; (void)__pyx_lineno; __pyx_clineno = 6894; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;
# 6909 "yxdfb/Kynaraa.cpp"
  __pyx_t_2 = PyTuple_New(17); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6909; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = 0;
  __pyx_t_4 = 127;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
  __pyx_t_3 += 2;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_gp)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_gp)))), __pyx_v_gp) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_gp)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_gp) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_gp)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_gp) : PyObject_Format(__pyx_v_gp, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6917; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__4))));
  __pyx_t_3 += 3;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__4))));
  Py_INCREF(((PyObject*)((__pyx_v_kyna))));
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_v_kyna)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_v_kyna)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_v_kyna))));
                             ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (3), ((PyObject*)((__pyx_v_kyna))));
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__5))));
  __pyx_t_3 += 2;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__5))));
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6937; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : PyObject_Str(__pyx_t_5)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6939; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6942; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (5), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__6))));
  __pyx_t_3 += 1;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__6))));
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_asu); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6954; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_7 = PyObject_Size(__pyx_t_5); if (__builtin_expect(!!(__pyx_t_7 == ((Py_ssize_t)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6956; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_7, 0, ' ', 'd'); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6958; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (7), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_OK))));
  __pyx_t_3 += 5;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_OK))));
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6968; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6970; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (9), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6978; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6980; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (10), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6988; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 6990; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (11), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_CP))));
  __pyx_t_3 += 5;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (12), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_CP))));
  (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7002; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7004; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (13), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7012; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7014; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (14), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7022; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7024; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
  __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (15), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
  __pyx_t_3 += 1;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (16), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 17, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7036; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7039; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
                          ;
  if ((PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_5)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7042; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_5 = 0;
  __pyx_t_5 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7044; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_t_5, __pyx_mstate_global->__pyx_n_s_end, __pyx_mstate_global->__pyx_kp_s__8) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7046; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, __pyx_t_5); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 7047; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
# 7062 "yxdfb/Kynaraa.cpp"
  __pyx_r = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_2))));
  Py_XDECREF(((PyObject*)((__pyx_t_5))));
  Py_XDECREF(((PyObject*)((__pyx_t_6))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.print_proses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_kyna))));
                         ;
                               ;
  return __pyx_r;
}
# 7086 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_7notice(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_7notice = {"notice", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_7notice, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_7notice(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  [[maybe_unused]] PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_tod = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                   ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_tod,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 7141; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_tod)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 7149; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("notice", 1, 2, 2, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 7151; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "notice") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 7156; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 2), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
    }
    __pyx_v_self = values[0];
    __pyx_v_tod = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("notice", 1, 2, 2, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 7169; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.notice", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_6notice(__pyx_self, __pyx_v_self, __pyx_v_tod);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}

static PyObject *__pyx_pf_7Kynaraa_5Kynaa_6notice([[maybe_unused]] PyObject *__pyx_self, [[maybe_unused]] PyObject *__pyx_v_self, PyObject *__pyx_v_tod) {
  PyObject *__pyx_v_kyna = __null;
  PyObject *__pyx_r = __null;

  int __pyx_t_1;
  PyObject *__pyx_t_2 = __null;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = __null;
  PyObject *__pyx_t_6 = __null;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                         ;
# 7218 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_tod, __pyx_mstate_global->__pyx_n_s_graph_v1, 2)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 49; (void)__pyx_lineno; __pyx_clineno = 7218; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 7228 "yxdfb/Kynaraa.cpp"
    __pyx_t_2 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 50; (void)__pyx_lineno; __pyx_clineno = 7228; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 50; (void)__pyx_lineno; __pyx_clineno = 7232; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 50; (void)__pyx_lineno; __pyx_clineno = 7234; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_GRAPH_V1))));
    __pyx_t_3 += 37;
                                                          ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_GRAPH_V1))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 50; (void)__pyx_lineno; __pyx_clineno = 7246; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 50; (void)__pyx_lineno; __pyx_clineno = 7248; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_t_5))));
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 50; (void)__pyx_lineno; __pyx_clineno = 7256; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
# 7269 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 7279 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_tod, __pyx_mstate_global->__pyx_n_s_graph_v2, 2)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 51; (void)__pyx_lineno; __pyx_clineno = 7279; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 7289 "yxdfb/Kynaraa.cpp"
    __pyx_t_5 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 52; (void)__pyx_lineno; __pyx_clineno = 7289; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 52; (void)__pyx_lineno; __pyx_clineno = 7293; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_2)))), __pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_2) : PyObject_Format(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 52; (void)__pyx_lineno; __pyx_clineno = 7295; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_GRAPH_V2))));
    __pyx_t_3 += 37;
                                                          ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_GRAPH_V2))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 52; (void)__pyx_lineno; __pyx_clineno = 7307; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_2 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 52; (void)__pyx_lineno; __pyx_clineno = 7309; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_2))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (2), ((PyObject*)((__pyx_t_2))));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 52; (void)__pyx_lineno; __pyx_clineno = 7317; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
# 7330 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 7340 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_tod, __pyx_mstate_global->__pyx_n_s_valid_v1, 2)); if (__builtin_expect(!!((__pyx_t_1 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 53; (void)__pyx_lineno; __pyx_clineno = 7340; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__pyx_t_1) {
# 7350 "yxdfb/Kynaraa.cpp"
    __pyx_t_2 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 54; (void)__pyx_lineno; __pyx_clineno = 7350; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 54; (void)__pyx_lineno; __pyx_clineno = 7354; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 54; (void)__pyx_lineno; __pyx_clineno = 7356; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_VALID_V1))));
    __pyx_t_3 += 37;
                                                          ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_VALID_V1))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 54; (void)__pyx_lineno; __pyx_clineno = 7368; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 54; (void)__pyx_lineno; __pyx_clineno = 7370; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_t_5))));
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 54; (void)__pyx_lineno; __pyx_clineno = 7378; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
# 7391 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 7401 "yxdfb/Kynaraa.cpp"
           {
    __pyx_t_5 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 56; (void)__pyx_lineno; __pyx_clineno = 7402; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 56; (void)__pyx_lineno; __pyx_clineno = 7406; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_2)))), __pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_2) : PyObject_Format(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 56; (void)__pyx_lineno; __pyx_clineno = 7408; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_VALID_V2))));
    __pyx_t_3 += 37;
                                                          ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_VALID_V2))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 56; (void)__pyx_lineno; __pyx_clineno = 7420; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_2 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 56; (void)__pyx_lineno; __pyx_clineno = 7422; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_4 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) > __pyx_t_4) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) : __pyx_t_4;
    __pyx_t_3 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_2))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (2), ((PyObject*)((__pyx_t_2))));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_3, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 56; (void)__pyx_lineno; __pyx_clineno = 7430; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;
# 7445 "yxdfb/Kynaraa.cpp"
  Py_XDECREF(((PyObject*)((__pyx_r))));
  Py_INCREF(((PyObject*)((__pyx_v_kyna))));
  __pyx_r = __pyx_v_kyna;
  goto __pyx_L0;
# 7459 "yxdfb/Kynaraa.cpp"
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_2))));
  Py_XDECREF(((PyObject*)((__pyx_t_5))));
  Py_XDECREF(((PyObject*)((__pyx_t_6))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.notice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_kyna))));
                         ;
                               ;
  return __pyx_r;
}
# 7481 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_9abcd(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_9abcd = {"abcd", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_9abcd, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_9abcd(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_asu = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                 ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_asu,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 7536; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_asu)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 7544; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("abcd", 1, 2, 2, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 7546; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "abcd") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 7551; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 2), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
    }
    __pyx_v_self = values[0];
    __pyx_v_asu = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("abcd", 1, 2, 2, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 7564; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.abcd", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_8abcd(__pyx_self, __pyx_v_self, __pyx_v_asu);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}

static PyObject *__pyx_pf_7Kynaraa_5Kynaa_8abcd([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_asu) {
  PyObject *__pyx_v_pwnya = __null;
  PyObject *__pyx_v_pwek = __null;
  PyObject *__pyx_v_password_manual = __null;
  PyObject *__pyx_v_xpw = __null;
  PyObject *__pyx_v_user_agent_status = __null;
  PyObject *__pyx_v_executor = __null;
  PyObject *__pyx_v_user = __null;
  PyObject *__pyx_v_uid = __null;
  PyObject *__pyx_v_nama = __null;
  PyObject *__pyx_v_depan = __null;
  PyObject *__pyx_v_belakang = __null;
  PyObject *__pyx_v_pasw = __null;
  PyObject *__pyx_v_xpwd = __null;
  PyObject *__pyx_r = __null;

  PyObject *__pyx_t_1 = __null;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = __null;
  PyObject *__pyx_t_5 = __null;
  unsigned int __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  PyObject *__pyx_t_9 = __null;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = __null;
  PyObject *__pyx_t_12 = __null;
  PyObject *__pyx_t_13 = __null;
  PyObject *__pyx_t_14 = __null;
  PyObject *__pyx_t_15 = __null;
  PyObject *__pyx_t_16 = __null;
  Py_ssize_t __pyx_t_17;
  PyObject *__pyx_t_18 = __null;
  int __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                       ;
# 7638 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(0); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 60; (void)__pyx_lineno; __pyx_clineno = 7638; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_v_pwnya = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 7650 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyTuple_New(5); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 61; (void)__pyx_lineno; __pyx_clineno = 7650; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_gunakan_koma_untuk_pemisah_cont))));
  __pyx_t_2 += 45;
                                                           ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_gunakan_koma_untuk_pemisah_cont))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 61; (void)__pyx_lineno; __pyx_clineno = 7658; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 61; (void)__pyx_lineno; __pyx_clineno = 7660; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_123456_anjing_dll))));
  __pyx_t_2 += 17;
                                             ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_123456_anjing_dll))));
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 61; (void)__pyx_lineno; __pyx_clineno = 7672; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 61; (void)__pyx_lineno; __pyx_clineno = 7674; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_setiap_kata_minimal_6_karakter))));
  __pyx_t_2 += 43;
                                                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_setiap_kata_minimal_6_karakter))));
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 61; (void)__pyx_lineno; __pyx_clineno = 7686; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 61; (void)__pyx_lineno; __pyx_clineno = 7689; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 7701 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyTuple_New(5); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 62; (void)__pyx_lineno; __pyx_clineno = 7701; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__9))));
  __pyx_t_2 += 2;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__9))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 62; (void)__pyx_lineno; __pyx_clineno = 7709; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 62; (void)__pyx_lineno; __pyx_clineno = 7711; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__10))));
  __pyx_t_2 += 1;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__10))));
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 62; (void)__pyx_lineno; __pyx_clineno = 7723; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 62; (void)__pyx_lineno; __pyx_clineno = 7725; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_masukan_kata_sandi_tambahan_ops))));
  __pyx_t_2 += 43;
                                                           ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_masukan_kata_sandi_tambahan_ops))));
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 62; (void)__pyx_lineno; __pyx_clineno = 7737; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_input, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 62; (void)__pyx_lineno; __pyx_clineno = 7740; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_v_pwek = __pyx_t_1;
  __pyx_t_1 = 0;
# 7753 "yxdfb/Kynaraa.cpp"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_pwek, __pyx_mstate_global->__pyx_n_s_split); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 63; (void)__pyx_lineno; __pyx_clineno = 7753; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __null;
  __pyx_t_6 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 1)) {
    __pyx_t_5 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
    if (__builtin_expect(!!(__pyx_t_5), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((__pyx_t_5))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_6 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_s__11};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 63; (void)__pyx_lineno; __pyx_clineno = 7773; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  }
  __pyx_v_password_manual = __pyx_t_1;
  __pyx_t_1 = 0;
# 7787 "yxdfb/Kynaraa.cpp"
  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_password_manual)))), (&PyList_Type))), 1) || Py_IS_TYPE(((PyObject*)(((__pyx_v_password_manual)))), (&PyTuple_Type))) {
    __pyx_t_1 = __pyx_v_password_manual; Py_INCREF(((PyObject*)((__pyx_t_1))));
    __pyx_t_2 = 0;
    __pyx_t_7 = __null;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_password_manual); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 64; (void)__pyx_lineno; __pyx_clineno = 7792; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_7 = (Py_TYPE(((PyObject*)((__pyx_t_1))))->tp_iternext); if (__builtin_expect(!!(!__pyx_t_7), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 64; (void)__pyx_lineno; __pyx_clineno = 7794; (void)__pyx_clineno; } goto __pyx_L1_error; }
  }
  for (;;) {
    if (__builtin_expect(!!(!__pyx_t_7), 1)) {
      if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyList_Type))), 1)) {
        {
          Py_ssize_t __pyx_temp = PyList_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_2 >= __pyx_temp) break;
        }

        __pyx_t_4 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 7807, __PRETTY_FUNCTION__, "PyList_Check(__pyx_t_1)")), ((PyListObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_4)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 64; (void)__pyx_lineno; __pyx_clineno = 7807; (void)__pyx_clineno; } goto __pyx_L1_error; }




      } else {
        {
          Py_ssize_t __pyx_temp = PyTuple_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_2 >= __pyx_temp) break;
        }

        __pyx_t_4 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 7821, __PRETTY_FUNCTION__, "PyTuple_Check(__pyx_t_1)")), ((PyTupleObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_4)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 64; (void)__pyx_lineno; __pyx_clineno = 7821; (void)__pyx_clineno; } goto __pyx_L1_error; }




      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_1);
      if (__builtin_expect(!!(!__pyx_t_4), 0)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (__builtin_expect(!!(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)), 1)) PyErr_Clear();
          else { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 64; (void)__pyx_lineno; __pyx_clineno = 7833; (void)__pyx_clineno; } goto __pyx_L1_error; }
        }
        break;
      }
                             ;
    }
    do { PyObject *tmp = (PyObject *) __pyx_v_xpw; __pyx_v_xpw = __pyx_t_4; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    __pyx_t_4 = 0;
# 7849 "yxdfb/Kynaraa.cpp"
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pwnya, __pyx_v_xpw); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 65; (void)__pyx_lineno; __pyx_clineno = 7849; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 7858 "yxdfb/Kynaraa.cpp"
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 7868 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyTuple_New(9); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7868; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__12))));
  __pyx_t_2 += 1;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__12))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7876; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7878; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__13))));
  __pyx_t_2 += 1;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__13))));
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7890; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7892; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_sandi_tambahan))));
  __pyx_t_2 += 22;
                                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_sandi_tambahan))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7904; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7906; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (5), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pwek)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pwek)))), __pyx_v_pwek) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pwek)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pwek) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pwek)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pwek) : PyObject_Format(__pyx_v_pwek, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7914; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (6), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7921; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7923; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (7), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__14))));
  __pyx_t_2 += 2;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__14))));
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 9, __pyx_t_2, __pyx_t_3); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7935; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 66; (void)__pyx_lineno; __pyx_clineno = 7938; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 7950 "yxdfb/Kynaraa.cpp"
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_os); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 68; (void)__pyx_lineno; __pyx_clineno = 7950; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_s_path); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 68; (void)__pyx_lineno; __pyx_clineno = 7952; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_exists); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 68; (void)__pyx_lineno; __pyx_clineno = 7955; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
  __pyx_t_9 = __null;
  __pyx_t_6 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyMethod_Type))), 1)) {
    __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_5))));
    if (__builtin_expect(!!(__pyx_t_9), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_5))));
      Py_INCREF(((PyObject*)((__pyx_t_9))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_5; __pyx_t_5 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_6 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_data_cache_sett_UaFB_json};
    __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
    if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 68; (void)__pyx_lineno; __pyx_clineno = 7976; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (__builtin_expect(!!((__pyx_t_10 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 68; (void)__pyx_lineno; __pyx_clineno = 7980; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  if (__pyx_t_10) {
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_UserAgent_yang_disetting))));
    __pyx_t_1 = __pyx_mstate_global->__pyx_kp_s_UserAgent_yang_disetting;
  } else {
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_UserAgent_bawaan_script))));
    __pyx_t_1 = __pyx_mstate_global->__pyx_kp_s_UserAgent_bawaan_script;
  }
  __pyx_v_user_agent_status = __pyx_t_1;
  __pyx_t_1 = 0;
# 7999 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyTuple_New(8); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 7999; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__12))));
  __pyx_t_2 += 1;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__12))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8007; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8009; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__15))));
  __pyx_t_2 += 1;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__15))));
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8021; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8023; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_anda_saat_ini_menggunakan))));
  __pyx_t_2 += 28;
                                                     ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_anda_saat_ini_menggunakan))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8035; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8037; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (5), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user_agent_status)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user_agent_status)))), __pyx_v_user_agent_status) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user_agent_status)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user_agent_status) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user_agent_status)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user_agent_status) : PyObject_Format(__pyx_v_user_agent_status, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8045; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (6), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8052; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8054; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (7), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 8, __pyx_t_2, __pyx_t_3); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8062; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 69; (void)__pyx_lineno; __pyx_clineno = 8065; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8077 "yxdfb/Kynaraa.cpp"
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_time); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 70; (void)__pyx_lineno; __pyx_clineno = 8077; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_sleep); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 70; (void)__pyx_lineno; __pyx_clineno = 8079; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = __null;
  __pyx_t_6 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyMethod_Type))), 0)) {
    __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_5))));
    if (__builtin_expect(!!(__pyx_t_4), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_5))));
      Py_INCREF(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_5; __pyx_t_5 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_6 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_int_3};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 70; (void)__pyx_lineno; __pyx_clineno = 8100; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8113 "yxdfb/Kynaraa.cpp"
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_Logo); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 71; (void)__pyx_lineno; __pyx_clineno = 8113; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = __null;
  __pyx_t_6 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyMethod_Type))), 0)) {
    __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_5))));
    if (__builtin_expect(!!(__pyx_t_4), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_5))));
      Py_INCREF(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_5; __pyx_t_5 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_6 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_s_fesnuk};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 71; (void)__pyx_lineno; __pyx_clineno = 8133; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8146 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_asw); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 72; (void)__pyx_lineno; __pyx_clineno = 8146; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 72; (void)__pyx_lineno; __pyx_clineno = 8148; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
# 8160 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_notice); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 73; (void)__pyx_lineno; __pyx_clineno = 8160; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = __null;
  __pyx_t_6 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyMethod_Type))), 1)) {
    __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_1))));
    if (__builtin_expect(!!(__pyx_t_4), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_1; __pyx_t_1 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_6 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_asu};
    __pyx_t_5 = __Pyx_PyObject_FastCallDict(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 73; (void)__pyx_lineno; __pyx_clineno = 8180; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  }
  __pyx_t_1 = PyNumber_Add(__pyx_mstate_global->__pyx_kp_s__16, __pyx_t_5); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 73; (void)__pyx_lineno; __pyx_clineno = 8184; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_mstate_global->__pyx_kp_s_); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 73; (void)__pyx_lineno; __pyx_clineno = 8187; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_mstate_global->__pyx_kp_s__17); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 73; (void)__pyx_lineno; __pyx_clineno = 8190; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 73; (void)__pyx_lineno; __pyx_clineno = 8193; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
# 8205 "yxdfb/Kynaraa.cpp"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_mstate_global->__pyx_tuple__18, __null); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 74; (void)__pyx_lineno; __pyx_clineno = 8205; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
# 8216 "yxdfb/Kynaraa.cpp"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_mstate_global->__pyx_tuple__19, __null); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 75; (void)__pyx_lineno; __pyx_clineno = 8216; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
# 8227 "yxdfb/Kynaraa.cpp"
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_builtin_print); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 76; (void)__pyx_lineno; __pyx_clineno = 8227; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
# 8238 "yxdfb/Kynaraa.cpp"
            {
    (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_ThreadPoolExecutor); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 8239; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_1 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 8241; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_max_workers, __pyx_mstate_global->__pyx_int_75) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 8243; (void)__pyx_clineno; } goto __pyx_L1_error; }
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_empty_tuple, __pyx_t_1); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 8244; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    __pyx_t_11 = __Pyx__PyObject_LookupSpecial(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_exit_2, 1); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 8248; (void)__pyx_clineno; } goto __pyx_L1_error; }
                            ;
    __pyx_t_5 = __Pyx__PyObject_LookupSpecial(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_enter, 1); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 8250; (void)__pyx_clineno; } goto __pyx_L6_error; }
                           ;
    __pyx_t_9 = __null;
    __pyx_t_6 = 0;

    if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyMethod_Type))), 1)) {
      __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_5))));
      if (__builtin_expect(!!(__pyx_t_9), 1)) {
        PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_5))));
        Py_INCREF(((PyObject*)((__pyx_t_9))));
        Py_INCREF(((PyObject*)((function))));
        do { PyObject *tmp = (PyObject *) __pyx_t_5; __pyx_t_5 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_6 = 1;
      }
    }

    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __null};
      __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, (size_t)(0+__pyx_t_6), __null);
      Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
      if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 8270; (void)__pyx_clineno; } goto __pyx_L6_error; }
                             ;
      Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __pyx_t_1;
    __pyx_t_1 = 0;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
             {
      {
        PyThreadState *__pyx_tstate;
        __pyx_tstate = _PyThreadState_UncheckedGet();
        __Pyx__ExceptionSave(__pyx_tstate, &__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
                                 ;
                                 ;
                                 ;
                 {
          __pyx_v_executor = __pyx_t_5;
          __pyx_t_5 = 0;
# 8296 "yxdfb/Kynaraa.cpp"
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_asu); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 78; (void)__pyx_lineno; __pyx_clineno = 8296; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                 ;
          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyList_Type))), 1) || Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyTuple_Type))) {
            __pyx_t_4 = __pyx_t_5; Py_INCREF(((PyObject*)((__pyx_t_4))));
            __pyx_t_2 = 0;
            __pyx_t_7 = __null;
          } else {
            __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 78; (void)__pyx_lineno; __pyx_clineno = 8303; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                   ;
            __pyx_t_7 = (Py_TYPE(((PyObject*)((__pyx_t_4))))->tp_iternext); if (__builtin_expect(!!(!__pyx_t_7), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 78; (void)__pyx_lineno; __pyx_clineno = 8305; (void)__pyx_clineno; } goto __pyx_L10_error; }
          }
          Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
          for (;;) {
            if (__builtin_expect(!!(!__pyx_t_7), 1)) {
              if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyList_Type))), 1)) {
                {
                  Py_ssize_t __pyx_temp = PyList_GET_SIZE(((PyObject*)((__pyx_t_4))));



                  if (__pyx_t_2 >= __pyx_temp) break;
                }

                __pyx_t_5 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_4))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 8319, __PRETTY_FUNCTION__, "PyList_Check(__pyx_t_4)")), ((PyListObject*)((__pyx_t_4))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_5)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 78; (void)__pyx_lineno; __pyx_clineno = 8319; (void)__pyx_clineno; } goto __pyx_L10_error; }




              } else {
                {
                  Py_ssize_t __pyx_temp = PyTuple_GET_SIZE(((PyObject*)((__pyx_t_4))));



                  if (__pyx_t_2 >= __pyx_temp) break;
                }

                __pyx_t_5 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_4))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 8333, __PRETTY_FUNCTION__, "PyTuple_Check(__pyx_t_4)")), ((PyTupleObject*)((__pyx_t_4))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_5)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 78; (void)__pyx_lineno; __pyx_clineno = 8333; (void)__pyx_clineno; } goto __pyx_L10_error; }




              }
            } else {
              __pyx_t_5 = __pyx_t_7(__pyx_t_4);
              if (__builtin_expect(!!(!__pyx_t_5), 0)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (__builtin_expect(!!(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)), 1)) PyErr_Clear();
                  else { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 78; (void)__pyx_lineno; __pyx_clineno = 8345; (void)__pyx_clineno; } goto __pyx_L10_error; }
                }
                break;
              }
                                     ;
            }
            do { PyObject *tmp = (PyObject *) __pyx_v_user; __pyx_v_user = __pyx_t_5; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_5 = 0;
# 8361 "yxdfb/Kynaraa.cpp"
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_mstate_global->__pyx_n_s_split); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 79; (void)__pyx_lineno; __pyx_clineno = 8361; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                   ;
            __pyx_t_9 = __null;
            __pyx_t_6 = 0;

            if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyMethod_Type))), 1)) {
              __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_1))));
              if (__builtin_expect(!!(__pyx_t_9), 1)) {
                PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_1))));
                Py_INCREF(((PyObject*)((__pyx_t_9))));
                Py_INCREF(((PyObject*)((function))));
                do { PyObject *tmp = (PyObject *) __pyx_t_1; __pyx_t_1 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                __pyx_t_6 = 1;
              }
            }

            {
              PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_s__20};
              __pyx_t_5 = __Pyx_PyObject_FastCallDict(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
              Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
              if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 79; (void)__pyx_lineno; __pyx_clineno = 8381; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
            }
            __pyx_t_1 = (( (sizeof(long) < sizeof(Py_ssize_t)) || (sizeof(long) > sizeof(Py_ssize_t) && __builtin_expect(!!(0 < (long)9223372036854775807L || 0 == (long)9223372036854775807L), 1) && (!1 || __builtin_expect(!!(0 > (long)(-9223372036854775807L -1) || 0 == (long)(-9223372036854775807L -1)), 1))) || (sizeof(long) == sizeof(Py_ssize_t) && (1 || __builtin_expect(!!(0 < (long)9223372036854775807L || 0 == (long)9223372036854775807L), 1))) ) ? __Pyx_GetItemInt_Fast(__pyx_t_5, (Py_ssize_t)0, 0, 0, 1) : (0 ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)__null) : __Pyx_GetItemInt_Generic(__pyx_t_5, __Pyx_PyInt_From_long(0)))); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 79; (void)__pyx_lineno; __pyx_clineno = 8385; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_user, __pyx_mstate_global->__pyx_n_s_split); if (__builtin_expect(!!(!__pyx_t_15), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 79; (void)__pyx_lineno; __pyx_clineno = 8388; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                    ;
            __pyx_t_16 = __null;
            __pyx_t_6 = 0;

            if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_15)))), (&PyMethod_Type))), 1)) {
              __pyx_t_16 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_15))));
              if (__builtin_expect(!!(__pyx_t_16), 1)) {
                PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_15))));
                Py_INCREF(((PyObject*)((__pyx_t_16))));
                Py_INCREF(((PyObject*)((function))));
                do { PyObject *tmp = (PyObject *) __pyx_t_15; __pyx_t_15 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                __pyx_t_6 = 1;
              }
            }

            {
              PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_mstate_global->__pyx_kp_s__20};
              __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_15, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
              Py_XDECREF(((PyObject*)((__pyx_t_16)))); __pyx_t_16 = 0;
              if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 79; (void)__pyx_lineno; __pyx_clineno = 8408; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              Py_DECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
            }
            __pyx_t_15 = (( (sizeof(long) < sizeof(Py_ssize_t)) || (sizeof(long) > sizeof(Py_ssize_t) && __builtin_expect(!!(1 < (long)9223372036854775807L || 1 == (long)9223372036854775807L), 1) && (!1 || __builtin_expect(!!(1 > (long)(-9223372036854775807L -1) || 1 == (long)(-9223372036854775807L -1)), 1))) || (sizeof(long) == sizeof(Py_ssize_t) && (1 || __builtin_expect(!!(1 < (long)9223372036854775807L || 1 == (long)9223372036854775807L), 1))) ) ? __Pyx_GetItemInt_Fast(__pyx_t_9, (Py_ssize_t)1, 0, 0, 1) : (0 ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)__null) : __Pyx_GetItemInt_Generic(__pyx_t_9, __Pyx_PyInt_From_long(1)))); if (__builtin_expect(!!(!__pyx_t_15), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 79; (void)__pyx_lineno; __pyx_clineno = 8412; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_mstate_global->__pyx_n_s_lower); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 79; (void)__pyx_lineno; __pyx_clineno = 8415; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
            __pyx_t_15 = __null;
            __pyx_t_6 = 0;

            if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
              __pyx_t_15 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
              if (__builtin_expect(!!(__pyx_t_15), 1)) {
                PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                Py_INCREF(((PyObject*)((__pyx_t_15))));
                Py_INCREF(((PyObject*)((function))));
                do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                __pyx_t_6 = 1;
              }
            }

            {
              PyObject *__pyx_callargs[2] = {__pyx_t_15, __null};
              __pyx_t_5 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(0+__pyx_t_6), __null);
              Py_XDECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
              if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 79; (void)__pyx_lineno; __pyx_clineno = 8436; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            }
            do { PyObject *tmp = (PyObject *) __pyx_v_uid; __pyx_v_uid = __pyx_t_1; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_1 = 0;
            do { PyObject *tmp = (PyObject *) __pyx_v_nama; __pyx_v_nama = __pyx_t_5; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_5 = 0;
# 8452 "yxdfb/Kynaraa.cpp"
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_nama, __pyx_mstate_global->__pyx_n_s_split); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 80; (void)__pyx_lineno; __pyx_clineno = 8452; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                   ;
            __pyx_t_9 = __null;
            __pyx_t_6 = 0;

            if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyMethod_Type))), 1)) {
              __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_1))));
              if (__builtin_expect(!!(__pyx_t_9), 1)) {
                PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_1))));
                Py_INCREF(((PyObject*)((__pyx_t_9))));
                Py_INCREF(((PyObject*)((function))));
                do { PyObject *tmp = (PyObject *) __pyx_t_1; __pyx_t_1 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                __pyx_t_6 = 1;
              }
            }

            {
              PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_s__7};
              __pyx_t_5 = __Pyx_PyObject_FastCallDict(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
              Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
              if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 80; (void)__pyx_lineno; __pyx_clineno = 8472; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
            }
            __pyx_t_1 = (( (sizeof(long) < sizeof(Py_ssize_t)) || (sizeof(long) > sizeof(Py_ssize_t) && __builtin_expect(!!(0 < (long)9223372036854775807L || 0 == (long)9223372036854775807L), 1) && (!1 || __builtin_expect(!!(0 > (long)(-9223372036854775807L -1) || 0 == (long)(-9223372036854775807L -1)), 1))) || (sizeof(long) == sizeof(Py_ssize_t) && (1 || __builtin_expect(!!(0 < (long)9223372036854775807L || 0 == (long)9223372036854775807L), 1))) ) ? __Pyx_GetItemInt_Fast(__pyx_t_5, (Py_ssize_t)0, 0, 0, 1) : (0 ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)__null) : __Pyx_GetItemInt_Generic(__pyx_t_5, __Pyx_PyInt_From_long(0)))); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 80; (void)__pyx_lineno; __pyx_clineno = 8476; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
            do { PyObject *tmp = (PyObject *) __pyx_v_depan; __pyx_v_depan = __pyx_t_1; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_1 = 0;
# 8489 "yxdfb/Kynaraa.cpp"
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_nama, __pyx_mstate_global->__pyx_n_s_split); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 81; (void)__pyx_lineno; __pyx_clineno = 8489; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                   ;
            __pyx_t_15 = __null;
            __pyx_t_6 = 0;

            if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
              __pyx_t_15 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
              if (__builtin_expect(!!(__pyx_t_15), 1)) {
                PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                Py_INCREF(((PyObject*)((__pyx_t_15))));
                Py_INCREF(((PyObject*)((function))));
                do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                __pyx_t_6 = 1;
              }
            }

            {
              PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_mstate_global->__pyx_kp_s__7};
              __pyx_t_5 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
              Py_XDECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
              if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 81; (void)__pyx_lineno; __pyx_clineno = 8509; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            }
            __pyx_t_17 = PyObject_Size(__pyx_t_5); if (__builtin_expect(!!(__pyx_t_17 == ((Py_ssize_t)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 81; (void)__pyx_lineno; __pyx_clineno = 8513; (void)__pyx_clineno; } goto __pyx_L10_error; }
            Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
            __pyx_t_10 = (__pyx_t_17 > 2);
            if (__pyx_t_10) {
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_nama, __pyx_mstate_global->__pyx_n_s_split); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 81; (void)__pyx_lineno; __pyx_clineno = 8517; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_15 = __null;
              __pyx_t_6 = 0;

              if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
                __pyx_t_15 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
                if (__builtin_expect(!!(__pyx_t_15), 1)) {
                  PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                  Py_INCREF(((PyObject*)((__pyx_t_15))));
                  Py_INCREF(((PyObject*)((function))));
                  do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                  __pyx_t_6 = 1;
                }
              }

              {
                PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_mstate_global->__pyx_kp_s__7};
                __pyx_t_5 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(1+__pyx_t_6), __null);
                Py_XDECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
                if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 81; (void)__pyx_lineno; __pyx_clineno = 8537; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
              }
              __pyx_t_9 = (( (sizeof(long) < sizeof(Py_ssize_t)) || (sizeof(long) > sizeof(Py_ssize_t) && __builtin_expect(!!(2 < (long)9223372036854775807L || 2 == (long)9223372036854775807L), 1) && (!1 || __builtin_expect(!!(2 > (long)(-9223372036854775807L -1) || 2 == (long)(-9223372036854775807L -1)), 1))) || (sizeof(long) == sizeof(Py_ssize_t) && (1 || __builtin_expect(!!(2 < (long)9223372036854775807L || 2 == (long)9223372036854775807L), 1))) ) ? __Pyx_GetItemInt_Fast(__pyx_t_5, (Py_ssize_t)2, 0, 0, 1) : (0 ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)__null) : __Pyx_GetItemInt_Generic(__pyx_t_5, __Pyx_PyInt_From_long(2)))); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 81; (void)__pyx_lineno; __pyx_clineno = 8541; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
              __pyx_t_1 = __pyx_t_9;
              __pyx_t_9 = 0;
            } else {
              Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s__8))));
              __pyx_t_1 = __pyx_mstate_global->__pyx_kp_s__8;
            }
            do { PyObject *tmp = (PyObject *) __pyx_v_belakang; __pyx_v_belakang = __pyx_t_1; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_1 = 0;
# 8560 "yxdfb/Kynaraa.cpp"
            __pyx_t_1 = PyList_New(0); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 82; (void)__pyx_lineno; __pyx_clineno = 8560; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                   ;
            do { PyObject *tmp = (PyObject *) __pyx_v_pasw; __pyx_v_pasw = ((PyObject*)__pyx_t_1); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_1 = 0;
# 8572 "yxdfb/Kynaraa.cpp"
            __pyx_t_17 = PyObject_Size(__pyx_v_nama); if (__builtin_expect(!!(__pyx_t_17 == ((Py_ssize_t)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 83; (void)__pyx_lineno; __pyx_clineno = 8572; (void)__pyx_clineno; } goto __pyx_L10_error; }
            __pyx_t_10 = (__pyx_t_17 < 6);
            if (__pyx_t_10) {
# 8583 "yxdfb/Kynaraa.cpp"
              __pyx_t_17 = PyObject_Size(__pyx_v_depan); if (__builtin_expect(!!(__pyx_t_17 == ((Py_ssize_t)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 84; (void)__pyx_lineno; __pyx_clineno = 8583; (void)__pyx_clineno; } goto __pyx_L10_error; }
              __pyx_t_10 = (__pyx_t_17 < 3);
              if (__pyx_t_10) {
                goto __pyx_L19;
              }
# 8596 "yxdfb/Kynaraa.cpp"
                       {
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_v_nama); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 87; (void)__pyx_lineno; __pyx_clineno = 8597; (void)__pyx_clineno; } goto __pyx_L10_error; }
# 8606 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_123); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 88; (void)__pyx_lineno; __pyx_clineno = 8606; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 88; (void)__pyx_lineno; __pyx_clineno = 8608; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8618 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_1234); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 89; (void)__pyx_lineno; __pyx_clineno = 8618; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 89; (void)__pyx_lineno; __pyx_clineno = 8620; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8630 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_12345); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 90; (void)__pyx_lineno; __pyx_clineno = 8630; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 90; (void)__pyx_lineno; __pyx_clineno = 8632; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8642 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_123456); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 91; (void)__pyx_lineno; __pyx_clineno = 8642; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 91; (void)__pyx_lineno; __pyx_clineno = 8644; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8654 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_123456789); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 92; (void)__pyx_lineno; __pyx_clineno = 8654; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 92; (void)__pyx_lineno; __pyx_clineno = 8656; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8666 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_123_2); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 93; (void)__pyx_lineno; __pyx_clineno = 8666; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 93; (void)__pyx_lineno; __pyx_clineno = 8668; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8678 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_1234_2); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 94; (void)__pyx_lineno; __pyx_clineno = 8678; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 94; (void)__pyx_lineno; __pyx_clineno = 8680; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8690 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_12345_2); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 95; (void)__pyx_lineno; __pyx_clineno = 8690; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 95; (void)__pyx_lineno; __pyx_clineno = 8692; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8702 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_belakang, __pyx_mstate_global->__pyx_kp_s_123); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 96; (void)__pyx_lineno; __pyx_clineno = 8702; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 96; (void)__pyx_lineno; __pyx_clineno = 8704; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8714 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_belakang, __pyx_mstate_global->__pyx_kp_s_1234); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 97; (void)__pyx_lineno; __pyx_clineno = 8714; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 97; (void)__pyx_lineno; __pyx_clineno = 8716; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8726 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_belakang, __pyx_mstate_global->__pyx_kp_s_12345); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 98; (void)__pyx_lineno; __pyx_clineno = 8726; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 98; (void)__pyx_lineno; __pyx_clineno = 8728; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8738 "yxdfb/Kynaraa.cpp"
                __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_depan, __pyx_mstate_global->__pyx_n_s_upper); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 99; (void)__pyx_lineno; __pyx_clineno = 8738; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_5 = __null;
                __pyx_t_6 = 0;

                if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
                  __pyx_t_5 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
                  if (__builtin_expect(!!(__pyx_t_5), 1)) {
                    PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                    Py_INCREF(((PyObject*)((__pyx_t_5))));
                    Py_INCREF(((PyObject*)((function))));
                    do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                    __pyx_t_6 = 1;
                  }
                }

                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_5, __null};
                  __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(0+__pyx_t_6), __null);
                  Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
                  if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 99; (void)__pyx_lineno; __pyx_clineno = 8758; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                         ;
                  Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
                }
                __pyx_t_9 = PyNumber_Add(__pyx_t_1, __pyx_mstate_global->__pyx_kp_s_123); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 99; (void)__pyx_lineno; __pyx_clineno = 8762; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_9); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 99; (void)__pyx_lineno; __pyx_clineno = 8765; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 8775 "yxdfb/Kynaraa.cpp"
                __pyx_t_9 = PyNumber_Add(__pyx_v_depan, __pyx_v_belakang); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 100; (void)__pyx_lineno; __pyx_clineno = 8775; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_9); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 100; (void)__pyx_lineno; __pyx_clineno = 8777; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 8787 "yxdfb/Kynaraa.cpp"
                __pyx_t_9 = PyNumber_Add(__pyx_v_depan, __pyx_v_belakang); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 101; (void)__pyx_lineno; __pyx_clineno = 8787; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_1 = PyNumber_Add(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_123); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 101; (void)__pyx_lineno; __pyx_clineno = 8789; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 101; (void)__pyx_lineno; __pyx_clineno = 8792; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8802 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_01); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 102; (void)__pyx_lineno; __pyx_clineno = 8802; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 102; (void)__pyx_lineno; __pyx_clineno = 8804; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8814 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_02); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 103; (void)__pyx_lineno; __pyx_clineno = 8814; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 103; (void)__pyx_lineno; __pyx_clineno = 8816; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8826 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_321); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 104; (void)__pyx_lineno; __pyx_clineno = 8826; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 104; (void)__pyx_lineno; __pyx_clineno = 8828; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
              }
              __pyx_L19:;
# 8840 "yxdfb/Kynaraa.cpp"
              goto __pyx_L18;
            }
# 8850 "yxdfb/Kynaraa.cpp"
                     {
              __pyx_t_17 = PyObject_Size(__pyx_v_depan); if (__builtin_expect(!!(__pyx_t_17 == ((Py_ssize_t)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 106; (void)__pyx_lineno; __pyx_clineno = 8851; (void)__pyx_clineno; } goto __pyx_L10_error; }
              __pyx_t_10 = (__pyx_t_17 < 3);
              if (__pyx_t_10) {
# 8862 "yxdfb/Kynaraa.cpp"
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_v_nama); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 107; (void)__pyx_lineno; __pyx_clineno = 8862; (void)__pyx_clineno; } goto __pyx_L10_error; }
# 8871 "yxdfb/Kynaraa.cpp"
                goto __pyx_L20;
              }
# 8881 "yxdfb/Kynaraa.cpp"
                       {
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_v_nama); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 109; (void)__pyx_lineno; __pyx_clineno = 8882; (void)__pyx_clineno; } goto __pyx_L10_error; }
# 8891 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_123); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 110; (void)__pyx_lineno; __pyx_clineno = 8891; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 110; (void)__pyx_lineno; __pyx_clineno = 8893; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8903 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_1234); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 111; (void)__pyx_lineno; __pyx_clineno = 8903; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 111; (void)__pyx_lineno; __pyx_clineno = 8905; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8915 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_12345); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 112; (void)__pyx_lineno; __pyx_clineno = 8915; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 112; (void)__pyx_lineno; __pyx_clineno = 8917; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8927 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_123456); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 113; (void)__pyx_lineno; __pyx_clineno = 8927; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 113; (void)__pyx_lineno; __pyx_clineno = 8929; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8939 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_123456789); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 114; (void)__pyx_lineno; __pyx_clineno = 8939; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 114; (void)__pyx_lineno; __pyx_clineno = 8941; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8951 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_123_2); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 115; (void)__pyx_lineno; __pyx_clineno = 8951; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 115; (void)__pyx_lineno; __pyx_clineno = 8953; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8963 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_1234_2); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 116; (void)__pyx_lineno; __pyx_clineno = 8963; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 116; (void)__pyx_lineno; __pyx_clineno = 8965; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8975 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_12345_2); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 117; (void)__pyx_lineno; __pyx_clineno = 8975; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 117; (void)__pyx_lineno; __pyx_clineno = 8977; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8987 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_belakang, __pyx_mstate_global->__pyx_kp_s_123); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 118; (void)__pyx_lineno; __pyx_clineno = 8987; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 118; (void)__pyx_lineno; __pyx_clineno = 8989; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 8999 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_belakang, __pyx_mstate_global->__pyx_kp_s_1234); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 119; (void)__pyx_lineno; __pyx_clineno = 8999; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 119; (void)__pyx_lineno; __pyx_clineno = 9001; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9011 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_belakang, __pyx_mstate_global->__pyx_kp_s_12345); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 120; (void)__pyx_lineno; __pyx_clineno = 9011; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 120; (void)__pyx_lineno; __pyx_clineno = 9013; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9023 "yxdfb/Kynaraa.cpp"
                __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_depan, __pyx_mstate_global->__pyx_n_s_upper); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 121; (void)__pyx_lineno; __pyx_clineno = 9023; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_5 = __null;
                __pyx_t_6 = 0;

                if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
                  __pyx_t_5 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
                  if (__builtin_expect(!!(__pyx_t_5), 1)) {
                    PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                    Py_INCREF(((PyObject*)((__pyx_t_5))));
                    Py_INCREF(((PyObject*)((function))));
                    do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                    __pyx_t_6 = 1;
                  }
                }

                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_5, __null};
                  __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(0+__pyx_t_6), __null);
                  Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
                  if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 121; (void)__pyx_lineno; __pyx_clineno = 9043; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                         ;
                  Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
                }
                __pyx_t_9 = PyNumber_Add(__pyx_t_1, __pyx_mstate_global->__pyx_kp_s_123); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 121; (void)__pyx_lineno; __pyx_clineno = 9047; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_9); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 121; (void)__pyx_lineno; __pyx_clineno = 9050; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 9060 "yxdfb/Kynaraa.cpp"
                __pyx_t_9 = PyNumber_Add(__pyx_v_depan, __pyx_v_belakang); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 122; (void)__pyx_lineno; __pyx_clineno = 9060; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_9); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 122; (void)__pyx_lineno; __pyx_clineno = 9062; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 9072 "yxdfb/Kynaraa.cpp"
                __pyx_t_9 = PyNumber_Add(__pyx_v_depan, __pyx_v_belakang); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 123; (void)__pyx_lineno; __pyx_clineno = 9072; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_1 = PyNumber_Add(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_123); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 123; (void)__pyx_lineno; __pyx_clineno = 9074; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 123; (void)__pyx_lineno; __pyx_clineno = 9077; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9087 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_01); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 124; (void)__pyx_lineno; __pyx_clineno = 9087; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 124; (void)__pyx_lineno; __pyx_clineno = 9089; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9099 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_02); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 125; (void)__pyx_lineno; __pyx_clineno = 9099; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 125; (void)__pyx_lineno; __pyx_clineno = 9101; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9111 "yxdfb/Kynaraa.cpp"
                __pyx_t_1 = PyNumber_Add(__pyx_v_depan, __pyx_mstate_global->__pyx_kp_s_321); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 126; (void)__pyx_lineno; __pyx_clineno = 9111; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_t_1); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 126; (void)__pyx_lineno; __pyx_clineno = 9113; (void)__pyx_clineno; } goto __pyx_L10_error; }
                Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
              }
              __pyx_L20:;
            }
            __pyx_L18:;
# 9127 "yxdfb/Kynaraa.cpp"
            __pyx_t_1 = __pyx_v_pwnya; Py_INCREF(((PyObject*)((__pyx_t_1))));
            __pyx_t_17 = 0;
            for (;;) {
              {
                Py_ssize_t __pyx_temp = PyList_GET_SIZE(((PyObject*)((__pyx_t_1))));



                if (__pyx_t_17 >= __pyx_temp) break;
              }

              __pyx_t_9 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 9138, __PRETTY_FUNCTION__, "PyList_Check(__pyx_t_1)")), ((PyListObject*)((__pyx_t_1))))->ob_item[(__pyx_t_17)]); Py_INCREF(((PyObject*)((__pyx_t_9)))); __pyx_t_17++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 128; (void)__pyx_lineno; __pyx_clineno = 9138; (void)__pyx_clineno; } goto __pyx_L10_error; }




              do { PyObject *tmp = (PyObject *) __pyx_v_xpwd; __pyx_v_xpwd = __pyx_t_9; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_9 = 0;
# 9153 "yxdfb/Kynaraa.cpp"
              __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_pasw, __pyx_v_xpwd); if (__builtin_expect(!!(__pyx_t_8 == ((int)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 129; (void)__pyx_lineno; __pyx_clineno = 9153; (void)__pyx_clineno; } goto __pyx_L10_error; }
# 9162 "yxdfb/Kynaraa.cpp"
            }
            Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9172 "yxdfb/Kynaraa.cpp"
            __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_s_graph_v1, __pyx_v_asu, 2)); if (__builtin_expect(!!((__pyx_t_10 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 132; (void)__pyx_lineno; __pyx_clineno = 9172; (void)__pyx_clineno; } goto __pyx_L10_error; }
            if (__pyx_t_10) {
# 9182 "yxdfb/Kynaraa.cpp"
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_executor, __pyx_mstate_global->__pyx_n_s_submit); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 133; (void)__pyx_lineno; __pyx_clineno = 9182; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_graph_v1); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 133; (void)__pyx_lineno; __pyx_clineno = 9184; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_15 = __null;
              __pyx_t_6 = 0;

              if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
                __pyx_t_15 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
                if (__builtin_expect(!!(__pyx_t_15), 1)) {
                  PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                  Py_INCREF(((PyObject*)((__pyx_t_15))));
                  Py_INCREF(((PyObject*)((function))));
                  do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                  __pyx_t_6 = 1;
                }
              }

              {
                PyObject *__pyx_callargs[4] = {__pyx_t_15, __pyx_t_5, __pyx_v_uid, __pyx_v_pasw};
                __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(3+__pyx_t_6), __null);
                Py_XDECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
                Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
                if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 133; (void)__pyx_lineno; __pyx_clineno = 9205; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
              }
              Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9218 "yxdfb/Kynaraa.cpp"
              goto __pyx_L24;
            }
# 9228 "yxdfb/Kynaraa.cpp"
            __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_s_graph_v2, __pyx_v_asu, 2)); if (__builtin_expect(!!((__pyx_t_10 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 134; (void)__pyx_lineno; __pyx_clineno = 9228; (void)__pyx_clineno; } goto __pyx_L10_error; }
            if (__pyx_t_10) {
# 9238 "yxdfb/Kynaraa.cpp"
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_executor, __pyx_mstate_global->__pyx_n_s_submit); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 135; (void)__pyx_lineno; __pyx_clineno = 9238; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_graph_v2); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 135; (void)__pyx_lineno; __pyx_clineno = 9240; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_15 = __null;
              __pyx_t_6 = 0;

              if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
                __pyx_t_15 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
                if (__builtin_expect(!!(__pyx_t_15), 1)) {
                  PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                  Py_INCREF(((PyObject*)((__pyx_t_15))));
                  Py_INCREF(((PyObject*)((function))));
                  do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                  __pyx_t_6 = 1;
                }
              }

              {
                PyObject *__pyx_callargs[4] = {__pyx_t_15, __pyx_t_5, __pyx_v_uid, __pyx_v_pasw};
                __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(3+__pyx_t_6), __null);
                Py_XDECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
                Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
                if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 135; (void)__pyx_lineno; __pyx_clineno = 9261; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
              }
              Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9274 "yxdfb/Kynaraa.cpp"
              goto __pyx_L24;
            }
# 9284 "yxdfb/Kynaraa.cpp"
            __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_s_valid_v1, __pyx_v_asu, 2)); if (__builtin_expect(!!((__pyx_t_10 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 136; (void)__pyx_lineno; __pyx_clineno = 9284; (void)__pyx_clineno; } goto __pyx_L10_error; }
            if (__pyx_t_10) {
# 9294 "yxdfb/Kynaraa.cpp"
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_executor, __pyx_mstate_global->__pyx_n_s_submit); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 137; (void)__pyx_lineno; __pyx_clineno = 9294; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_reguller); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 137; (void)__pyx_lineno; __pyx_clineno = 9296; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_15 = __null;
              __pyx_t_6 = 0;

              if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
                __pyx_t_15 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
                if (__builtin_expect(!!(__pyx_t_15), 1)) {
                  PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                  Py_INCREF(((PyObject*)((__pyx_t_15))));
                  Py_INCREF(((PyObject*)((function))));
                  do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                  __pyx_t_6 = 1;
                }
              }

              {
                PyObject *__pyx_callargs[6] = {__pyx_t_15, __pyx_t_5, __pyx_v_uid, __pyx_v_pasw, __pyx_mstate_global->__pyx_kp_s_https_touch_facebook_com_login_p, __pyx_mstate_global->__pyx_kp_s_VALID_V1};
                __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(5+__pyx_t_6), __null);
                Py_XDECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
                Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
                if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 137; (void)__pyx_lineno; __pyx_clineno = 9317; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
              }
              Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
# 9330 "yxdfb/Kynaraa.cpp"
              goto __pyx_L24;
            }
# 9340 "yxdfb/Kynaraa.cpp"
                     {
              __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_executor, __pyx_mstate_global->__pyx_n_s_submit); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 139; (void)__pyx_lineno; __pyx_clineno = 9341; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_reguller); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 139; (void)__pyx_lineno; __pyx_clineno = 9343; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                     ;
              __pyx_t_15 = __null;
              __pyx_t_6 = 0;

              if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
                __pyx_t_15 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
                if (__builtin_expect(!!(__pyx_t_15), 1)) {
                  PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
                  Py_INCREF(((PyObject*)((__pyx_t_15))));
                  Py_INCREF(((PyObject*)((function))));
                  do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                  __pyx_t_6 = 1;
                }
              }

              {
                PyObject *__pyx_callargs[6] = {__pyx_t_15, __pyx_t_5, __pyx_v_uid, __pyx_v_pasw, __pyx_mstate_global->__pyx_kp_s_https_x_facebook_com_login_php, __pyx_mstate_global->__pyx_kp_s_VALID_V2};
                __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, (size_t)(5+__pyx_t_6), __null);
                Py_XDECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
                Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
                if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 139; (void)__pyx_lineno; __pyx_clineno = 9364; (void)__pyx_clineno; } goto __pyx_L10_error; }
                                       ;
                Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
              }
              Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
            }
            __pyx_L24:;
# 9379 "yxdfb/Kynaraa.cpp"
          }
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
# 9389 "yxdfb/Kynaraa.cpp"
        }
        Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
        goto __pyx_L15_try_end;
        __pyx_L10_error:;
        Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_15)))); __pyx_t_15 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_16)))); __pyx_t_16 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
                    {
          __Pyx_AddTraceback("Kynaraa.Kynaa.abcd", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx__GetException(__pyx_tstate, &__pyx_t_4, &__pyx_t_1, &__pyx_t_9) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 9403; (void)__pyx_clineno; } goto __pyx_L12_except_error; }
                                  ;
                                  ;
                                  ;
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_1, __pyx_t_9); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 9407; (void)__pyx_clineno; } goto __pyx_L12_except_error; }
                                 ;
          __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_5, __null);
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
          if (__builtin_expect(!!(!__pyx_t_18), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 9412; (void)__pyx_clineno; } goto __pyx_L12_except_error; }
                                  ;
          __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_18);
          Py_DECREF(((PyObject*)((__pyx_t_18)))); __pyx_t_18 = 0;
          if (__pyx_t_10 < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 9416; (void)__pyx_clineno; } goto __pyx_L12_except_error; }
          __pyx_t_19 = (!__pyx_t_10);
          if (__builtin_expect(!!(__pyx_t_19), 0)) {
                                    ;
                                    ;
                                     ;
            __Pyx_ErrRestoreInState(PyThreadState_Get(), __pyx_t_4, __pyx_t_1, __pyx_t_9);
            __pyx_t_4 = 0; __pyx_t_1 = 0; __pyx_t_9 = 0;
            { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 9424; (void)__pyx_clineno; } goto __pyx_L12_except_error; }
          }
          Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
          Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          goto __pyx_L11_exception_handled;
        }
        __pyx_L12_except_error:;
                                  ;
                                  ;
                                  ;
        __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_12, __pyx_t_13, __pyx_t_14);
        goto __pyx_L1_error;
        __pyx_L11_exception_handled:;
                                  ;
                                  ;
                                  ;
        __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_12, __pyx_t_13, __pyx_t_14);
        __pyx_L15_try_end:;
      }
    }
                 {
                      {
        if (__pyx_t_11) {
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_mstate_global->__pyx_tuple__2, __null);
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 77; (void)__pyx_lineno; __pyx_clineno = 9450; (void)__pyx_clineno; } goto __pyx_L1_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
        }
        goto __pyx_L9;
      }
      __pyx_L9:;
    }
    goto __pyx_L29;
    __pyx_L6_error:;
    Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
    goto __pyx_L1_error;
    __pyx_L29:;
  }
# 9472 "yxdfb/Kynaraa.cpp"
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_exit, __pyx_mstate_global->__pyx_tuple__21, __null); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 141; (void)__pyx_lineno; __pyx_clineno = 9472; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 9485 "yxdfb/Kynaraa.cpp"
  __pyx_r = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_4))));
  Py_XDECREF(((PyObject*)((__pyx_t_5))));
  Py_XDECREF(((PyObject*)((__pyx_t_9))));
  Py_XDECREF(((PyObject*)((__pyx_t_15))));
  Py_XDECREF(((PyObject*)((__pyx_t_16))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.abcd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_pwnya))));
  Py_XDECREF(((PyObject*)((__pyx_v_pwek))));
  Py_XDECREF(((PyObject*)((__pyx_v_password_manual))));
  Py_XDECREF(((PyObject*)((__pyx_v_xpw))));
  Py_XDECREF(((PyObject*)((__pyx_v_user_agent_status))));
  Py_XDECREF(((PyObject*)((__pyx_v_executor))));
  Py_XDECREF(((PyObject*)((__pyx_v_user))));
  Py_XDECREF(((PyObject*)((__pyx_v_uid))));
  Py_XDECREF(((PyObject*)((__pyx_v_nama))));
  Py_XDECREF(((PyObject*)((__pyx_v_depan))));
  Py_XDECREF(((PyObject*)((__pyx_v_belakang))));
  Py_XDECREF(((PyObject*)((__pyx_v_pasw))));
  Py_XDECREF(((PyObject*)((__pyx_v_xpwd))));
                         ;
                               ;
  return __pyx_r;
}
# 9524 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_11print_proses_api(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_11print_proses_api = {"print_proses_api", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_11print_proses_api, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_11print_proses_api(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_response_text = 0;
  PyObject *__pyx_v_gp = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                             ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_response_text,&__pyx_mstate_global->__pyx_n_s_gp,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 3: values[2] = __pyx_args[2];
        [[fallthrough]];
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 9582; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_response_text)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 9590; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("print_proses_api", 1, 3, 3, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 9592; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 2:
        if (__builtin_expect(!!((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_gp)) != 0), 1)) {
          (void)values[2];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 9600; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("print_proses_api", 1, 3, 3, 2); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 9602; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "print_proses_api") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 9607; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 3), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
      values[2] = __pyx_args[2];
    }
    __pyx_v_self = values[0];
    __pyx_v_response_text = values[1];
    __pyx_v_gp = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_proses_api", 1, 3, 3, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 9622; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.print_proses_api", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_10print_proses_api(__pyx_self, __pyx_v_self, __pyx_v_response_text, __pyx_v_gp);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}
static PyObject *__pyx_gb_7Kynaraa_5Kynaa_16print_proses_api_2generator(__pyx_CoroutineObject *__pyx_generator, [[maybe_unused]] PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value);
# 9658 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_16print_proses_api_genexpr(PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = __null;

  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                          ;
  __pyx_cur_scope = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *)__pyx_tp_new_7Kynaraa___pyx_scope_struct_1_genexpr(__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_1_genexpr, __pyx_mstate_global->__pyx_empty_tuple, __null);
  if (__builtin_expect(!!(!__pyx_cur_scope), 0)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *)(&_Py_NoneStruct));
    Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
    { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9670; (void)__pyx_clineno; } goto __pyx_L1_error; }
  } else {
                                             ;
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *) __pyx_self;
  Py_INCREF(((PyObject*)(((PyObject *)__pyx_cur_scope->__pyx_outer_scope))));
                                                               ;
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  Py_INCREF(((PyObject*)((__pyx_cur_scope->__pyx_genexpr_arg_0))));
                                                     ;
  {
    __pyx_CoroutineObject *gen = __Pyx__Coroutine_New(__pyx_mstate_global->__pyx_GeneratorType, (__pyx_coroutine_body_t) __pyx_gb_7Kynaraa_5Kynaa_16print_proses_api_2generator, __null, (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_s_genexpr, __pyx_mstate_global->__pyx_n_s_Kynaa_print_proses_api_locals_ge, __pyx_mstate_global->__pyx_n_s_Kynaraa); if (__builtin_expect(!!(!gen), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9681; (void)__pyx_clineno; } goto __pyx_L1_error; }
    Py_DECREF(((PyObject*)((__pyx_cur_scope))));
                                 ;
    return (PyObject *) gen;
  }


  __pyx_L1_error:;
  __Pyx_AddTraceback("Kynaraa.Kynaa.print_proses_api.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  Py_DECREF(((PyObject*)(((PyObject *)__pyx_cur_scope))));
                         ;
                               ;
  return __pyx_r;
}

static PyObject *__pyx_gb_7Kynaraa_5Kynaa_16print_proses_api_2generator(__pyx_CoroutineObject *__pyx_generator, [[maybe_unused]] PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value)
{
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = __null;
  PyObject *__pyx_t_1 = __null;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = __null;
  PyObject *__pyx_t_4 = __null;
  PyObject *__pyx_t_5 = __null;
  PyObject *__pyx_t_6 = __null;
  unsigned int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;

                                          ;
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default:
                                 ;
    return __null;
  }
  __pyx_L3_first_run:;
  if (__builtin_expect(!!(!__pyx_sent_value), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9721; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__builtin_expect(!!(!__pyx_cur_scope->__pyx_genexpr_arg_0), 0)) { __Pyx_RaiseUnboundLocalError(".0"); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9722; (void)__pyx_clineno; } goto __pyx_L1_error; } }
  __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; Py_INCREF(((PyObject*)((__pyx_t_1))));
  __pyx_t_2 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = PyList_GET_SIZE(((PyObject*)((__pyx_t_1))));



      if (__pyx_t_2 >= __pyx_temp) break;
    }

    __pyx_t_3 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 9734, __PRETTY_FUNCTION__, "PyList_Check(__pyx_t_1)")), ((PyListObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_3)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9734; (void)__pyx_clineno; } goto __pyx_L1_error; }




                                                   ;
    do { PyObject *tmp = (PyObject *) __pyx_cur_scope->__pyx_v_pattern; __pyx_cur_scope->__pyx_v_pattern = __pyx_t_3; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
                            ;
    __pyx_t_3 = 0;
    (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_re); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9743; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_search); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9745; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_response_text), 0)) { __Pyx_RaiseClosureNameError("response_text"); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9748; (void)__pyx_clineno; } goto __pyx_L1_error; } }
    (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_re); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9749; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_IGNORECASE); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9751; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    __pyx_t_4 = __null;
    __pyx_t_7 = 0;

    if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyMethod_Type))), 0)) {
      __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_5))));
      if (__builtin_expect(!!(__pyx_t_4), 1)) {
        PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_5))));
        Py_INCREF(((PyObject*)((__pyx_t_4))));
        Py_INCREF(((PyObject*)((function))));
        do { PyObject *tmp = (PyObject *) __pyx_t_5; __pyx_t_5 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_7 = 1;
      }
    }

    {
      PyObject *__pyx_callargs[4] = {__pyx_t_4, __pyx_cur_scope->__pyx_v_pattern, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_response_text, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyObject_FastCallDict(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, (size_t)(3+__pyx_t_7), __null);
      Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
      Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
      if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9773; (void)__pyx_clineno; } goto __pyx_L1_error; }
                             ;
      Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    }
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (__builtin_expect(!!((__pyx_t_8 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9777; (void)__pyx_clineno; } goto __pyx_L1_error; }
    Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
    if (__pyx_t_8) {
      Py_XDECREF(((PyObject*)((__pyx_r))));
      Py_INCREF(((PyObject*)((((PyObject*)((&_Py_TrueStruct)))))));
      __pyx_r = ((PyObject*)((&_Py_TrueStruct)));
      Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
           {
    Py_XDECREF(((PyObject*)((__pyx_r))));
    Py_INCREF(((PyObject*)((((PyObject*)((&_Py_FalseStruct)))))));
    __pyx_r = ((PyObject*)((&_Py_FalseStruct)));
    goto __pyx_L0;
  }
  CYTHON_UNUSED_VAR(__pyx_cur_scope);


  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_3))));
  Py_XDECREF(((PyObject*)((__pyx_t_4))));
  Py_XDECREF(((PyObject*)((__pyx_t_5))));
  Py_XDECREF(((PyObject*)((__pyx_t_6))));
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
                         ;



  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
                               ;
  return __pyx_r;
}
# 9825 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_10print_proses_api([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_response_text, PyObject *__pyx_v_gp) {
  struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *__pyx_cur_scope;
  PyObject *__pyx_v_spam_patterns = __null;
  PyObject *__pyx_v_kyna = __null;
  PyObject *__pyx_gb_7Kynaraa_5Kynaa_16print_proses_api_2generator = 0;
  PyObject *__pyx_r = __null;

  PyObject *__pyx_t_1 = __null;
  PyObject *__pyx_t_2 = __null;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = __null;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                                   ;
  __pyx_cur_scope = (struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *)__pyx_tp_new_7Kynaraa___pyx_scope_struct__print_proses_api(__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct__print_proses_api, __pyx_mstate_global->__pyx_empty_tuple, __null);
  if (__builtin_expect(!!(!__pyx_cur_scope), 0)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *)(&_Py_NoneStruct));
    Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
    { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 9847; (void)__pyx_clineno; } goto __pyx_L1_error; }
  } else {
                                             ;
  }
  __pyx_cur_scope->__pyx_v_response_text = __pyx_v_response_text;
  Py_INCREF(((PyObject*)((__pyx_cur_scope->__pyx_v_response_text))));
                                                       ;
# 9862 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(8); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9862; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_Anda_Tidak_Dapat_Menggunakan_Fit))));
                                                            ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_Anda_Tidak_Dapat_Menggunakan_Fit)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9866; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_membatasi_seberapa_sering_Anda_d))));
                                                            ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_membatasi_seberapa_sering_Anda_d)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9869; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_fallback_triggered_s_true))));
                                                     ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_fallback_triggered_s_true)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9872; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_terlalu_banyak_percobaan))));
                                                    ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_terlalu_banyak_percobaan)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9875; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_aktivitas_mencurigakan))));
                                                  ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_aktivitas_mencurigakan)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9878; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_silakan_coba_lagi_nantiGagal_men))));
                                                            ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (5), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_silakan_coba_lagi_nantiGagal_men)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9881; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_sementara_diblokir))));
                                              ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_sementara_diblokir)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9884; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_Kesalahan_Kueriterkena_batas))));
                                                        ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (7), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_Kesalahan_Kueriterkena_batas)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 145; (void)__pyx_lineno; __pyx_clineno = 9887; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_spam_patterns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 9898 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = __pyx_pf_7Kynaraa_5Kynaa_16print_proses_api_genexpr(((PyObject*)__pyx_cur_scope), __pyx_v_spam_patterns); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9898; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9900; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (__builtin_expect(!!((__pyx_t_3 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 9903; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  if (__pyx_t_3) {
# 9914 "yxdfb/Kynaraa.cpp"
    __pyx_t_2 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 158; (void)__pyx_lineno; __pyx_clineno = 9914; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 158; (void)__pyx_lineno; __pyx_clineno = 9918; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 158; (void)__pyx_lineno; __pyx_clineno = 9920; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_5;
    __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_spam))));
    __pyx_t_4 += 4;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_spam))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 158; (void)__pyx_lineno; __pyx_clineno = 9932; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 158; (void)__pyx_lineno; __pyx_clineno = 9934; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_5;
    __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_t_1))));
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_4, __pyx_t_5); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 158; (void)__pyx_lineno; __pyx_clineno = 9942; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
# 9955 "yxdfb/Kynaraa.cpp"
    goto __pyx_L3;
  }
# 9965 "yxdfb/Kynaraa.cpp"
           {
    __pyx_t_1 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 160; (void)__pyx_lineno; __pyx_clineno = 9966; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 160; (void)__pyx_lineno; __pyx_clineno = 9970; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_2)))), __pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_2) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_2) : PyObject_Format(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 160; (void)__pyx_lineno; __pyx_clineno = 9972; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_5;
    __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_t_6))));
    __pyx_t_6 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_aman))));
    __pyx_t_4 += 4;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_aman))));
    (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 160; (void)__pyx_lineno; __pyx_clineno = 9984; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_2 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 160; (void)__pyx_lineno; __pyx_clineno = 9986; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) : __pyx_t_5;
    __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_2))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_t_2))));
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 160; (void)__pyx_lineno; __pyx_clineno = 9994; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    __pyx_v_kyna = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;
# 10009 "yxdfb/Kynaraa.cpp"
  __pyx_t_2 = PyTuple_New(17); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10009; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = 0;
  __pyx_t_5 = 127;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
  __pyx_t_4 += 2;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_gp)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_gp)))), __pyx_v_gp) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_gp)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_gp) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_gp)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_gp) : PyObject_Format(__pyx_v_gp, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10017; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (1), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__4))));
  __pyx_t_4 += 3;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__4))));
  Py_INCREF(((PyObject*)((__pyx_v_kyna))));
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_v_kyna)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_v_kyna)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_v_kyna))));
                             ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (3), ((PyObject*)((__pyx_v_kyna))));
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__5))));
  __pyx_t_4 += 2;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__5))));
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10037; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : PyObject_Str(__pyx_t_1)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10039; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10042; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (5), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__6))));
  __pyx_t_4 += 1;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__6))));
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_asu); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10054; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_7 = PyObject_Size(__pyx_t_1); if (__builtin_expect(!!(__pyx_t_7 == ((Py_ssize_t)-1)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10056; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_7, 0, ' ', 'd'); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10058; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (7), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_OK))));
  __pyx_t_4 += 5;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_OK))));
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10068; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10070; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (9), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10078; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10080; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (10), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10088; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10090; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (11), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_CP))));
  __pyx_t_4 += 5;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (12), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_CP))));
  (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10102; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10104; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (13), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10112; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10114; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (14), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10122; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10124; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_5 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_5) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_5;
  __pyx_t_4 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (15), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
  __pyx_t_4 += 1;
                              ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (16), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
  __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_2, 17, __pyx_t_4, __pyx_t_5); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10136; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10139; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
                          ;
  if ((PyTuple_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_t_1)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10142; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_1 = 0;
  __pyx_t_1 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10144; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_end, __pyx_mstate_global->__pyx_kp_s__8) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10146; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, __pyx_t_1); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 162; (void)__pyx_lineno; __pyx_clineno = 10147; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
# 10162 "yxdfb/Kynaraa.cpp"
  __pyx_r = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_2))));
  Py_XDECREF(((PyObject*)((__pyx_t_6))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.print_proses_api", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_spam_patterns))));
  Py_XDECREF(((PyObject*)((__pyx_v_kyna))));
  Py_XDECREF(((PyObject*)((__pyx_gb_7Kynaraa_5Kynaa_16print_proses_api_2generator))));
  Py_DECREF(((PyObject*)(((PyObject *)__pyx_cur_scope))));
                         ;
                               ;
  return __pyx_r;
}
# 10189 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_13generate_random_user_agent(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_13generate_random_user_agent = {"generate_random_user_agent", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_13generate_random_user_agent, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_13generate_random_user_agent(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  [[maybe_unused]] PyObject *__pyx_v_self = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                                       ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 165; (void)__pyx_lineno; __pyx_clineno = 10241; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "generate_random_user_agent") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 165; (void)__pyx_lineno; __pyx_clineno = 10246; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 1), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_random_user_agent", 1, 1, 1, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 165; (void)__pyx_lineno; __pyx_clineno = 10257; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.generate_random_user_agent", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_12generate_random_user_agent(__pyx_self, __pyx_v_self);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}

static PyObject *__pyx_pf_7Kynaraa_5Kynaa_12generate_random_user_agent([[maybe_unused]] PyObject *__pyx_self, [[maybe_unused]] PyObject *__pyx_v_self) {
  PyObject *__pyx_v_android_versions = __null;
  PyObject *__pyx_v_phone_models = __null;
  PyObject *__pyx_v_build_ids = __null;
  PyObject *__pyx_v_fbans = __null;
  PyObject *__pyx_v_fbavs = __null;
  PyObject *__pyx_v_fbpns = __null;
  PyObject *__pyx_v_fblcs = __null;
  PyObject *__pyx_v_fbbvs = __null;
  PyObject *__pyx_v_fbcrs = __null;
  PyObject *__pyx_v_fbcas = __null;
  PyObject *__pyx_v_densities = __null;
  PyObject *__pyx_v_screen_width = __null;
  PyObject *__pyx_v_screen_height = __null;
  PyObject *__pyx_v_fb_fw = __null;
  PyObject *__pyx_v_user_agent = __null;
  PyObject *__pyx_r = __null;

  PyObject *__pyx_t_1 = __null;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = __null;
  PyObject *__pyx_t_5 = __null;
  PyObject *__pyx_t_6 = __null;
  unsigned int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                                             ;
# 10321 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(4); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 166; (void)__pyx_lineno; __pyx_clineno = 10321; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_11))));
                              ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_11)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 166; (void)__pyx_lineno; __pyx_clineno = 10325; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_12))));
                              ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_12)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 166; (void)__pyx_lineno; __pyx_clineno = 10328; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_13))));
                              ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_13)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 166; (void)__pyx_lineno; __pyx_clineno = 10331; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_14))));
                              ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_14)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 166; (void)__pyx_lineno; __pyx_clineno = 10334; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_android_versions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10345 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 167; (void)__pyx_lineno; __pyx_clineno = 10345; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_itel_S666LN))));
                                       ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_itel_S666LN)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 167; (void)__pyx_lineno; __pyx_clineno = 10349; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_phone_models = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10360 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(5); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 168; (void)__pyx_lineno; __pyx_clineno = 10360; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_SP1A_210812_016))));
                                           ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_SP1A_210812_016)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 168; (void)__pyx_lineno; __pyx_clineno = 10364; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_QP1A_190711_020))));
                                           ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_QP1A_190711_020)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 168; (void)__pyx_lineno; __pyx_clineno = 10367; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_RP1A_200720_011))));
                                           ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_RP1A_200720_011)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 168; (void)__pyx_lineno; __pyx_clineno = 10370; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_TP1A_220905_001))));
                                           ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_TP1A_220905_001)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 168; (void)__pyx_lineno; __pyx_clineno = 10373; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_UP1A_231005_007))));
                                           ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_UP1A_231005_007)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 168; (void)__pyx_lineno; __pyx_clineno = 10376; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_build_ids = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10387 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(3); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 169; (void)__pyx_lineno; __pyx_clineno = 10387; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_Orca_Android))));
                                        ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_Orca_Android)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 169; (void)__pyx_lineno; __pyx_clineno = 10391; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_FB4A))));
                               ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_FB4A)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 169; (void)__pyx_lineno; __pyx_clineno = 10394; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_FBAN))));
                               ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_FBAN)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 169; (void)__pyx_lineno; __pyx_clineno = 10397; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_fbans = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10408 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyTuple_New(5); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10408; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10412; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_randint); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10414; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple__22, __null); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10417; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10420; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_0_0))));
  __pyx_t_2 += 5;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_0_0))));
  (__pyx_t_5) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10432; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_s_randint); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10434; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple__23, __null); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10437; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_5)))), __pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_5) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_5)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_5) : PyObject_Format(__pyx_t_5, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10440; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__24))));
  __pyx_t_2 += 1;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__24))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10452; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_randint); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10454; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple__25, __null); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10457; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10460; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_1))), (4), ((PyObject*)((__pyx_t_5))));
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_2, __pyx_t_3); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10468; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10471; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
                          ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_t_5)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 10474; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_5 = 0;
  __pyx_v_fbavs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10486 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(2); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 171; (void)__pyx_lineno; __pyx_clineno = 10486; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_com_facebook_orca))));
                                             ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_com_facebook_orca)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 171; (void)__pyx_lineno; __pyx_clineno = 10490; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_com_facebook_katana))));
                                               ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_com_facebook_katana)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 171; (void)__pyx_lineno; __pyx_clineno = 10493; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_fbpns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10504 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(4); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 172; (void)__pyx_lineno; __pyx_clineno = 10504; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_en_US))));
                                ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_en_US)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 172; (void)__pyx_lineno; __pyx_clineno = 10508; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_id_ID))));
                                ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_id_ID)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 172; (void)__pyx_lineno; __pyx_clineno = 10511; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_fr_FR))));
                                ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_fr_FR)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 172; (void)__pyx_lineno; __pyx_clineno = 10514; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_es_ES))));
                                ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_es_ES)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 172; (void)__pyx_lineno; __pyx_clineno = 10517; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_fblcs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10528 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 173; (void)__pyx_lineno; __pyx_clineno = 10528; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_randint); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 173; (void)__pyx_lineno; __pyx_clineno = 10530; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple__26, __null); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 173; (void)__pyx_lineno; __pyx_clineno = 10533; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : PyObject_Str(__pyx_t_1)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 173; (void)__pyx_lineno; __pyx_clineno = 10536; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 173; (void)__pyx_lineno; __pyx_clineno = 10539; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
                          ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_t_5)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 173; (void)__pyx_lineno; __pyx_clineno = 10542; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_5 = 0;
  __pyx_v_fbbvs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10554 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(5); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 174; (void)__pyx_lineno; __pyx_clineno = 10554; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_TELKOMSEL))));
                                    ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_TELKOMSEL)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 174; (void)__pyx_lineno; __pyx_clineno = 10558; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_INDOSAT))));
                                  ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_INDOSAT)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 174; (void)__pyx_lineno; __pyx_clineno = 10561; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_XL))));
                             ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_XL)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 174; (void)__pyx_lineno; __pyx_clineno = 10564; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_AXIS))));
                               ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_AXIS)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 174; (void)__pyx_lineno; __pyx_clineno = 10567; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_THREE))));
                                ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_THREE)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 174; (void)__pyx_lineno; __pyx_clineno = 10570; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_fbcrs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10581 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = PyList_New(3); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 175; (void)__pyx_lineno; __pyx_clineno = 10581; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_armeabi_v7a))));
                                       ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_armeabi_v7a)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 175; (void)__pyx_lineno; __pyx_clineno = 10585; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_arm64_v8a))));
                                     ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_s_arm64_v8a)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 175; (void)__pyx_lineno; __pyx_clineno = 10588; (void)__pyx_clineno; } goto __pyx_L1_error; };
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_x86))));
                              ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_x86)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 175; (void)__pyx_lineno; __pyx_clineno = 10591; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_v_fbcas = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10602 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 176; (void)__pyx_lineno; __pyx_clineno = 10602; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_uniform); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 176; (void)__pyx_lineno; __pyx_clineno = 10604; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple__27, __null); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 176; (void)__pyx_lineno; __pyx_clineno = 10607; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_kp_u_1f); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 176; (void)__pyx_lineno; __pyx_clineno = 10610; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 176; (void)__pyx_lineno; __pyx_clineno = 10613; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
                          ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_1))), (0), ((PyObject*)((__pyx_t_5)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 176; (void)__pyx_lineno; __pyx_clineno = 10616; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_5 = 0;
  __pyx_v_densities = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
# 10628 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 177; (void)__pyx_lineno; __pyx_clineno = 10628; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_randint); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 177; (void)__pyx_lineno; __pyx_clineno = 10630; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple__28, __null); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 177; (void)__pyx_lineno; __pyx_clineno = 10633; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_v_screen_width = __pyx_t_1;
  __pyx_t_1 = 0;
# 10646 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 178; (void)__pyx_lineno; __pyx_clineno = 10646; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_randint); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 178; (void)__pyx_lineno; __pyx_clineno = 10648; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple__29, __null); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 178; (void)__pyx_lineno; __pyx_clineno = 10651; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_v_screen_height = __pyx_t_1;
  __pyx_t_1 = 0;
# 10664 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 179; (void)__pyx_lineno; __pyx_clineno = 10664; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_randint); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 179; (void)__pyx_lineno; __pyx_clineno = 10666; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple__30, __null); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 179; (void)__pyx_lineno; __pyx_clineno = 10669; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_t_5 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : PyObject_Str(__pyx_t_1)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 179; (void)__pyx_lineno; __pyx_clineno = 10672; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_v_fb_fw = __pyx_t_5;
  __pyx_t_5 = 0;
# 10685 "yxdfb/Kynaraa.cpp"
  __pyx_t_5 = PyTuple_New(33); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 182; (void)__pyx_lineno; __pyx_clineno = 10685; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Dalvik_2_1_0_Linux_U_Android))));
  __pyx_t_2 += 32;
                                                        ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Dalvik_2_1_0_Linux_U_Android))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 182; (void)__pyx_lineno; __pyx_clineno = 10693; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 182; (void)__pyx_lineno; __pyx_clineno = 10695; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyMethod_Type))), 0)) {
    __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_6))));
    if (__builtin_expect(!!(__pyx_t_4), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_6; __pyx_t_6 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_android_versions};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 182; (void)__pyx_lineno; __pyx_clineno = 10716; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  }
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 182; (void)__pyx_lineno; __pyx_clineno = 10720; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (1), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__31))));
  __pyx_t_2 += 2;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__31))));
# 10740 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 183; (void)__pyx_lineno; __pyx_clineno = 10740; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 183; (void)__pyx_lineno; __pyx_clineno = 10742; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 0)) {
    __pyx_t_1 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
    if (__builtin_expect(!!(__pyx_t_1), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_phone_models};
    __pyx_t_6 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 183; (void)__pyx_lineno; __pyx_clineno = 10763; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  }
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 183; (void)__pyx_lineno; __pyx_clineno = 10767; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (3), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Build))));
  __pyx_t_2 += 7;
                                 ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Build))));
  (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 183; (void)__pyx_lineno; __pyx_clineno = 10779; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 183; (void)__pyx_lineno; __pyx_clineno = 10781; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_6 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyMethod_Type))), 0)) {
    __pyx_t_6 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_1))));
    if (__builtin_expect(!!(__pyx_t_6), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_1; __pyx_t_1 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_build_ids};
    __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 183; (void)__pyx_lineno; __pyx_clineno = 10802; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  }
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 183; (void)__pyx_lineno; __pyx_clineno = 10806; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (5), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBAN_2))));
  __pyx_t_2 += 8;
                                  ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBAN_2))));
# 10826 "yxdfb/Kynaraa.cpp"
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 184; (void)__pyx_lineno; __pyx_clineno = 10826; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 184; (void)__pyx_lineno; __pyx_clineno = 10828; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyMethod_Type))), 0)) {
    __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_6))));
    if (__builtin_expect(!!(__pyx_t_4), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_6; __pyx_t_6 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_fbans};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 184; (void)__pyx_lineno; __pyx_clineno = 10849; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  }
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 184; (void)__pyx_lineno; __pyx_clineno = 10853; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (7), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBAV))));
  __pyx_t_2 += 6;
                                ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBAV))));
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 184; (void)__pyx_lineno; __pyx_clineno = 10865; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 184; (void)__pyx_lineno; __pyx_clineno = 10867; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 0)) {
    __pyx_t_1 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
    if (__builtin_expect(!!(__pyx_t_1), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_fbavs};
    __pyx_t_6 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 184; (void)__pyx_lineno; __pyx_clineno = 10888; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  }
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 184; (void)__pyx_lineno; __pyx_clineno = 10892; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (9), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBPN))));
  __pyx_t_2 += 6;
                                ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (10), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBPN))));
# 10912 "yxdfb/Kynaraa.cpp"
  (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 185; (void)__pyx_lineno; __pyx_clineno = 10912; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 185; (void)__pyx_lineno; __pyx_clineno = 10914; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_6 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyMethod_Type))), 0)) {
    __pyx_t_6 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_1))));
    if (__builtin_expect(!!(__pyx_t_6), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_1; __pyx_t_1 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_fbpns};
    __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 185; (void)__pyx_lineno; __pyx_clineno = 10935; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  }
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 185; (void)__pyx_lineno; __pyx_clineno = 10939; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (11), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBLC))));
  __pyx_t_2 += 6;
                                ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (12), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBLC))));
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 185; (void)__pyx_lineno; __pyx_clineno = 10951; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 185; (void)__pyx_lineno; __pyx_clineno = 10953; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyMethod_Type))), 0)) {
    __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_6))));
    if (__builtin_expect(!!(__pyx_t_4), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_6; __pyx_t_6 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_fblcs};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 185; (void)__pyx_lineno; __pyx_clineno = 10974; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  }
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 185; (void)__pyx_lineno; __pyx_clineno = 10978; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (13), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBBV))));
  __pyx_t_2 += 6;
                                ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (14), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBBV))));
# 10998 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 186; (void)__pyx_lineno; __pyx_clineno = 10998; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 186; (void)__pyx_lineno; __pyx_clineno = 11000; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 0)) {
    __pyx_t_1 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
    if (__builtin_expect(!!(__pyx_t_1), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_fbbvs};
    __pyx_t_6 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 186; (void)__pyx_lineno; __pyx_clineno = 11021; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  }
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 186; (void)__pyx_lineno; __pyx_clineno = 11025; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (15), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBCR))));
  __pyx_t_2 += 6;
                                ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (16), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBCR))));
  (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 186; (void)__pyx_lineno; __pyx_clineno = 11037; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 186; (void)__pyx_lineno; __pyx_clineno = 11039; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_6 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyMethod_Type))), 0)) {
    __pyx_t_6 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_1))));
    if (__builtin_expect(!!(__pyx_t_6), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_1; __pyx_t_1 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_fbcrs};
    __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 186; (void)__pyx_lineno; __pyx_clineno = 11060; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  }
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 186; (void)__pyx_lineno; __pyx_clineno = 11064; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (17), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBMF_ITEL_FBBD_Itel_FBDV))));
  __pyx_t_2 += 26;
                                                    ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (18), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBMF_ITEL_FBBD_Itel_FBDV))));
# 11084 "yxdfb/Kynaraa.cpp"
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 187; (void)__pyx_lineno; __pyx_clineno = 11084; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 187; (void)__pyx_lineno; __pyx_clineno = 11086; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyMethod_Type))), 0)) {
    __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_6))));
    if (__builtin_expect(!!(__pyx_t_4), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_6; __pyx_t_6 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_phone_models};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 187; (void)__pyx_lineno; __pyx_clineno = 11107; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  }
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 187; (void)__pyx_lineno; __pyx_clineno = 11111; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (19), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBSV))));
  __pyx_t_2 += 6;
                                ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (20), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBSV))));
# 11131 "yxdfb/Kynaraa.cpp"
  (__pyx_t_1) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 188; (void)__pyx_lineno; __pyx_clineno = 11131; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 188; (void)__pyx_lineno; __pyx_clineno = 11133; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_1 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 0)) {
    __pyx_t_1 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
    if (__builtin_expect(!!(__pyx_t_1), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_android_versions};
    __pyx_t_6 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
    if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 188; (void)__pyx_lineno; __pyx_clineno = 11154; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  }
  __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_6)))), __pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_6) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_6) : PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 188; (void)__pyx_lineno; __pyx_clineno = 11158; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (21), ((PyObject*)((__pyx_t_4))));
  __pyx_t_4 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBCA))));
  __pyx_t_2 += 6;
                                ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (22), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBCA))));
  (__pyx_t_6) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 188; (void)__pyx_lineno; __pyx_clineno = 11170; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 188; (void)__pyx_lineno; __pyx_clineno = 11172; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  __pyx_t_6 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyMethod_Type))), 0)) {
    __pyx_t_6 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_1))));
    if (__builtin_expect(!!(__pyx_t_6), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_1))));
      Py_INCREF(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_1; __pyx_t_1 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_fbcas};
    __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 188; (void)__pyx_lineno; __pyx_clineno = 11193; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  }
  __pyx_t_1 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 188; (void)__pyx_lineno; __pyx_clineno = 11197; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_1)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_1))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (23), ((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBDM_density))));
  __pyx_t_2 += 15;
                                        ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (24), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FBDM_density))));
# 11217 "yxdfb/Kynaraa.cpp"
  (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 189; (void)__pyx_lineno; __pyx_clineno = 11217; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_choice); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 189; (void)__pyx_lineno; __pyx_clineno = 11219; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
  __pyx_t_4 = __null;
  __pyx_t_7 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_6)))), (&PyMethod_Type))), 0)) {
    __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_6))));
    if (__builtin_expect(!!(__pyx_t_4), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_6))));
      Py_INCREF(((PyObject*)((__pyx_t_4))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_6; __pyx_t_6 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_7 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_densities};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, (size_t)(1+__pyx_t_7), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 189; (void)__pyx_lineno; __pyx_clineno = 11240; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
  }
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_1)))), __pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_1) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_1) : PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 189; (void)__pyx_lineno; __pyx_clineno = 11244; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (25), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_width))));
  __pyx_t_2 += 7;
                                 ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (26), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_width))));
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_screen_width)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_screen_width)))), __pyx_v_screen_width) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_screen_width)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_screen_width) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_screen_width)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_screen_width) : PyObject_Format(__pyx_v_screen_width, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 189; (void)__pyx_lineno; __pyx_clineno = 11256; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (27), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_height))));
  __pyx_t_2 += 8;
                                  ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (28), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_height))));
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_screen_height)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_screen_height)))), __pyx_v_screen_height) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_screen_height)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_screen_height) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_screen_height)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_screen_height) : PyObject_Format(__pyx_v_screen_height, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 189; (void)__pyx_lineno; __pyx_clineno = 11267; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (29), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FB_FW))));
  __pyx_t_2 += 8;
                                 ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (30), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_FB_FW))));
# 11286 "yxdfb/Kynaraa.cpp"
  __pyx_t_6 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_fb_fw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_fb_fw)))), __pyx_v_fb_fw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_fb_fw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_fb_fw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_fb_fw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_fb_fw) : PyObject_Format(__pyx_v_fb_fw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 190; (void)__pyx_lineno; __pyx_clineno = 11286; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) > __pyx_t_3) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_6)))) : __pyx_t_3;
  __pyx_t_2 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_6))));
                          ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (31), ((PyObject*)((__pyx_t_6))));
  __pyx_t_6 = 0;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__32))));
  __pyx_t_2 += 2;
                               ;
  PyTuple_SET_ITEM(((PyObject*)((__pyx_t_5))), (32), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__32))));
# 11305 "yxdfb/Kynaraa.cpp"
  __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_5, 33, __pyx_t_2, __pyx_t_3); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 182; (void)__pyx_lineno; __pyx_clineno = 11305; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
  __pyx_v_user_agent = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
# 11318 "yxdfb/Kynaraa.cpp"
  Py_XDECREF(((PyObject*)((__pyx_r))));
  Py_INCREF(((PyObject*)((__pyx_v_user_agent))));
  __pyx_r = __pyx_v_user_agent;
  goto __pyx_L0;
# 11332 "yxdfb/Kynaraa.cpp"
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_4))));
  Py_XDECREF(((PyObject*)((__pyx_t_5))));
  Py_XDECREF(((PyObject*)((__pyx_t_6))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.generate_random_user_agent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_android_versions))));
  Py_XDECREF(((PyObject*)((__pyx_v_phone_models))));
  Py_XDECREF(((PyObject*)((__pyx_v_build_ids))));
  Py_XDECREF(((PyObject*)((__pyx_v_fbans))));
  Py_XDECREF(((PyObject*)((__pyx_v_fbavs))));
  Py_XDECREF(((PyObject*)((__pyx_v_fbpns))));
  Py_XDECREF(((PyObject*)((__pyx_v_fblcs))));
  Py_XDECREF(((PyObject*)((__pyx_v_fbbvs))));
  Py_XDECREF(((PyObject*)((__pyx_v_fbcrs))));
  Py_XDECREF(((PyObject*)((__pyx_v_fbcas))));
  Py_XDECREF(((PyObject*)((__pyx_v_densities))));
  Py_XDECREF(((PyObject*)((__pyx_v_screen_width))));
  Py_XDECREF(((PyObject*)((__pyx_v_screen_height))));
  Py_XDECREF(((PyObject*)((__pyx_v_fb_fw))));
  Py_XDECREF(((PyObject*)((__pyx_v_user_agent))));
                         ;
                               ;
  return __pyx_r;
}
# 11369 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_15graph_v1(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_15graph_v1 = {"graph_v1", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_15graph_v1, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_15graph_v1(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_user = 0;
  PyObject *__pyx_v_pasw = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                     ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_user,&__pyx_mstate_global->__pyx_n_s_pasw,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 3: values[2] = __pyx_args[2];
        [[fallthrough]];
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 11427; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_user)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 11435; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("graph_v1", 1, 3, 3, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 11437; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 2:
        if (__builtin_expect(!!((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_pasw)) != 0), 1)) {
          (void)values[2];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 11445; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("graph_v1", 1, 3, 3, 2); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 11447; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "graph_v1") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 11452; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 3), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
      values[2] = __pyx_args[2];
    }
    __pyx_v_self = values[0];
    __pyx_v_user = values[1];
    __pyx_v_pasw = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("graph_v1", 1, 3, 3, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 11467; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.graph_v1", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_14graph_v1(__pyx_self, __pyx_v_self, __pyx_v_user, __pyx_v_pasw);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}
static PyObject *__pyx_gb_7Kynaraa_5Kynaa_8graph_v1_2generator1(__pyx_CoroutineObject *__pyx_generator, [[maybe_unused]] PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value);
# 11503 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_8graph_v1_genexpr([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = __null;

  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                          ;
  __pyx_cur_scope = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *)__pyx_tp_new_7Kynaraa___pyx_scope_struct_2_genexpr(__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_2_genexpr, __pyx_mstate_global->__pyx_empty_tuple, __null);
  if (__builtin_expect(!!(!__pyx_cur_scope), 0)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *)(&_Py_NoneStruct));
    Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
    { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11515; (void)__pyx_clineno; } goto __pyx_L1_error; }
  } else {
                                             ;
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  Py_INCREF(((PyObject*)((__pyx_cur_scope->__pyx_genexpr_arg_0))));
                                                     ;
  {
    __pyx_CoroutineObject *gen = __Pyx__Coroutine_New(__pyx_mstate_global->__pyx_GeneratorType, (__pyx_coroutine_body_t) __pyx_gb_7Kynaraa_5Kynaa_8graph_v1_2generator1, __null, (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_s_genexpr, __pyx_mstate_global->__pyx_n_s_Kynaa_graph_v1_locals_genexpr, __pyx_mstate_global->__pyx_n_s_Kynaraa); if (__builtin_expect(!!(!gen), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11523; (void)__pyx_clineno; } goto __pyx_L1_error; }
    Py_DECREF(((PyObject*)((__pyx_cur_scope))));
                                 ;
    return (PyObject *) gen;
  }


  __pyx_L1_error:;
  __Pyx_AddTraceback("Kynaraa.Kynaa.graph_v1.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  Py_DECREF(((PyObject*)(((PyObject *)__pyx_cur_scope))));
                         ;
                               ;
  return __pyx_r;
}

static PyObject *__pyx_gb_7Kynaraa_5Kynaa_8graph_v1_2generator1(__pyx_CoroutineObject *__pyx_generator, [[maybe_unused]] PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value)
{
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = __null;
  PyObject *__pyx_t_1 = __null;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = __null;
  PyObject *__pyx_t_6 = __null;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;

                                          ;
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default:
                                 ;
    return __null;
  }
  __pyx_L3_first_run:;
  if (__builtin_expect(!!(!__pyx_sent_value), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11565; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_t_2 = 0;
  if (__builtin_expect(!!(!__pyx_cur_scope->__pyx_genexpr_arg_0), 0)) { __Pyx_RaiseUnboundLocalError(".0"); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11567; (void)__pyx_clineno; } goto __pyx_L1_error; } }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_genexpr_arg_0, 1, __pyx_mstate_global->__pyx_n_s_items, (&__pyx_t_3), (&__pyx_t_4)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11568; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, __null, __pyx_t_4);
    if (__builtin_expect(!!(__pyx_t_7 == 0), 0)) break;
    if (__builtin_expect(!!(__pyx_t_7 == -1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11576; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
                           ;
                                               ;
    do { PyObject *tmp = (PyObject *) __pyx_cur_scope->__pyx_v_key; __pyx_cur_scope->__pyx_v_key = __pyx_t_5; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
                            ;
    __pyx_t_5 = 0;
                                                 ;
    do { PyObject *tmp = (PyObject *) __pyx_cur_scope->__pyx_v_value; __pyx_cur_scope->__pyx_v_value = __pyx_t_6; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
                            ;
    __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11587; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_8 = 0;
    __pyx_t_9 = 127;
    __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_v_key)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_cur_scope->__pyx_v_key)))), __pyx_cur_scope->__pyx_v_key) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_v_key)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_cur_scope->__pyx_v_key) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_v_key)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_cur_scope->__pyx_v_key) : PyObject_Format(__pyx_cur_scope->__pyx_v_key, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11591; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_9 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_9) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_9;
    __pyx_t_8 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_6))), (0), ((PyObject*)((__pyx_t_5))));
    __pyx_t_5 = 0;
    Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__33))));
    __pyx_t_8 += 1;
                                 ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_6))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__33))));
    __pyx_t_5 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_v_value)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_cur_scope->__pyx_v_value)))), __pyx_cur_scope->__pyx_v_value) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_v_value)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_cur_scope->__pyx_v_value) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_v_value)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_cur_scope->__pyx_v_value) : PyObject_Format(__pyx_cur_scope->__pyx_v_value, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11602; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_9 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) > __pyx_t_9) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_5)))) : __pyx_t_9;
    __pyx_t_8 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_5))));
                            ;
    PyTuple_SET_ITEM(((PyObject*)((__pyx_t_6))), (2), ((PyObject*)((__pyx_t_5))));
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_6, 3, __pyx_t_8, __pyx_t_9); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11609; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
                             ;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
                           ;
                                 ;
    __Pyx_Coroutine_ExceptionClear(&(__pyx_generator)->gi_exc_state);

    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
                            ;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
    if (__builtin_expect(!!(!__pyx_sent_value), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 11632; (void)__pyx_clineno; } goto __pyx_L1_error; }
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  CYTHON_UNUSED_VAR(__pyx_cur_scope);


  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_5))));
  Py_XDECREF(((PyObject*)((__pyx_t_6))));
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_r)))); __pyx_r = 0;



  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
                               ;
  return __pyx_r;
}
# 11665 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_14graph_v1([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_user, PyObject *__pyx_v_pasw) {
  PyObject *__pyx_v_pw = __null;
  PyObject *__pyx_v_ua = __null;
  PyObject *__pyx_v_apcb = __null;
  PyObject *__pyx_v_data = __null;
  PyObject *__pyx_v_response = __null;
  PyObject *__pyx_v_response_text = __null;
  PyObject *__pyx_v_cokie = __null;
  PyObject *__pyx_v_cookie = __null;
  PyObject *__pyx_gb_7Kynaraa_5Kynaa_8graph_v1_2generator1 = 0;
  PyObject *__pyx_r = __null;

  PyObject *__pyx_t_1 = __null;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = __null;
  PyObject *__pyx_t_5 = __null;
  PyObject *__pyx_t_6 = __null;
  PyObject *__pyx_t_7 = __null;
  PyObject *__pyx_t_8 = __null;
  PyObject *__pyx_t_9 = __null;
  unsigned int __pyx_t_10;
  PyObject *__pyx_t_11 = __null;
  PyObject *__pyx_t_12 = __null;
  PyObject *__pyx_t_13 = __null;
  PyObject *__pyx_t_14 = __null;
  int __pyx_t_15;
  int __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_UCS4 __pyx_t_18;
  int __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                           ;
# 11708 "yxdfb/Kynaraa.cpp"
  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pasw)))), (&PyList_Type))), 1) || Py_IS_TYPE(((PyObject*)(((__pyx_v_pasw)))), (&PyTuple_Type))) {
    __pyx_t_1 = __pyx_v_pasw; Py_INCREF(((PyObject*)((__pyx_t_1))));
    __pyx_t_2 = 0;
    __pyx_t_3 = __null;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pasw); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 197; (void)__pyx_lineno; __pyx_clineno = 11713; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = (Py_TYPE(((PyObject*)((__pyx_t_1))))->tp_iternext); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 197; (void)__pyx_lineno; __pyx_clineno = 11715; (void)__pyx_clineno; } goto __pyx_L1_error; }
  }
  for (;;) {
    if (__builtin_expect(!!(!__pyx_t_3), 1)) {
      if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyList_Type))), 1)) {
        {
          Py_ssize_t __pyx_temp = PyList_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_2 >= __pyx_temp) break;
        }

        __pyx_t_4 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 11728, __PRETTY_FUNCTION__, "PyList_Check(__pyx_t_1)")), ((PyListObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_4)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 197; (void)__pyx_lineno; __pyx_clineno = 11728; (void)__pyx_clineno; } goto __pyx_L1_error; }




      } else {
        {
          Py_ssize_t __pyx_temp = PyTuple_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_2 >= __pyx_temp) break;
        }

        __pyx_t_4 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 11742, __PRETTY_FUNCTION__, "PyTuple_Check(__pyx_t_1)")), ((PyTupleObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_4)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 197; (void)__pyx_lineno; __pyx_clineno = 11742; (void)__pyx_clineno; } goto __pyx_L1_error; }




      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (__builtin_expect(!!(!__pyx_t_4), 0)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (__builtin_expect(!!(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)), 1)) PyErr_Clear();
          else { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 197; (void)__pyx_lineno; __pyx_clineno = 11754; (void)__pyx_clineno; } goto __pyx_L1_error; }
        }
        break;
      }
                             ;
    }
    do { PyObject *tmp = (PyObject *) __pyx_v_pw; __pyx_v_pw = __pyx_t_4; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    __pyx_t_4 = 0;
# 11770 "yxdfb/Kynaraa.cpp"
    {
      PyThreadState *__pyx_tstate;
      __pyx_tstate = _PyThreadState_UncheckedGet();
      __Pyx__ExceptionSave(__pyx_tstate, &__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
                              ;
                              ;
                              ;
               {
# 11786 "yxdfb/Kynaraa.cpp"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_generate_random_user_agent); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 199; (void)__pyx_lineno; __pyx_clineno = 11786; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_9 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
          __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
          if (__builtin_expect(!!(__pyx_t_9), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((__pyx_t_9))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __null};
          __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 199; (void)__pyx_lineno; __pyx_clineno = 11806; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        }
        do { PyObject *tmp = (PyObject *) __pyx_v_ua; __pyx_v_ua = __pyx_t_4; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_4 = 0;
# 11820 "yxdfb/Kynaraa.cpp"
        (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_ses); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 200; (void)__pyx_lineno; __pyx_clineno = 11820; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_headers); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 200; (void)__pyx_lineno; __pyx_clineno = 11822; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_update); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 200; (void)__pyx_lineno; __pyx_clineno = 11825; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 11836 "yxdfb/Kynaraa.cpp"
        __pyx_t_9 = ((17 <= 8) ? PyDict_New() : _PyDict_NewPresized(17)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11836; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_host, __pyx_mstate_global->__pyx_kp_s_graph_facebook_com) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11838; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_connection_type, __pyx_mstate_global->__pyx_kp_s_MOBILE_LTE) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11839; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 11848 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_user_agent, __pyx_v_ua) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11848; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_tigon_is_retry, __pyx_mstate_global->__pyx_n_s_False) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11849; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_device_group, __pyx_mstate_global->__pyx_kp_s_1633) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11850; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_graphql_request_purpose, __pyx_mstate_global->__pyx_n_s_fetch) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11851; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_privacy_context, __pyx_mstate_global->__pyx_kp_s_3643298472347298) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11852; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_friendly_name, __pyx_mstate_global->__pyx_kp_s_FbBloksActionRootQuery_com_bloks) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11853; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_graphql_client_library, __pyx_mstate_global->__pyx_n_s_graphservice) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11854; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_content_type, __pyx_mstate_global->__pyx_kp_s_application_x_www_form_urlencode) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11855; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_net_hni, __pyx_mstate_global->__pyx_kp_s_51001) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11856; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_sim_hni, __pyx_mstate_global->__pyx_kp_s_51011) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11857; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_authorization, __pyx_mstate_global->__pyx_kp_s_OAuth_350685531728_62f8ce9f74b12) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11858; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_request_analytics_tags, __pyx_mstate_global->__pyx_kp_s_network_tags_product_3506855317) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11859; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_http_engine, __pyx_mstate_global->__pyx_kp_s_Tigon_Liger) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11860; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_client_ip, __pyx_mstate_global->__pyx_n_s_True) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11861; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_kp_s_x_fb_server_cluster, __pyx_mstate_global->__pyx_n_s_True) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 201; (void)__pyx_lineno; __pyx_clineno = 11862; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_11 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 200; (void)__pyx_lineno; __pyx_clineno = 11882; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        }
        Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
# 11895 "yxdfb/Kynaraa.cpp"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_mstate_global->__pyx_kp_s_PWD_FB4A_0, __pyx_mstate_global->__pyx_n_s_format); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 219; (void)__pyx_lineno; __pyx_clineno = 11895; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_time); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 219; (void)__pyx_lineno; __pyx_clineno = 11897; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_time); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 219; (void)__pyx_lineno; __pyx_clineno = 11899; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_11 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyMethod_Type))), 0)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_12))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_12))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_12; __pyx_t_12 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __null};
          __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_12, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 219; (void)__pyx_lineno; __pyx_clineno = 11920; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        }
        __pyx_t_12 = (Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyLong_Type)) ? (Py_INCREF(((PyObject*)((__pyx_t_9)))), __pyx_t_9) : PyNumber_Long(__pyx_t_9)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 219; (void)__pyx_lineno; __pyx_clineno = 11924; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        __pyx_t_9 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_12)))), __pyx_t_12) : PyObject_Str(__pyx_t_12)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 219; (void)__pyx_lineno; __pyx_clineno = 11927; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        __pyx_t_12 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
          __pyx_t_12 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
          if (__builtin_expect(!!(__pyx_t_12), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((__pyx_t_12))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_t_9, __pyx_v_pw};
          __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 219; (void)__pyx_lineno; __pyx_clineno = 11949; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        }
        do { PyObject *tmp = (PyObject *) __pyx_v_apcb; __pyx_v_apcb = __pyx_t_4; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_4 = 0;
# 11963 "yxdfb/Kynaraa.cpp"
        __pyx_t_4 = ((12 <= 8) ? PyDict_New() : _PyDict_NewPresized(12)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11963; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_method, __pyx_mstate_global->__pyx_n_s_post) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11965; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 11974 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_pretty, ((PyObject*)((&_Py_FalseStruct)))) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11974; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_format, __pyx_mstate_global->__pyx_n_s_json) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11975; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 11984 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_server_timestamps, ((PyObject*)((&_Py_TrueStruct)))) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11984; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_locale, __pyx_mstate_global->__pyx_n_s_id_ID) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11985; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_purpose, __pyx_mstate_global->__pyx_n_s_fetch) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11986; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_fb_api_req_friendly_name, __pyx_mstate_global->__pyx_kp_s_FbBloksActionRootQuery_com_bloks) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11987; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_fb_api_caller_class, __pyx_mstate_global->__pyx_n_s_graphservice) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11988; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_client_doc_id, __pyx_mstate_global->__pyx_kp_s_119940804214876861379510865434) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 11989; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 11998 "yxdfb/Kynaraa.cpp"
        (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_json); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 11998; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_dumps); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12000; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        __pyx_t_9 = ((3 <= 8) ? PyDict_New() : _PyDict_NewPresized(3)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12003; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = ((3 <= 8) ? PyDict_New() : _PyDict_NewPresized(3)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12005; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_13 = PyNumber_Add(__pyx_mstate_global->__pyx_kp_s_params_client_input_params_devi, __pyx_v_user); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12007; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_14 = PyNumber_Add(__pyx_t_13, __pyx_mstate_global->__pyx_kp_s_encrypted_password); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12009; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
        __pyx_t_13 = PyNumber_Add(__pyx_t_14, __pyx_v_apcb); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12012; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
        __pyx_t_14 = PyNumber_Add(__pyx_t_13, __pyx_mstate_global->__pyx_kp_s_server_params_is_from_logged_ou); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12015; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_params, __pyx_t_14) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12018; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_bloks_versioning_id, __pyx_mstate_global->__pyx_kp_s_3711cb070fe0ab5acd59ae663b1ae4dc) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12020; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_app_id, __pyx_mstate_global->__pyx_kp_s_com_bloks_www_bloks_caa_login_as) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12021; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_params, __pyx_t_11) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12022; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_scale, __pyx_mstate_global->__pyx_kp_s_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12024; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_11 = ((8 <= 8) ? PyDict_New() : _PyDict_NewPresized(8)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12025; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_using_white_navbar, ((PyObject*)((&_Py_TrueStruct)))) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12027; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_styles_id, __pyx_mstate_global->__pyx_n_s_cfe75e13b386d5c54b1de2dcca1bee5a) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12028; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_pixel_ratio, __pyx_mstate_global->__pyx_int_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12029; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_is_push_on, ((PyObject*)((&_Py_FalseStruct)))) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12030; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_debug_tooling_metadata_token, (&_Py_NoneStruct)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12031; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_is_flipper_enabled, ((PyObject*)((&_Py_FalseStruct)))) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12032; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_14 = PyList_New(0); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12033; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_theme_params, __pyx_t_14) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12035; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_bloks_version, __pyx_mstate_global->__pyx_kp_s_3711cb070fe0ab5acd59ae663b1ae4dc) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12037; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_nt_context, __pyx_t_11) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12038; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_11 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyMethod_Type))), 0)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_12))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_12))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_12; __pyx_t_12 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_9};
          __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_12, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 230; (void)__pyx_lineno; __pyx_clineno = 12059; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_variables, __pyx_t_8) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 12063; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_fb_api_analytics_tags, __pyx_mstate_global->__pyx_kp_s_GraphServices) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 12065; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_client_trace_id, __pyx_mstate_global->__pyx_kp_s_c4663a0f_a919_4454_bf17_3d542589) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 221; (void)__pyx_lineno; __pyx_clineno = 12066; (void)__pyx_clineno; } goto __pyx_L5_error; }
        do { PyObject *tmp = (PyObject *) __pyx_v_data; __pyx_v_data = ((PyObject*)__pyx_t_4); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_4 = 0;
# 12077 "yxdfb/Kynaraa.cpp"
        (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_ses); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 234; (void)__pyx_lineno; __pyx_clineno = 12077; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_post); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 234; (void)__pyx_lineno; __pyx_clineno = 12079; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        __pyx_t_4 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 234; (void)__pyx_lineno; __pyx_clineno = 12082; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_data, __pyx_v_data) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 234; (void)__pyx_lineno; __pyx_clineno = 12084; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_mstate_global->__pyx_tuple__34, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 234; (void)__pyx_lineno; __pyx_clineno = 12085; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        do { PyObject *tmp = (PyObject *) __pyx_v_response; __pyx_v_response = __pyx_t_12; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_12 = 0;
# 12099 "yxdfb/Kynaraa.cpp"
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 235; (void)__pyx_lineno; __pyx_clineno = 12099; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        do { PyObject *tmp = (PyObject *) __pyx_v_response_text; __pyx_v_response_text = __pyx_t_12; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_12 = 0;
# 12111 "yxdfb/Kynaraa.cpp"
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_print_proses_api); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 236; (void)__pyx_lineno; __pyx_clineno = 12111; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_8 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 1)) {
          __pyx_t_8 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
          if (__builtin_expect(!!(__pyx_t_8), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
            Py_INCREF(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_v_response_text, __pyx_mstate_global->__pyx_kp_s_GRAPH_V1};
          __pyx_t_12 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 236; (void)__pyx_lineno; __pyx_clineno = 12131; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        }
        Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
# 12144 "yxdfb/Kynaraa.cpp"
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 238; (void)__pyx_lineno; __pyx_clineno = 12144; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 238; (void)__pyx_lineno; __pyx_clineno = 12146; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_mstate_global->__pyx_tuple__36, __null); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 238; (void)__pyx_lineno; __pyx_clineno = 12149; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        __pyx_t_16 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_s_c_user, __pyx_t_12, 2)); if (__builtin_expect(!!((__pyx_t_16 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 238; (void)__pyx_lineno; __pyx_clineno = 12152; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        if (__pyx_t_16) {
        } else {
          __pyx_t_15 = __pyx_t_16;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 238; (void)__pyx_lineno; __pyx_clineno = 12159; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_16 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_s_access_token, __pyx_t_12, 2)); if (__builtin_expect(!!((__pyx_t_16 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 238; (void)__pyx_lineno; __pyx_clineno = 12161; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        __pyx_t_15 = __pyx_t_16;
        __pyx_L14_bool_binop_done:;
        if (__pyx_t_15) {
# 12174 "yxdfb/Kynaraa.cpp"
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 239; (void)__pyx_lineno; __pyx_clineno = 12174; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_12, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 239; (void)__pyx_lineno; __pyx_clineno = 12176; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok, __pyx_t_4) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 239; (void)__pyx_lineno; __pyx_clineno = 12179; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
# 12189 "yxdfb/Kynaraa.cpp"
          __pyx_t_4 = ((5 <= 8) ? PyDict_New() : _PyDict_NewPresized(5)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12189; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_re); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12191; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_search); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12193; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12196; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12198; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_mstate_global->__pyx_tuple__36, __null); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12201; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
          __pyx_t_14 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 0)) {
            __pyx_t_14 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
            if (__builtin_expect(!!(__pyx_t_14), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_14, __pyx_mstate_global->__pyx_kp_s_name_datr_value, __pyx_t_9};
            __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12223; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          }
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_group); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12227; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 1)) {
            __pyx_t_8 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
            if (__builtin_expect(!!(__pyx_t_8), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_mstate_global->__pyx_int_1};
            __pyx_t_12 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
            if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12248; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          }
          if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_datr, __pyx_t_12) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12252; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
# 12262 "yxdfb/Kynaraa.cpp"
          (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_base64); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12262; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_b64encode); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12264; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          (__pyx_t_14) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_os); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12267; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_mstate_global->__pyx_n_s_urandom); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12269; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
          __pyx_t_14 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyMethod_Type))), 0)) {
            __pyx_t_14 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_13))));
            if (__builtin_expect(!!(__pyx_t_14), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_13; __pyx_t_13 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_mstate_global->__pyx_int_18};
            __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_13, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
            if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12290; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          }
          __pyx_t_13 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 0)) {
            __pyx_t_13 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
            if (__builtin_expect(!!(__pyx_t_13), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_8};
            __pyx_t_11 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
            if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12313; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          }
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_decode); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12317; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
            __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
            if (__builtin_expect(!!(__pyx_t_11), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __null};
            __pyx_t_12 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
            if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12338; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          }
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12342; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_mstate_global->__pyx_tuple__37, __null); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12345; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12348; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_mstate_global->__pyx_tuple__40, __null); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12351; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12354; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_mstate_global->__pyx_tuple__42, __null); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 12357; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_sb, __pyx_t_12) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12360; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
# 12370 "yxdfb/Kynaraa.cpp"
          (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_re); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 243; (void)__pyx_lineno; __pyx_clineno = 12370; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_search); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 243; (void)__pyx_lineno; __pyx_clineno = 12372; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 243; (void)__pyx_lineno; __pyx_clineno = 12375; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 243; (void)__pyx_lineno; __pyx_clineno = 12377; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_mstate_global->__pyx_tuple__36, __null); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 243; (void)__pyx_lineno; __pyx_clineno = 12380; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          __pyx_t_13 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 0)) {
            __pyx_t_13 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
            if (__builtin_expect(!!(__pyx_t_13), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_mstate_global->__pyx_kp_s_name_fr_value, __pyx_t_11};
            __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
            if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 243; (void)__pyx_lineno; __pyx_clineno = 12402; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          }
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_group); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 243; (void)__pyx_lineno; __pyx_clineno = 12406; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
            __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
            if (__builtin_expect(!!(__pyx_t_9), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_int_1};
            __pyx_t_12 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 243; (void)__pyx_lineno; __pyx_clineno = 12427; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          }
          if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_fr, __pyx_t_12) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12431; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
# 12441 "yxdfb/Kynaraa.cpp"
          (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_re); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 244; (void)__pyx_lineno; __pyx_clineno = 12441; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_search); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 244; (void)__pyx_lineno; __pyx_clineno = 12443; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 244; (void)__pyx_lineno; __pyx_clineno = 12446; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 244; (void)__pyx_lineno; __pyx_clineno = 12448; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_mstate_global->__pyx_tuple__36, __null); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 244; (void)__pyx_lineno; __pyx_clineno = 12451; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          __pyx_t_13 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 0)) {
            __pyx_t_13 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
            if (__builtin_expect(!!(__pyx_t_13), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_mstate_global->__pyx_kp_s_name_c_user_value_d, __pyx_t_9};
            __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 244; (void)__pyx_lineno; __pyx_clineno = 12473; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          }
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_group); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 244; (void)__pyx_lineno; __pyx_clineno = 12477; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 1)) {
            __pyx_t_8 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
            if (__builtin_expect(!!(__pyx_t_8), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_mstate_global->__pyx_int_1};
            __pyx_t_12 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
            if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 244; (void)__pyx_lineno; __pyx_clineno = 12498; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          }
          if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_c_user, __pyx_t_12) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12502; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
# 12512 "yxdfb/Kynaraa.cpp"
          (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_re); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 245; (void)__pyx_lineno; __pyx_clineno = 12512; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_search); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 245; (void)__pyx_lineno; __pyx_clineno = 12514; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 245; (void)__pyx_lineno; __pyx_clineno = 12517; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 245; (void)__pyx_lineno; __pyx_clineno = 12519; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_mstate_global->__pyx_tuple__36, __null); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 245; (void)__pyx_lineno; __pyx_clineno = 12522; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          __pyx_t_13 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 0)) {
            __pyx_t_13 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
            if (__builtin_expect(!!(__pyx_t_13), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_mstate_global->__pyx_kp_s_name_xs_value, __pyx_t_8};
            __pyx_t_11 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
            if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 245; (void)__pyx_lineno; __pyx_clineno = 12544; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          }
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_group); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 245; (void)__pyx_lineno; __pyx_clineno = 12548; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 1)) {
            __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
            if (__builtin_expect(!!(__pyx_t_11), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_int_1};
            __pyx_t_12 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
            if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 245; (void)__pyx_lineno; __pyx_clineno = 12569; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          }
          if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_xs, __pyx_t_12) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 241; (void)__pyx_lineno; __pyx_clineno = 12573; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          do { PyObject *tmp = (PyObject *) __pyx_v_cokie; __pyx_v_cokie = ((PyObject*)__pyx_t_4); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
          __pyx_t_4 = 0;
# 12585 "yxdfb/Kynaraa.cpp"
          __pyx_t_4 = __pyx_pf_7Kynaraa_5Kynaa_8graph_v1_genexpr(__null, __pyx_v_cokie); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 12585; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_12 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_s__43, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 12587; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          do { PyObject *tmp = (PyObject *) __pyx_v_cookie; __pyx_v_cookie = ((PyObject*)__pyx_t_12); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
          __pyx_t_12 = 0;
# 12600 "yxdfb/Kynaraa.cpp"
          __pyx_t_12 = PyTuple_New(13); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12600; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_17 = 0;
          __pyx_t_18 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          __pyx_t_17 += 2;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12608; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12610; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (1), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_OK_2))));
          __pyx_t_17 += 2;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_OK_2))));
          (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12622; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_9)))), __pyx_t_9) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_9) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_9) : PyObject_Format(__pyx_t_9, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12624; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (3), ((PyObject*)((__pyx_t_4))));
          __pyx_t_4 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          __pyx_t_17 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12636; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12638; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (5), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_17 += 1;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12650; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (7), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_17 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12661; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (9), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_17 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (10), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cookie)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_cookie)))), __pyx_v_cookie) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cookie)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_cookie) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cookie)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_cookie) : PyObject_Format(__pyx_v_cookie, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12672; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (11), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12679; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_9)))), __pyx_t_9) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_9) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_9) : PyObject_Format(__pyx_t_9, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12681; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (12), ((PyObject*)((__pyx_t_4))));
          __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_12, 13, __pyx_t_17, __pyx_t_18); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12689; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 248; (void)__pyx_lineno; __pyx_clineno = 12692; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
# 12704 "yxdfb/Kynaraa.cpp"
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_save_hasil); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12704; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_9 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12706; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_17 = 0;
          __pyx_t_18 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_OK_OK))));
          __pyx_t_17 += 18;
                                                     ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_OK_OK))));
          (__pyx_t_13) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_Tod); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12714; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_14 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyMethod_Type))), 0)) {
            __pyx_t_14 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_13))));
            if (__builtin_expect(!!(__pyx_t_14), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_13; __pyx_t_13 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, __null};
            __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_13, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
            if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12734; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          }
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_tggl); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12738; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyMethod_Type))), 1)) {
            __pyx_t_8 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_13))));
            if (__builtin_expect(!!(__pyx_t_8), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_13; __pyx_t_13 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_8, __null};
            __pyx_t_11 = __Pyx_PyObject_FastCallDict(__pyx_t_13, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
            if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12759; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          }
          __pyx_t_13 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12763; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_13))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (1), ((PyObject*)((__pyx_t_13))));
          __pyx_t_13 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_17 += 4;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_9, 3, __pyx_t_17, __pyx_t_18); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12775; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = PyTuple_New(5); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12778; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_17 = 0;
          __pyx_t_18 = 127;
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12782; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (0), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_17 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12793; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (2), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_17 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cookie)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_cookie)))), __pyx_v_cookie) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cookie)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_cookie) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cookie)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_cookie) : PyObject_Format(__pyx_v_cookie, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12804; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (4), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_9, 5, __pyx_t_17, __pyx_t_18); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12811; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 1)) {
            __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
            if (__builtin_expect(!!(__pyx_t_9), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
              Py_INCREF(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_13, __pyx_t_11};
            __pyx_t_12 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
            if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 249; (void)__pyx_lineno; __pyx_clineno = 12834; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
# 12847 "yxdfb/Kynaraa.cpp"
          goto __pyx_L10_try_break;
# 12856 "yxdfb/Kynaraa.cpp"
        }
# 12865 "yxdfb/Kynaraa.cpp"
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 251; (void)__pyx_lineno; __pyx_clineno = 12865; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_kp_s_com_bloks_www_ap_two_step_verifi, __pyx_t_12, 2)); if (__builtin_expect(!!((__pyx_t_15 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 251; (void)__pyx_lineno; __pyx_clineno = 12867; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        if (__pyx_t_15) {
# 12878 "yxdfb/Kynaraa.cpp"
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 252; (void)__pyx_lineno; __pyx_clineno = 12878; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_12, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 252; (void)__pyx_lineno; __pyx_clineno = 12880; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp, __pyx_t_4) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 252; (void)__pyx_lineno; __pyx_clineno = 12883; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
# 12893 "yxdfb/Kynaraa.cpp"
          __pyx_t_4 = PyTuple_New(12); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12893; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_17 = 0;
          __pyx_t_18 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          __pyx_t_17 += 2;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          (__pyx_t_12) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12901; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_12)))), __pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_12) : PyObject_Format(__pyx_t_12, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12903; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (1), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_CP_2))));
          __pyx_t_17 += 2;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_CP_2))));
          (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12915; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_12 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12917; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_12))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (3), ((PyObject*)((__pyx_t_12))));
          __pyx_t_12 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          __pyx_t_17 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          (__pyx_t_12) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12929; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_12)))), __pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_12) : PyObject_Format(__pyx_t_12, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12931; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (5), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_17 += 1;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12943; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (7), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_17 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12954; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (9), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12961; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_12 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12963; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_12))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (10), ((PyObject*)((__pyx_t_12))));
          __pyx_t_12 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__45))));
          __pyx_t_17 += 12;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (11), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__45))));
          __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_4, 12, __pyx_t_17, __pyx_t_18); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12975; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_12); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 253; (void)__pyx_lineno; __pyx_clineno = 12978; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
# 12990 "yxdfb/Kynaraa.cpp"
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_save_hasil); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 12990; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 12992; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_17 = 0;
          __pyx_t_18 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_CP_CP))));
          __pyx_t_17 += 18;
                                                     ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_CP_CP))));
          (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_Tod); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13000; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_14 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 0)) {
            __pyx_t_14 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
            if (__builtin_expect(!!(__pyx_t_14), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, __null};
            __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
            if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13020; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          }
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_tggl); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13024; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
            __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
            if (__builtin_expect(!!(__pyx_t_9), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, __null};
            __pyx_t_13 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13045; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          }
          __pyx_t_8 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_13)))), __pyx_t_13) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_13) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_13) : PyObject_Format(__pyx_t_13, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13049; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_8))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (1), ((PyObject*)((__pyx_t_8))));
          __pyx_t_8 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_17 += 4;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_11, 3, __pyx_t_17, __pyx_t_18); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13061; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13064; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_17 = 0;
          __pyx_t_18 = 127;
          __pyx_t_13 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13068; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_13))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (0), ((PyObject*)((__pyx_t_13))));
          __pyx_t_13 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_17 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_13 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13079; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_13))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (2), ((PyObject*)((__pyx_t_13))));
          __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_11, 3, __pyx_t_17, __pyx_t_18); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13086; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyMethod_Type))), 1)) {
            __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_12))));
            if (__builtin_expect(!!(__pyx_t_11), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_12))));
              Py_INCREF(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_12; __pyx_t_12 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_t_8, __pyx_t_13};
            __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_12, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 254; (void)__pyx_lineno; __pyx_clineno = 13109; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
# 13122 "yxdfb/Kynaraa.cpp"
          goto __pyx_L10_try_break;
# 13131 "yxdfb/Kynaraa.cpp"
        }
# 13140 "yxdfb/Kynaraa.cpp"
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 256; (void)__pyx_lineno; __pyx_clineno = 13140; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_kp_s_com_bloks_www_two_step_verificat, __pyx_t_4, 2)); if (__builtin_expect(!!((__pyx_t_15 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 256; (void)__pyx_lineno; __pyx_clineno = 13142; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        if (__pyx_t_15) {
# 13153 "yxdfb/Kynaraa.cpp"
          (__pyx_t_12) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_sys); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 257; (void)__pyx_lineno; __pyx_clineno = 13153; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_stdout); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 257; (void)__pyx_lineno; __pyx_clineno = 13155; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_mstate_global->__pyx_n_s_write); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 257; (void)__pyx_lineno; __pyx_clineno = 13158; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          __pyx_t_13 = PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_s__46, __pyx_mstate_global->__pyx_kp_s__47); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 257; (void)__pyx_lineno; __pyx_clineno = 13161; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_8 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyMethod_Type))), 1)) {
            __pyx_t_8 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_12))));
            if (__builtin_expect(!!(__pyx_t_8), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_12))));
              Py_INCREF(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_12; __pyx_t_12 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_13};
            __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_12, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 257; (void)__pyx_lineno; __pyx_clineno = 13182; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
# 13195 "yxdfb/Kynaraa.cpp"
          __pyx_t_4 = PyTuple_New(5); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13195; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_17 = 0;
          __pyx_t_18 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_GRAPH_V1_2))));
          __pyx_t_17 += 13;
                                              ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_GRAPH_V1_2))));
          (__pyx_t_12) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_R); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13203; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_13 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_12)))), __pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_12) : PyObject_Format(__pyx_t_12, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13205; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_13))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (1), ((PyObject*)((__pyx_t_13))));
          __pyx_t_13 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_spam))));
          __pyx_t_17 += 4;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_spam))));
          (__pyx_t_13) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13217; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_12 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_13)))), __pyx_t_13) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_13) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_13) : PyObject_Format(__pyx_t_13, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13219; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          __pyx_t_18 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) > __pyx_t_18) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) : __pyx_t_18;
          __pyx_t_17 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_12))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (3), ((PyObject*)((__pyx_t_12))));
          __pyx_t_12 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_mode_pesawat_5_detik))));
          __pyx_t_17 += 24;
                                                        ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_mode_pesawat_5_detik))));
          __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, __pyx_t_17, __pyx_t_18); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13231; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(1); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13234; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
                                   ;
          if ((PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (0), ((PyObject*)((__pyx_t_12)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13237; (void)__pyx_clineno; } goto __pyx_L5_error; };
          __pyx_t_12 = 0;
          __pyx_t_12 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13239; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          if (PyDict_SetItem(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_end, __pyx_mstate_global->__pyx_kp_s__8) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13241; (void)__pyx_clineno; } goto __pyx_L5_error; }
          __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_4, __pyx_t_12); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 258; (void)__pyx_lineno; __pyx_clineno = 13242; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
# 13255 "yxdfb/Kynaraa.cpp"
          (__pyx_t_12) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_time); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 259; (void)__pyx_lineno; __pyx_clineno = 13255; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_sleep); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 259; (void)__pyx_lineno; __pyx_clineno = 13257; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 0)) {
            __pyx_t_12 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
            if (__builtin_expect(!!(__pyx_t_12), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
              Py_INCREF(((PyObject*)((__pyx_t_12))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_mstate_global->__pyx_int_6};
            __pyx_t_13 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
            if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 259; (void)__pyx_lineno; __pyx_clineno = 13278; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
# 13291 "yxdfb/Kynaraa.cpp"
          (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_sys); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 260; (void)__pyx_lineno; __pyx_clineno = 13291; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_stdout); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 260; (void)__pyx_lineno; __pyx_clineno = 13293; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_write); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 260; (void)__pyx_lineno; __pyx_clineno = 13296; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_s__46, __pyx_mstate_global->__pyx_kp_s__47); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 260; (void)__pyx_lineno; __pyx_clineno = 13299; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_8 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyMethod_Type))), 1)) {
            __pyx_t_8 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_4))));
            if (__builtin_expect(!!(__pyx_t_8), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_4))));
              Py_INCREF(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_4; __pyx_t_4 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_12};
            __pyx_t_13 = __Pyx_PyObject_FastCallDict(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
            if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 260; (void)__pyx_lineno; __pyx_clineno = 13320; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
# 13333 "yxdfb/Kynaraa.cpp"
          goto __pyx_L10_try_break;
# 13342 "yxdfb/Kynaraa.cpp"
        }
# 13351 "yxdfb/Kynaraa.cpp"
      }
      Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_7)))); __pyx_t_7 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 13372 "yxdfb/Kynaraa.cpp"
      __Pyx_ErrFetchInState(__pyx_tstate, &__pyx_t_13, &__pyx_t_4, &__pyx_t_12);
      (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_requests); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 262; (void)__pyx_lineno; __pyx_clineno = 13373; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                             ;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_exceptions); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 262; (void)__pyx_lineno; __pyx_clineno = 13375; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                              ;
      Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_ConnectionError); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 262; (void)__pyx_lineno; __pyx_clineno = 13378; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                             ;
      Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
      __pyx_t_19 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_13, __pyx_t_8);
      Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
      __Pyx_ErrRestoreInState(__pyx_tstate, __pyx_t_13, __pyx_t_4, __pyx_t_12);
      __pyx_t_13 = 0; __pyx_t_4 = 0; __pyx_t_12 = 0;
      if (__pyx_t_19) {
        __Pyx_AddTraceback("Kynaraa.Kynaa.graph_v1", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx__GetException(__pyx_tstate, &__pyx_t_12, &__pyx_t_4, &__pyx_t_13) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 262; (void)__pyx_lineno; __pyx_clineno = 13387; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                 ;
                                ;
                                 ;
# 13399 "yxdfb/Kynaraa.cpp"
        (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_time); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 263; (void)__pyx_lineno; __pyx_clineno = 13399; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                ;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_sleep); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 263; (void)__pyx_lineno; __pyx_clineno = 13401; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_11 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 0)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_int_15};
          __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 263; (void)__pyx_lineno; __pyx_clineno = 13422; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        }
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;
# 13441 "yxdfb/Kynaraa.cpp"
      __pyx_L7_except_error:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L10_try_break:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L4_break;
      __pyx_L6_exception_handled:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L12_try_end:;
    }
# 13468 "yxdfb/Kynaraa.cpp"
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  goto __pyx_L18_for_end;
  __pyx_L4_break:;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  goto __pyx_L18_for_end;
  __pyx_L18_for_end:;
# 13483 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 267; (void)__pyx_lineno; __pyx_clineno = 13483; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_13 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 267; (void)__pyx_lineno; __pyx_clineno = 13485; (void)__pyx_clineno; } goto __pyx_L1_error; }
                          ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop, __pyx_t_13) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 267; (void)__pyx_lineno; __pyx_clineno = 13488; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
# 13500 "yxdfb/Kynaraa.cpp"
  __pyx_r = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_4))));
  Py_XDECREF(((PyObject*)((__pyx_t_8))));
  Py_XDECREF(((PyObject*)((__pyx_t_9))));
  Py_XDECREF(((PyObject*)((__pyx_t_11))));
  Py_XDECREF(((PyObject*)((__pyx_t_12))));
  Py_XDECREF(((PyObject*)((__pyx_t_13))));
  Py_XDECREF(((PyObject*)((__pyx_t_14))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.graph_v1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_pw))));
  Py_XDECREF(((PyObject*)((__pyx_v_ua))));
  Py_XDECREF(((PyObject*)((__pyx_v_apcb))));
  Py_XDECREF(((PyObject*)((__pyx_v_data))));
  Py_XDECREF(((PyObject*)((__pyx_v_response))));
  Py_XDECREF(((PyObject*)((__pyx_v_response_text))));
  Py_XDECREF(((PyObject*)((__pyx_v_cokie))));
  Py_XDECREF(((PyObject*)((__pyx_v_cookie))));
  Py_XDECREF(((PyObject*)((__pyx_gb_7Kynaraa_5Kynaa_8graph_v1_2generator1))));
                         ;
                               ;
  return __pyx_r;
}
# 13537 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_17graph_v2(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_17graph_v2 = {"graph_v2", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_17graph_v2, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_17graph_v2(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_user = 0;
  PyObject *__pyx_v_pasw = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                     ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_user,&__pyx_mstate_global->__pyx_n_s_pasw,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 3: values[2] = __pyx_args[2];
        [[fallthrough]];
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 13595; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_user)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 13603; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("graph_v2", 1, 3, 3, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 13605; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 2:
        if (__builtin_expect(!!((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_pasw)) != 0), 1)) {
          (void)values[2];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 13613; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("graph_v2", 1, 3, 3, 2); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 13615; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "graph_v2") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 13620; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 3), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
      values[2] = __pyx_args[2];
    }
    __pyx_v_self = values[0];
    __pyx_v_user = values[1];
    __pyx_v_pasw = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("graph_v2", 1, 3, 3, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 13635; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.graph_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_16graph_v2(__pyx_self, __pyx_v_self, __pyx_v_user, __pyx_v_pasw);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}
static PyObject *__pyx_gb_7Kynaraa_5Kynaa_8graph_v2_2generator2(__pyx_CoroutineObject *__pyx_generator, [[maybe_unused]] PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value);
# 13671 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_8graph_v2_genexpr([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_genexpr_arg_0) {
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = __null;

  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                          ;
  __pyx_cur_scope = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *)__pyx_tp_new_7Kynaraa___pyx_scope_struct_3_genexpr(__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_3_genexpr, __pyx_mstate_global->__pyx_empty_tuple, __null);
  if (__builtin_expect(!!(!__pyx_cur_scope), 0)) {
    __pyx_cur_scope = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *)(&_Py_NoneStruct));
    Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
    { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13683; (void)__pyx_clineno; } goto __pyx_L1_error; }
  } else {
                                             ;
  }
  __pyx_cur_scope->__pyx_genexpr_arg_0 = __pyx_genexpr_arg_0;
  Py_INCREF(((PyObject*)((__pyx_cur_scope->__pyx_genexpr_arg_0))));
                                                     ;
  {
    __pyx_CoroutineObject *gen = __Pyx__Coroutine_New(__pyx_mstate_global->__pyx_GeneratorType, (__pyx_coroutine_body_t) __pyx_gb_7Kynaraa_5Kynaa_8graph_v2_2generator2, __null, (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_s_genexpr, __pyx_mstate_global->__pyx_n_s_Kynaa_graph_v2_locals_genexpr, __pyx_mstate_global->__pyx_n_s_Kynaraa); if (__builtin_expect(!!(!gen), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13691; (void)__pyx_clineno; } goto __pyx_L1_error; }
    Py_DECREF(((PyObject*)((__pyx_cur_scope))));
                                 ;
    return (PyObject *) gen;
  }


  __pyx_L1_error:;
  __Pyx_AddTraceback("Kynaraa.Kynaa.graph_v2.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  Py_DECREF(((PyObject*)(((PyObject *)__pyx_cur_scope))));
                         ;
                               ;
  return __pyx_r;
}

static PyObject *__pyx_gb_7Kynaraa_5Kynaa_8graph_v2_2generator2(__pyx_CoroutineObject *__pyx_generator, [[maybe_unused]] PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value)
{
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = __null;
  PyObject *__pyx_t_1 = __null;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = __null;
  PyObject *__pyx_t_5 = __null;
  PyObject *__pyx_t_6 = __null;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;

                                          ;
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default:
                                 ;
    return __null;
  }
  __pyx_L3_first_run:;
  if (__builtin_expect(!!(!__pyx_sent_value), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13730; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (__builtin_expect(!!(!__pyx_cur_scope->__pyx_genexpr_arg_0), 0)) { __Pyx_RaiseUnboundLocalError(".0"); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13731; (void)__pyx_clineno; } goto __pyx_L1_error; } }
  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_genexpr_arg_0)))), (&PyList_Type))), 1) || Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_genexpr_arg_0)))), (&PyTuple_Type))) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_genexpr_arg_0; Py_INCREF(((PyObject*)((__pyx_t_1))));
    __pyx_t_2 = 0;
    __pyx_t_3 = __null;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_genexpr_arg_0); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13737; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = (Py_TYPE(((PyObject*)((__pyx_t_1))))->tp_iternext); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13739; (void)__pyx_clineno; } goto __pyx_L1_error; }
  }
  for (;;) {
    if (__builtin_expect(!!(!__pyx_t_3), 1)) {
      if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyList_Type))), 1)) {
        {
          Py_ssize_t __pyx_temp = PyList_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_2 >= __pyx_temp) break;
        }

        __pyx_t_4 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 13752, __PRETTY_FUNCTION__, "PyList_Check(__pyx_t_1)")), ((PyListObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_4)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13752; (void)__pyx_clineno; } goto __pyx_L1_error; }




      } else {
        {
          Py_ssize_t __pyx_temp = PyTuple_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_2 >= __pyx_temp) break;
        }

        __pyx_t_4 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 13766, __PRETTY_FUNCTION__, "PyTuple_Check(__pyx_t_1)")), ((PyTupleObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_4)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13766; (void)__pyx_clineno; } goto __pyx_L1_error; }




      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (__builtin_expect(!!(!__pyx_t_4), 0)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (__builtin_expect(!!(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)), 1)) PyErr_Clear();
          else { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13778; (void)__pyx_clineno; } goto __pyx_L1_error; }
        }
        break;
      }
                             ;
    }
                                             ;
    do { PyObject *tmp = (PyObject *) __pyx_cur_scope->__pyx_v_i; __pyx_cur_scope->__pyx_v_i = __pyx_t_4; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
                            ;
    __pyx_t_4 = 0;
    __pyx_t_4 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_v_i)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_i, __pyx_mstate_global->__pyx_n_s_name) : PyObject_GetItem(__pyx_cur_scope->__pyx_v_i, __pyx_mstate_global->__pyx_n_s_name)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13788; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_mstate_global->__pyx_kp_s__33); if (__builtin_expect(!!(!__pyx_t_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13790; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    __pyx_t_4 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_cur_scope->__pyx_v_i)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_i, __pyx_mstate_global->__pyx_n_s_value) : PyObject_GetItem(__pyx_cur_scope->__pyx_v_i, __pyx_mstate_global->__pyx_n_s_value)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13793; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13795; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
    Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
                             ;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
                           ;
                                 ;
    __Pyx_Coroutine_ExceptionClear(&(__pyx_generator)->gi_exc_state);

    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
                            ;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (__builtin_expect(!!(!__pyx_sent_value), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 13817; (void)__pyx_clineno; } goto __pyx_L1_error; }
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  CYTHON_UNUSED_VAR(__pyx_cur_scope);


  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_4))));
  Py_XDECREF(((PyObject*)((__pyx_t_5))));
  Py_XDECREF(((PyObject*)((__pyx_t_6))));
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_r)))); __pyx_r = 0;



  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
                               ;
  return __pyx_r;
}
# 13851 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pf_7Kynaraa_5Kynaa_16graph_v2([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_user, PyObject *__pyx_v_pasw) {
  PyObject *__pyx_v_pw = __null;
  PyObject *__pyx_v_ua = __null;
  PyObject *__pyx_v_data = __null;
  PyObject *__pyx_v_headers = __null;
  PyObject *__pyx_v_curl = __null;
  PyObject *__pyx_v_response = __null;
  PyObject *__pyx_v_q = __null;
  PyObject *__pyx_v_datr = __null;
  PyObject *__pyx_v_cokz = __null;
  PyObject *__pyx_v_coki = __null;
  PyObject *__pyx_gb_7Kynaraa_5Kynaa_8graph_v2_2generator2 = 0;
  PyObject *__pyx_r = __null;

  PyObject *__pyx_t_1 = __null;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = __null;
  PyObject *__pyx_t_5 = __null;
  PyObject *__pyx_t_6 = __null;
  PyObject *__pyx_t_7 = __null;
  PyObject *__pyx_t_8 = __null;
  PyObject *__pyx_t_9 = __null;
  unsigned int __pyx_t_10;
  PyObject *__pyx_t_11 = __null;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = __null;
  PyObject *__pyx_t_14 = __null;
  Py_ssize_t __pyx_t_15;
  Py_UCS4 __pyx_t_16;
  PyObject *__pyx_t_17 = __null;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                           ;
# 13895 "yxdfb/Kynaraa.cpp"
  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pasw)))), (&PyList_Type))), 1) || Py_IS_TYPE(((PyObject*)(((__pyx_v_pasw)))), (&PyTuple_Type))) {
    __pyx_t_1 = __pyx_v_pasw; Py_INCREF(((PyObject*)((__pyx_t_1))));
    __pyx_t_2 = 0;
    __pyx_t_3 = __null;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pasw); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 272; (void)__pyx_lineno; __pyx_clineno = 13900; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_3 = (Py_TYPE(((PyObject*)((__pyx_t_1))))->tp_iternext); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 272; (void)__pyx_lineno; __pyx_clineno = 13902; (void)__pyx_clineno; } goto __pyx_L1_error; }
  }
  for (;;) {
    if (__builtin_expect(!!(!__pyx_t_3), 1)) {
      if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyList_Type))), 1)) {
        {
          Py_ssize_t __pyx_temp = PyList_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_2 >= __pyx_temp) break;
        }

        __pyx_t_4 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 13915, __PRETTY_FUNCTION__, "PyList_Check(__pyx_t_1)")), ((PyListObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_4)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 272; (void)__pyx_lineno; __pyx_clineno = 13915; (void)__pyx_clineno; } goto __pyx_L1_error; }




      } else {
        {
          Py_ssize_t __pyx_temp = PyTuple_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_2 >= __pyx_temp) break;
        }

        __pyx_t_4 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 13929, __PRETTY_FUNCTION__, "PyTuple_Check(__pyx_t_1)")), ((PyTupleObject*)((__pyx_t_1))))->ob_item[(__pyx_t_2)]); Py_INCREF(((PyObject*)((__pyx_t_4)))); __pyx_t_2++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 272; (void)__pyx_lineno; __pyx_clineno = 13929; (void)__pyx_clineno; } goto __pyx_L1_error; }




      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (__builtin_expect(!!(!__pyx_t_4), 0)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (__builtin_expect(!!(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)), 1)) PyErr_Clear();
          else { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 272; (void)__pyx_lineno; __pyx_clineno = 13941; (void)__pyx_clineno; } goto __pyx_L1_error; }
        }
        break;
      }
                             ;
    }
    do { PyObject *tmp = (PyObject *) __pyx_v_pw; __pyx_v_pw = __pyx_t_4; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    __pyx_t_4 = 0;
# 13957 "yxdfb/Kynaraa.cpp"
    {
      PyThreadState *__pyx_tstate;
      __pyx_tstate = _PyThreadState_UncheckedGet();
      __Pyx__ExceptionSave(__pyx_tstate, &__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
                              ;
                              ;
                              ;
               {
# 13973 "yxdfb/Kynaraa.cpp"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_generate_random_user_agent); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 274; (void)__pyx_lineno; __pyx_clineno = 13973; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_9 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
          __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
          if (__builtin_expect(!!(__pyx_t_9), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((__pyx_t_9))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __null};
          __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 274; (void)__pyx_lineno; __pyx_clineno = 13993; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        }
        do { PyObject *tmp = (PyObject *) __pyx_v_ua; __pyx_v_ua = __pyx_t_4; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_4 = 0;
# 14007 "yxdfb/Kynaraa.cpp"
        __pyx_t_4 = ((22 <= 8) ? PyDict_New() : _PyDict_NewPresized(22)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14007; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_uuid); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14009; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_uuid4); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14011; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        __pyx_t_9 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 0)) {
          __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
          if (__builtin_expect(!!(__pyx_t_9), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((__pyx_t_9))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __null};
          __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14032; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        }
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_8)))), __pyx_t_8) : PyObject_Str(__pyx_t_8)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14036; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_adid, __pyx_t_11) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14039; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_format, __pyx_mstate_global->__pyx_n_s_json) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14041; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 14050 "yxdfb/Kynaraa.cpp"
        (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_uuid); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 278; (void)__pyx_lineno; __pyx_clineno = 14050; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_uuid4); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 278; (void)__pyx_lineno; __pyx_clineno = 14052; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        __pyx_t_8 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 0)) {
          __pyx_t_8 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
          if (__builtin_expect(!!(__pyx_t_8), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
            Py_INCREF(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __null};
          __pyx_t_11 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 278; (void)__pyx_lineno; __pyx_clineno = 14073; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        }
        __pyx_t_9 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : PyObject_Str(__pyx_t_11)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 278; (void)__pyx_lineno; __pyx_clineno = 14077; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_device_id, __pyx_t_9) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14080; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 14090 "yxdfb/Kynaraa.cpp"
        (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_uuid); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 279; (void)__pyx_lineno; __pyx_clineno = 14090; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_uuid4); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 279; (void)__pyx_lineno; __pyx_clineno = 14092; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_11 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 0)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __null};
          __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 279; (void)__pyx_lineno; __pyx_clineno = 14113; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        }
        __pyx_t_8 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_9)))), __pyx_t_9) : PyObject_Str(__pyx_t_9)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 279; (void)__pyx_lineno; __pyx_clineno = 14117; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_family_device_id, __pyx_t_8) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14120; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
# 14130 "yxdfb/Kynaraa.cpp"
        (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_uuid); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 280; (void)__pyx_lineno; __pyx_clineno = 14130; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_uuid4); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 280; (void)__pyx_lineno; __pyx_clineno = 14132; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        __pyx_t_9 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 0)) {
          __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
          if (__builtin_expect(!!(__pyx_t_9), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((__pyx_t_9))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __null};
          __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 280; (void)__pyx_lineno; __pyx_clineno = 14153; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        }
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_8)))), __pyx_t_8) : PyObject_Str(__pyx_t_8)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 280; (void)__pyx_lineno; __pyx_clineno = 14157; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_secure_family_device_id, __pyx_t_11) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14160; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_cpl, __pyx_mstate_global->__pyx_n_s_true) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14162; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_try_num, __pyx_mstate_global->__pyx_kp_s_1) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14163; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 14172 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_email, __pyx_v_user) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14172; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 14181 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_password, __pyx_v_pw) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14181; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_method, __pyx_mstate_global->__pyx_kp_s_auth_login) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14182; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_generate_session_cookies, __pyx_mstate_global->__pyx_kp_s_1) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14183; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_sim_serials, __pyx_mstate_global->__pyx_kp_s_80973453345210784798) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14184; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_openid_flow, __pyx_mstate_global->__pyx_n_s_android_login) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14185; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_openid_provider, __pyx_mstate_global->__pyx_n_s_google) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14186; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_openid_emails, __pyx_mstate_global->__pyx_kp_s_01710940017) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14187; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_openid_tokens, __pyx_mstate_global->__pyx_kp_s_eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14188; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_error_detail_type, __pyx_mstate_global->__pyx_n_s_button_with_disabled) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14189; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_source, __pyx_mstate_global->__pyx_n_s_account_recovery) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14190; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_locale, __pyx_mstate_global->__pyx_n_s_id_ID) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14191; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_client_country_code, __pyx_mstate_global->__pyx_n_s_ID) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14192; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_fb_api_req_friendly_name, __pyx_mstate_global->__pyx_n_s_authenticate) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14193; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_fb_api_caller_class, __pyx_mstate_global->__pyx_kp_s_AuthOperations_PasswordAuthOpera) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 276; (void)__pyx_lineno; __pyx_clineno = 14194; (void)__pyx_clineno; } goto __pyx_L5_error; }
        do { PyObject *tmp = (PyObject *) __pyx_v_data; __pyx_v_data = ((PyObject*)__pyx_t_4); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_4 = 0;
# 14205 "yxdfb/Kynaraa.cpp"
        __pyx_t_4 = ((7 <= 8) ? PyDict_New() : _PyDict_NewPresized(7)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 300; (void)__pyx_lineno; __pyx_clineno = 14205; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_Host, __pyx_mstate_global->__pyx_kp_s_graph_facebook_com) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 300; (void)__pyx_lineno; __pyx_clineno = 14207; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_s_Content_Type, __pyx_mstate_global->__pyx_kp_s_application_x_www_form_urlencode) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 300; (void)__pyx_lineno; __pyx_clineno = 14208; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_s_Accept_Encoding, __pyx_mstate_global->__pyx_kp_s_gzip_deflate) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 300; (void)__pyx_lineno; __pyx_clineno = 14209; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_Connection, __pyx_mstate_global->__pyx_kp_s_keep_alive) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 300; (void)__pyx_lineno; __pyx_clineno = 14210; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_Priority, __pyx_mstate_global->__pyx_kp_s_u_3_i) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 300; (void)__pyx_lineno; __pyx_clineno = 14211; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 14220 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_kp_s_User_Agent, __pyx_v_ua) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 300; (void)__pyx_lineno; __pyx_clineno = 14220; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_Authorization, __pyx_mstate_global->__pyx_kp_s_OAuth_350685531728_62f8ce9f74b12) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 300; (void)__pyx_lineno; __pyx_clineno = 14221; (void)__pyx_clineno; } goto __pyx_L5_error; }
        do { PyObject *tmp = (PyObject *) __pyx_v_headers; __pyx_v_headers = ((PyObject*)__pyx_t_4); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_4 = 0;
# 14232 "yxdfb/Kynaraa.cpp"
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_s_https_b_graph_facebook_com_auth))));
        do { PyObject *tmp = (PyObject *) __pyx_v_curl; __pyx_v_curl = __pyx_mstate_global->__pyx_kp_s_https_b_graph_facebook_com_auth; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
# 14242 "yxdfb/Kynaraa.cpp"
        (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_ses); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 309; (void)__pyx_lineno; __pyx_clineno = 14242; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_post); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 309; (void)__pyx_lineno; __pyx_clineno = 14244; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(1); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 309; (void)__pyx_lineno; __pyx_clineno = 14247; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_INCREF(((PyObject*)((__pyx_v_curl))));
                                   ;
        if ((PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (0), ((PyObject*)((__pyx_v_curl)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 309; (void)__pyx_lineno; __pyx_clineno = 14251; (void)__pyx_clineno; } goto __pyx_L5_error; };
        __pyx_t_8 = ((2 <= 8) ? PyDict_New() : _PyDict_NewPresized(2)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 309; (void)__pyx_lineno; __pyx_clineno = 14252; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        if (PyDict_SetItem(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_data, __pyx_v_data) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 309; (void)__pyx_lineno; __pyx_clineno = 14254; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_headers, __pyx_v_headers) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 309; (void)__pyx_lineno; __pyx_clineno = 14255; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_4, __pyx_t_8); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 309; (void)__pyx_lineno; __pyx_clineno = 14256; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        do { PyObject *tmp = (PyObject *) __pyx_v_response; __pyx_v_response = __pyx_t_9; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_9 = 0;
# 14271 "yxdfb/Kynaraa.cpp"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_json); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 310; (void)__pyx_lineno; __pyx_clineno = 14271; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_4 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
          __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
          if (__builtin_expect(!!(__pyx_t_4), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((__pyx_t_4))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __null};
          __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 310; (void)__pyx_lineno; __pyx_clineno = 14291; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        }
        do { PyObject *tmp = (PyObject *) __pyx_v_q; __pyx_v_q = __pyx_t_9; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_9 = 0;
# 14305 "yxdfb/Kynaraa.cpp"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_print_proses_api); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 311; (void)__pyx_lineno; __pyx_clineno = 14305; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_response, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 311; (void)__pyx_lineno; __pyx_clineno = 14307; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_t_4, __pyx_mstate_global->__pyx_kp_s_GRAPH_V2};
          __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 311; (void)__pyx_lineno; __pyx_clineno = 14328; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        }
        Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 14341 "yxdfb/Kynaraa.cpp"
        __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_s_session_key, __pyx_v_q, 2)); if (__builtin_expect(!!((__pyx_t_12 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 313; (void)__pyx_lineno; __pyx_clineno = 14341; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (__pyx_t_12) {
# 14351 "yxdfb/Kynaraa.cpp"
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 314; (void)__pyx_lineno; __pyx_clineno = 14351; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 314; (void)__pyx_lineno; __pyx_clineno = 14353; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok, __pyx_t_8) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 314; (void)__pyx_lineno; __pyx_clineno = 14356; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
# 14366 "yxdfb/Kynaraa.cpp"
          (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_base64); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14366; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_b64encode); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14368; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          (__pyx_t_13) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_os); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14371; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_mstate_global->__pyx_n_s_urandom); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14373; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          __pyx_t_13 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_14)))), (&PyMethod_Type))), 0)) {
            __pyx_t_13 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_14))));
            if (__builtin_expect(!!(__pyx_t_13), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_14; __pyx_t_14 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_mstate_global->__pyx_int_18};
            __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_14, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14394; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
          }
          __pyx_t_14 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 0)) {
            __pyx_t_14 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
            if (__builtin_expect(!!(__pyx_t_14), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_t_4};
            __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
            if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14417; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          }
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_decode); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14421; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 1)) {
            __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
            if (__builtin_expect(!!(__pyx_t_9), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, __null};
            __pyx_t_8 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14442; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          }
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14446; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_mstate_global->__pyx_tuple__37, __null); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14449; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14452; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_mstate_global->__pyx_tuple__40, __null); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14455; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_s_replace); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14458; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_mstate_global->__pyx_tuple__42, __null); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 315; (void)__pyx_lineno; __pyx_clineno = 14461; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          do { PyObject *tmp = (PyObject *) __pyx_v_datr; __pyx_v_datr = __pyx_t_8; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
          __pyx_t_8 = 0;
# 14474 "yxdfb/Kynaraa.cpp"
          __pyx_t_8 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_q)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_v_q, __pyx_mstate_global->__pyx_n_s_session_cookies) : PyObject_GetItem(__pyx_v_q, __pyx_mstate_global->__pyx_n_s_session_cookies)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 14474; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_11 = __pyx_pf_7Kynaraa_5Kynaa_8graph_v2_genexpr(__null, __pyx_t_8); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 14476; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_8 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_s__43, __pyx_t_11); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 14479; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          do { PyObject *tmp = (PyObject *) __pyx_v_cokz; __pyx_v_cokz = ((PyObject*)__pyx_t_8); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
          __pyx_t_8 = 0;
# 14492 "yxdfb/Kynaraa.cpp"
          __pyx_t_8 = PyTuple_New(5); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 317; (void)__pyx_lineno; __pyx_clineno = 14492; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_15 = 0;
          __pyx_t_16 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_datr_2))));
          __pyx_t_15 += 5;
                                          ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_8))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_datr_2))));
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_datr)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_datr)))), __pyx_v_datr) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_datr)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_datr) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_datr)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_datr) : PyObject_Format(__pyx_v_datr, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 317; (void)__pyx_lineno; __pyx_clineno = 14500; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_8))), (1), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__43))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_8))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__43))));
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cokz)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_cokz)))), __pyx_v_cokz) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cokz)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_cokz) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_cokz)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_cokz) : PyObject_Format(__pyx_v_cokz, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 317; (void)__pyx_lineno; __pyx_clineno = 14511; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_8))), (3), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_m_pixel_ratio_1_25_dpr_1_25_wd))));
          __pyx_t_15 += 40;
                                                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_8))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_m_pixel_ratio_1_25_dpr_1_25_wd))));
          __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_8, 5, __pyx_t_15, __pyx_t_16); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 317; (void)__pyx_lineno; __pyx_clineno = 14522; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          do { PyObject *tmp = (PyObject *) __pyx_v_coki; __pyx_v_coki = ((PyObject*)__pyx_t_11); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
          __pyx_t_11 = 0;
# 14535 "yxdfb/Kynaraa.cpp"
          __pyx_t_11 = PyTuple_New(14); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14535; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_15 = 0;
          __pyx_t_16 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          __pyx_t_15 += 2;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14543; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_8)))), __pyx_t_8) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_8) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_8) : PyObject_Format(__pyx_t_8, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14545; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (1), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_OK_2))));
          __pyx_t_15 += 2;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_OK_2))));
          (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14557; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_8 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_9)))), __pyx_t_9) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_9) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_9) : PyObject_Format(__pyx_t_9, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14559; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_8))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (3), ((PyObject*)((__pyx_t_8))));
          __pyx_t_8 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14571; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_8)))), __pyx_t_8) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_8) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_8) : PyObject_Format(__pyx_t_8, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14573; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (5), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_15 += 1;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14585; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (7), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_9 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14596; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_9)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_9))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (9), ((PyObject*)((__pyx_t_9))));
          __pyx_t_9 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (10), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          Py_INCREF(((PyObject*)((__pyx_v_coki))));
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_v_coki)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_v_coki)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_v_coki))));
                                     ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (11), ((PyObject*)((__pyx_v_coki))));
          (__pyx_t_9) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14612; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_8 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_9)))), __pyx_t_9) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_9) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_9) : PyObject_Format(__pyx_t_9, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14614; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_8))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (12), ((PyObject*)((__pyx_t_8))));
          __pyx_t_8 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__45))));
          __pyx_t_15 += 12;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (13), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__45))));
          __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_11, 14, __pyx_t_15, __pyx_t_16); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14626; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_8); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 318; (void)__pyx_lineno; __pyx_clineno = 14629; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
# 14641 "yxdfb/Kynaraa.cpp"
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_save_hasil); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14641; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_9 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14643; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_15 = 0;
          __pyx_t_16 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_OK_OK))));
          __pyx_t_15 += 18;
                                                     ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_OK_OK))));
          (__pyx_t_13) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_Tod); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14651; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_17 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyMethod_Type))), 0)) {
            __pyx_t_17 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_13))));
            if (__builtin_expect(!!(__pyx_t_17), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((__pyx_t_17))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_13; __pyx_t_13 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_17, __null};
            __pyx_t_14 = __Pyx_PyObject_FastCallDict(__pyx_t_13, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_17)))); __pyx_t_17 = 0;
            if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14671; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          }
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_mstate_global->__pyx_n_s_tggl); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14675; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
          __pyx_t_14 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyMethod_Type))), 1)) {
            __pyx_t_14 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_13))));
            if (__builtin_expect(!!(__pyx_t_14), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_13))));
              Py_INCREF(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_13; __pyx_t_13 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, __null};
            __pyx_t_4 = __Pyx_PyObject_FastCallDict(__pyx_t_13, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
            if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14696; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          }
          __pyx_t_13 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14700; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_13))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (1), ((PyObject*)((__pyx_t_13))));
          __pyx_t_13 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_15 += 4;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_9, 3, __pyx_t_15, __pyx_t_16); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14712; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = PyTuple_New(5); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14715; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_15 = 0;
          __pyx_t_16 = 127;
          __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14719; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (0), ((PyObject*)((__pyx_t_4))));
          __pyx_t_4 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14730; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (2), ((PyObject*)((__pyx_t_4))));
          __pyx_t_4 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          Py_INCREF(((PyObject*)((__pyx_v_coki))));
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_v_coki)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_v_coki)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_v_coki))));
                                     ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_9))), (4), ((PyObject*)((__pyx_v_coki))));
          __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_9, 5, __pyx_t_15, __pyx_t_16); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14746; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
            __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
            if (__builtin_expect(!!(__pyx_t_9), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_13, __pyx_t_4};
            __pyx_t_11 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
            if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 319; (void)__pyx_lineno; __pyx_clineno = 14769; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
# 14782 "yxdfb/Kynaraa.cpp"
          goto __pyx_L10_try_break;
# 14791 "yxdfb/Kynaraa.cpp"
        }
# 14800 "yxdfb/Kynaraa.cpp"
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_q)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_v_q, __pyx_mstate_global->__pyx_n_s_error) : PyObject_GetItem(__pyx_v_q, __pyx_mstate_global->__pyx_n_s_error)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 321; (void)__pyx_lineno; __pyx_clineno = 14800; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_8 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_message) : PyObject_GetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_message)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 321; (void)__pyx_lineno; __pyx_clineno = 14802; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_kp_s_User_must_verify_their_account, __pyx_t_8, 2)); if (__builtin_expect(!!((__pyx_t_12 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 321; (void)__pyx_lineno; __pyx_clineno = 14805; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        if (__pyx_t_12) {
# 14816 "yxdfb/Kynaraa.cpp"
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 322; (void)__pyx_lineno; __pyx_clineno = 14816; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_8, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 322; (void)__pyx_lineno; __pyx_clineno = 14818; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp, __pyx_t_11) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 322; (void)__pyx_lineno; __pyx_clineno = 14821; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
# 14831 "yxdfb/Kynaraa.cpp"
          __pyx_t_11 = PyTuple_New(12); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14831; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_15 = 0;
          __pyx_t_16 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          __pyx_t_15 += 2;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14839; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_8)))), __pyx_t_8) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_8) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_8) : PyObject_Format(__pyx_t_8, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14841; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (1), ((PyObject*)((__pyx_t_4))));
          __pyx_t_4 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_CP_2))));
          __pyx_t_15 += 2;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_CP_2))));
          (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14853; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_8 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14855; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_8))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (3), ((PyObject*)((__pyx_t_8))));
          __pyx_t_8 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          (__pyx_t_8) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14867; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_8)))), __pyx_t_8) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_8) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_8) : PyObject_Format(__pyx_t_8, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14869; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (5), ((PyObject*)((__pyx_t_4))));
          __pyx_t_4 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_15 += 1;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14881; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (7), ((PyObject*)((__pyx_t_4))));
          __pyx_t_4 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_4 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14892; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_4)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_4))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (9), ((PyObject*)((__pyx_t_4))));
          __pyx_t_4 = 0;
          (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14899; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_8 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_4)))), __pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_4) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_4)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_4) : PyObject_Format(__pyx_t_4, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14901; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_8)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_8))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (10), ((PyObject*)((__pyx_t_8))));
          __pyx_t_8 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__45))));
          __pyx_t_15 += 12;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (11), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__45))));
          __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_11, 12, __pyx_t_15, __pyx_t_16); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14913; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_8); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 323; (void)__pyx_lineno; __pyx_clineno = 14916; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
# 14928 "yxdfb/Kynaraa.cpp"
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_save_hasil); if (__builtin_expect(!!(!__pyx_t_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 14928; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_4 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 14930; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_15 = 0;
          __pyx_t_16 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_CP_CP))));
          __pyx_t_15 += 18;
                                                     ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_CP_CP))));
          (__pyx_t_14) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_Tod); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 14938; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_17 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_14)))), (&PyMethod_Type))), 0)) {
            __pyx_t_17 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_14))));
            if (__builtin_expect(!!(__pyx_t_17), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((__pyx_t_17))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_14; __pyx_t_14 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_17, __null};
            __pyx_t_9 = __Pyx_PyObject_FastCallDict(__pyx_t_14, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_17)))); __pyx_t_17 = 0;
            if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 14958; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
          }
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_s_tggl); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 14962; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
          __pyx_t_9 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_14)))), (&PyMethod_Type))), 1)) {
            __pyx_t_9 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_14))));
            if (__builtin_expect(!!(__pyx_t_9), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_14))));
              Py_INCREF(((PyObject*)((__pyx_t_9))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_14; __pyx_t_14 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_9, __null};
            __pyx_t_13 = __Pyx_PyObject_FastCallDict(__pyx_t_14, __pyx_callargs+1-__pyx_t_10, (size_t)(0+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
            if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 14983; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
          }
          __pyx_t_14 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_13)))), __pyx_t_13) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_13) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_13)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_13) : PyObject_Format(__pyx_t_13, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 14987; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_14)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_14)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_14))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (1), ((PyObject*)((__pyx_t_14))));
          __pyx_t_14 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_15 += 4;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_15, __pyx_t_16); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 14999; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_4 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 15002; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_15 = 0;
          __pyx_t_16 = 127;
          __pyx_t_13 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 15006; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_13))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (0), ((PyObject*)((__pyx_t_13))));
          __pyx_t_13 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_15 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_13 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 15017; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) > __pyx_t_16) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_13)))) : __pyx_t_16;
          __pyx_t_15 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_13))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_4))), (2), ((PyObject*)((__pyx_t_13))));
          __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_15, __pyx_t_16); if (__builtin_expect(!!(!__pyx_t_13), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 15024; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          __pyx_t_4 = __null;
          __pyx_t_10 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_8)))), (&PyMethod_Type))), 1)) {
            __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_8))));
            if (__builtin_expect(!!(__pyx_t_4), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_8))));
              Py_INCREF(((PyObject*)((__pyx_t_4))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_8; __pyx_t_8 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_10 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_14, __pyx_t_13};
            __pyx_t_11 = __Pyx_PyObject_FastCallDict(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, (size_t)(2+__pyx_t_10), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
            if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 324; (void)__pyx_lineno; __pyx_clineno = 15047; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
# 15060 "yxdfb/Kynaraa.cpp"
          goto __pyx_L10_try_break;
# 15069 "yxdfb/Kynaraa.cpp"
        }
# 15078 "yxdfb/Kynaraa.cpp"
      }
      Py_XDECREF(((PyObject*)((__pyx_t_5)))); __pyx_t_5 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_6)))); __pyx_t_6 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_7)))); __pyx_t_7 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_17)))); __pyx_t_17 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
# 15099 "yxdfb/Kynaraa.cpp"
      __Pyx_ErrFetchInState(__pyx_tstate, &__pyx_t_11, &__pyx_t_8, &__pyx_t_13);
      (__pyx_t_14) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_requests); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 326; (void)__pyx_lineno; __pyx_clineno = 15100; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                              ;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_mstate_global->__pyx_n_s_exceptions); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 326; (void)__pyx_lineno; __pyx_clineno = 15102; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                             ;
      Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_ConnectionError); if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 326; (void)__pyx_lineno; __pyx_clineno = 15105; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                              ;
      Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
      __pyx_t_18 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_11, __pyx_t_14);
      Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
      __Pyx_ErrRestoreInState(__pyx_tstate, __pyx_t_11, __pyx_t_8, __pyx_t_13);
      __pyx_t_11 = 0; __pyx_t_8 = 0; __pyx_t_13 = 0;
      if (__pyx_t_18) {
        __Pyx_AddTraceback("Kynaraa.Kynaa.graph_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx__GetException(__pyx_tstate, &__pyx_t_13, &__pyx_t_8, &__pyx_t_11) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 326; (void)__pyx_lineno; __pyx_clineno = 15114; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                 ;
                                ;
                                 ;
# 15126 "yxdfb/Kynaraa.cpp"
        (__pyx_t_4) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_time); if (__builtin_expect(!!(!__pyx_t_4), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 327; (void)__pyx_lineno; __pyx_clineno = 15126; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                               ;
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_s_sleep); if (__builtin_expect(!!(!__pyx_t_9), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 327; (void)__pyx_lineno; __pyx_clineno = 15128; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
        __pyx_t_4 = __null;
        __pyx_t_10 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_9)))), (&PyMethod_Type))), 0)) {
          __pyx_t_4 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_9))));
          if (__builtin_expect(!!(__pyx_t_4), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_9))));
            Py_INCREF(((PyObject*)((__pyx_t_4))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_9; __pyx_t_9 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_10 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_int_15};
          __pyx_t_14 = __Pyx_PyObject_FastCallDict(__pyx_t_9, __pyx_callargs+1-__pyx_t_10, (size_t)(1+__pyx_t_10), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_4)))); __pyx_t_4 = 0;
          if (__builtin_expect(!!(!__pyx_t_14), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 327; (void)__pyx_lineno; __pyx_clineno = 15149; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
        }
        Py_DECREF(((PyObject*)((__pyx_t_14)))); __pyx_t_14 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_13)))); __pyx_t_13 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;
# 15168 "yxdfb/Kynaraa.cpp"
      __pyx_L7_except_error:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L10_try_break:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L4_break;
      __pyx_L6_exception_handled:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L12_try_end:;
    }
# 15195 "yxdfb/Kynaraa.cpp"
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  goto __pyx_L16_for_end;
  __pyx_L4_break:;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  goto __pyx_L16_for_end;
  __pyx_L16_for_end:;
# 15210 "yxdfb/Kynaraa.cpp"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 331; (void)__pyx_lineno; __pyx_clineno = 15210; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 331; (void)__pyx_lineno; __pyx_clineno = 15212; (void)__pyx_clineno; } goto __pyx_L1_error; }
                          ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop, __pyx_t_11) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 331; (void)__pyx_lineno; __pyx_clineno = 15215; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
# 15227 "yxdfb/Kynaraa.cpp"
  __pyx_r = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_4))));
  Py_XDECREF(((PyObject*)((__pyx_t_8))));
  Py_XDECREF(((PyObject*)((__pyx_t_9))));
  Py_XDECREF(((PyObject*)((__pyx_t_11))));
  Py_XDECREF(((PyObject*)((__pyx_t_13))));
  Py_XDECREF(((PyObject*)((__pyx_t_14))));
  Py_XDECREF(((PyObject*)((__pyx_t_17))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.graph_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_pw))));
  Py_XDECREF(((PyObject*)((__pyx_v_ua))));
  Py_XDECREF(((PyObject*)((__pyx_v_data))));
  Py_XDECREF(((PyObject*)((__pyx_v_headers))));
  Py_XDECREF(((PyObject*)((__pyx_v_curl))));
  Py_XDECREF(((PyObject*)((__pyx_v_response))));
  Py_XDECREF(((PyObject*)((__pyx_v_q))));
  Py_XDECREF(((PyObject*)((__pyx_v_datr))));
  Py_XDECREF(((PyObject*)((__pyx_v_cokz))));
  Py_XDECREF(((PyObject*)((__pyx_v_coki))));
  Py_XDECREF(((PyObject*)((__pyx_gb_7Kynaraa_5Kynaa_8graph_v2_2generator2))));
                         ;
                               ;
  return __pyx_r;
}
# 15266 "yxdfb/Kynaraa.cpp"
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_19reguller(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



);
static PyMethodDef __pyx_mdef_7Kynaraa_5Kynaa_19reguller = {"reguller", (PyCFunction)(void*)(_PyCFunctionFastWithKeywords)__pyx_pw_7Kynaraa_5Kynaa_19reguller, 0x0080|0x0002, 0};
static PyObject *__pyx_pw_7Kynaraa_5Kynaa_19reguller(PyObject *__pyx_self,

PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds



) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_user = 0;
  PyObject *__pyx_v_pasw = 0;
  PyObject *__pyx_v_host = 0;
  PyObject *__pyx_v_note = 0;



  [[maybe_unused]] PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;

                                                     ;







  __pyx_kwvalues = ((__pyx_args) + (__pyx_nargs));
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_s_self,&__pyx_mstate_global->__pyx_n_s_user,&__pyx_mstate_global->__pyx_n_s_pasw,&__pyx_mstate_global->__pyx_n_s_host,&__pyx_mstate_global->__pyx_n_s_note,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 5: values[4] = __pyx_args[4];
        [[fallthrough]];
        case 4: values[3] = __pyx_args[3];
        [[fallthrough]];
        case 3: values[2] = __pyx_args[2];
        [[fallthrough]];
        case 2: values[1] = __pyx_args[1];
        [[fallthrough]];
        case 1: values[0] = __pyx_args[0];
        [[fallthrough]];
        case 0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyTuple_GET_SIZE(((PyObject*)((__pyx_kwds))));
      switch (__pyx_nargs) {
        case 0:
        if (__builtin_expect(!!((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_self)) != 0), 1)) {
          (void)values[0];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15330; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else goto __pyx_L5_argtuple_error;
        [[fallthrough]];
        case 1:
        if (__builtin_expect(!!((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_user)) != 0), 1)) {
          (void)values[1];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15338; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("reguller", 1, 5, 5, 1); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15340; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 2:
        if (__builtin_expect(!!((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_pasw)) != 0), 1)) {
          (void)values[2];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15348; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("reguller", 1, 5, 5, 2); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15350; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 3:
        if (__builtin_expect(!!((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_host)) != 0), 1)) {
          (void)values[3];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15358; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("reguller", 1, 5, 5, 3); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15360; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
        [[fallthrough]];
        case 4:
        if (__builtin_expect(!!((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_mstate_global->__pyx_n_s_note)) != 0), 1)) {
          (void)values[4];
          kw_args--;
        }
        else if (__builtin_expect(!!(PyErr_Occurred()), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15368; (void)__pyx_clineno; } goto __pyx_L3_error; }
        else {
          __Pyx_RaiseArgtupleInvalid("reguller", 1, 5, 5, 4); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15370; (void)__pyx_clineno; } goto __pyx_L3_error; }
        }
      }
      if (__builtin_expect(!!(kw_args > 0), 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (__builtin_expect(!!(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "reguller") < 0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15375; (void)__pyx_clineno; } goto __pyx_L3_error; }
      }
    } else if (__builtin_expect(!!(__pyx_nargs != 5), 0)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __pyx_args[0];
      values[1] = __pyx_args[1];
      values[2] = __pyx_args[2];
      values[3] = __pyx_args[3];
      values[4] = __pyx_args[4];
    }
    __pyx_v_self = values[0];
    __pyx_v_user = values[1];
    __pyx_v_pasw = values[2];
    __pyx_v_host = values[3];
    __pyx_v_note = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reguller", 1, 5, 5, __pyx_nargs); { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 15394; (void)__pyx_clineno; } goto __pyx_L3_error; }
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
  __Pyx_AddTraceback("Kynaraa.Kynaa.reguller", __pyx_clineno, __pyx_lineno, __pyx_filename);
                               ;
  return __null;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7Kynaraa_5Kynaa_18reguller(__pyx_self, __pyx_v_self, __pyx_v_user, __pyx_v_pasw, __pyx_v_host, __pyx_v_note);


  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
                                                    ;
    }
  }
                               ;
  return __pyx_r;
}

static PyObject *__pyx_pf_7Kynaraa_5Kynaa_18reguller([[maybe_unused]] PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_user, PyObject *__pyx_v_pasw, PyObject *__pyx_v_host, PyObject *__pyx_v_note) {
  PyObject *__pyx_v_ss = __null;
  PyObject *__pyx_v_pw = __null;
  PyObject *__pyx_v_rr = __null;
  PyObject *__pyx_v_ua = __null;
  PyObject *__pyx_v_kyan = __null;
  PyObject *__pyx_v_kyna = __null;
  PyObject *__pyx_v_data = __null;
  PyObject *__pyx_v_apcb = __null;
  PyObject *__pyx_v_head = __null;
  [[maybe_unused]] PyObject *__pyx_v_szaz = __null;
  PyObject *__pyx_v_coki = __null;
  PyObject *__pyx_8genexpr3__pyx_v_key = __null;
  PyObject *__pyx_8genexpr3__pyx_v_value = __null;
  PyObject *__pyx_r = __null;

  PyObject *__pyx_t_1 = __null;
  PyObject *__pyx_t_2 = __null;
  PyObject *__pyx_t_3 = __null;
  unsigned int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = __null;
  PyObject *__pyx_t_8 = __null;
  PyObject *__pyx_t_9 = __null;
  PyObject *__pyx_t_10 = __null;
  PyObject *__pyx_t_11 = __null;
  PyObject *__pyx_t_12 = __null;
  Py_ssize_t __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = __null;
  PyObject *__pyx_t_20 = __null;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                           ;
# 15469 "yxdfb/Kynaraa.cpp"
  (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_requests); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 361; (void)__pyx_lineno; __pyx_clineno = 15469; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_Session); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 361; (void)__pyx_lineno; __pyx_clineno = 15471; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __null;
  __pyx_t_4 = 0;

  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyMethod_Type))), 0)) {
    __pyx_t_2 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_3))));
    if (__builtin_expect(!!(__pyx_t_2), 1)) {
      PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_3))));
      Py_INCREF(((PyObject*)((__pyx_t_2))));
      Py_INCREF(((PyObject*)((function))));
      do { PyObject *tmp = (PyObject *) __pyx_t_3; __pyx_t_3 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
      __pyx_t_4 = 1;
    }
  }

  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __null};
    __pyx_t_1 = __Pyx_PyObject_FastCallDict(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
    Py_XDECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
    if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 361; (void)__pyx_lineno; __pyx_clineno = 15492; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  }
  __pyx_v_ss = __pyx_t_1;
  __pyx_t_1 = 0;
# 15506 "yxdfb/Kynaraa.cpp"
  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pasw)))), (&PyList_Type))), 1) || Py_IS_TYPE(((PyObject*)(((__pyx_v_pasw)))), (&PyTuple_Type))) {
    __pyx_t_1 = __pyx_v_pasw; Py_INCREF(((PyObject*)((__pyx_t_1))));
    __pyx_t_5 = 0;
    __pyx_t_6 = __null;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pasw); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 362; (void)__pyx_lineno; __pyx_clineno = 15511; (void)__pyx_clineno; } goto __pyx_L1_error; }
                           ;
    __pyx_t_6 = (Py_TYPE(((PyObject*)((__pyx_t_1))))->tp_iternext); if (__builtin_expect(!!(!__pyx_t_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 362; (void)__pyx_lineno; __pyx_clineno = 15513; (void)__pyx_clineno; } goto __pyx_L1_error; }
  }
  for (;;) {
    if (__builtin_expect(!!(!__pyx_t_6), 1)) {
      if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_1)))), (&PyList_Type))), 1)) {
        {
          Py_ssize_t __pyx_temp = PyList_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_5 >= __pyx_temp) break;
        }

        __pyx_t_3 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 15526, __PRETTY_FUNCTION__, "PyList_Check(__pyx_t_1)")), ((PyListObject*)((__pyx_t_1))))->ob_item[(__pyx_t_5)]); Py_INCREF(((PyObject*)((__pyx_t_3)))); __pyx_t_5++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 362; (void)__pyx_lineno; __pyx_clineno = 15526; (void)__pyx_clineno; } goto __pyx_L1_error; }




      } else {
        {
          Py_ssize_t __pyx_temp = PyTuple_GET_SIZE(((PyObject*)((__pyx_t_1))));



          if (__pyx_t_5 >= __pyx_temp) break;
        }

        __pyx_t_3 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((__pyx_t_1))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 15540, __PRETTY_FUNCTION__, "PyTuple_Check(__pyx_t_1)")), ((PyTupleObject*)((__pyx_t_1))))->ob_item[(__pyx_t_5)]); Py_INCREF(((PyObject*)((__pyx_t_3)))); __pyx_t_5++; if (__builtin_expect(!!((0 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 362; (void)__pyx_lineno; __pyx_clineno = 15540; (void)__pyx_clineno; } goto __pyx_L1_error; }




      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_1);
      if (__builtin_expect(!!(!__pyx_t_3), 0)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (__builtin_expect(!!(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)), 1)) PyErr_Clear();
          else { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 362; (void)__pyx_lineno; __pyx_clineno = 15552; (void)__pyx_clineno; } goto __pyx_L1_error; }
        }
        break;
      }
                             ;
    }
    do { PyObject *tmp = (PyObject *) __pyx_v_pw; __pyx_v_pw = __pyx_t_3; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    __pyx_t_3 = 0;
# 15568 "yxdfb/Kynaraa.cpp"
    {
      PyThreadState *__pyx_tstate;
      __pyx_tstate = _PyThreadState_UncheckedGet();
      __Pyx__ExceptionSave(__pyx_tstate, &__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
                              ;
                              ;
                              ;
               {
# 15584 "yxdfb/Kynaraa.cpp"
        (__pyx_t_3) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_random); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 364; (void)__pyx_lineno; __pyx_clineno = 15584; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_randint); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 364; (void)__pyx_lineno; __pyx_clineno = 15586; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        do { PyObject *tmp = (PyObject *) __pyx_v_rr; __pyx_v_rr = __pyx_t_2; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_2 = 0;
# 15599 "yxdfb/Kynaraa.cpp"
        (__pyx_t_10) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_UserAgent); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 365; (void)__pyx_lineno; __pyx_clineno = 15599; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_11 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyMethod_Type))), 0)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_10))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_10))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_10; __pyx_t_10 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __null};
          __pyx_t_3 = __Pyx_PyObject_FastCallDict(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 365; (void)__pyx_lineno; __pyx_clineno = 15619; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        }
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_ua_fb_val); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 365; (void)__pyx_lineno; __pyx_clineno = 15623; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyMethod_Type))), 1)) {
          __pyx_t_3 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_10))));
          if (__builtin_expect(!!(__pyx_t_3), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_10))));
            Py_INCREF(((PyObject*)((__pyx_t_3))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_10; __pyx_t_10 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __null};
          __pyx_t_2 = __Pyx_PyObject_FastCallDict(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 365; (void)__pyx_lineno; __pyx_clineno = 15644; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        }
        do { PyObject *tmp = (PyObject *) __pyx_v_ua; __pyx_v_ua = __pyx_t_2; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_2 = 0;
# 15658 "yxdfb/Kynaraa.cpp"
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_ss, __pyx_mstate_global->__pyx_n_s_get); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 367; (void)__pyx_lineno; __pyx_clineno = 15658; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_3 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyMethod_Type))), 1)) {
          __pyx_t_3 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_10))));
          if (__builtin_expect(!!(__pyx_t_3), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_10))));
            Py_INCREF(((PyObject*)((__pyx_t_3))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_10; __pyx_t_10 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_host};
          __pyx_t_2 = __Pyx_PyObject_FastCallDict(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, (size_t)(1+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 367; (void)__pyx_lineno; __pyx_clineno = 15678; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        }
        do { PyObject *tmp = (PyObject *) __pyx_v_kyan; __pyx_v_kyan = __pyx_t_2; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_2 = 0;
# 15692 "yxdfb/Kynaraa.cpp"
        (__pyx_t_10) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_BeautifulSoup); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 368; (void)__pyx_lineno; __pyx_clineno = 15692; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kyan, __pyx_mstate_global->__pyx_n_s_text); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 368; (void)__pyx_lineno; __pyx_clineno = 15694; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyMethod_Type))), 0)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_10))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_10))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_10; __pyx_t_10 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_t_3, __pyx_mstate_global->__pyx_kp_s_html_parser};
          __pyx_t_2 = __Pyx_PyObject_FastCallDict(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, (size_t)(2+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 368; (void)__pyx_lineno; __pyx_clineno = 15715; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        }
        do { PyObject *tmp = (PyObject *) __pyx_v_kyna; __pyx_v_kyna = __pyx_t_2; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_2 = 0;
# 15729 "yxdfb/Kynaraa.cpp"
        __pyx_t_2 = ((17 <= 8) ? PyDict_New() : _PyDict_NewPresized(17)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15729; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kyna, __pyx_mstate_global->__pyx_n_s_find); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15731; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15733; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_name, __pyx_mstate_global->__pyx_n_s_lsd) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15735; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_12 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyMethod_Type))), 1)) {
          __pyx_t_12 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_3))));
          if (__builtin_expect(!!(__pyx_t_12), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_3))));
            Py_INCREF(((PyObject*)((__pyx_t_12))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_3; __pyx_t_3 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_mstate_global->__pyx_n_s_input, __pyx_t_11};
          __pyx_t_10 = __Pyx_PyObject_FastCallDict(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, (size_t)(2+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15755; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        }
        __pyx_t_3 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_s_value) : PyObject_GetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_s_value)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15759; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_lsd, __pyx_t_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15762; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 15772 "yxdfb/Kynaraa.cpp"
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_kyna, __pyx_mstate_global->__pyx_n_s_find); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 371; (void)__pyx_lineno; __pyx_clineno = 15772; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_11 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 371; (void)__pyx_lineno; __pyx_clineno = 15774; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_name, __pyx_mstate_global->__pyx_n_s_jazoest) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 371; (void)__pyx_lineno; __pyx_clineno = 15776; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_12 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyMethod_Type))), 1)) {
          __pyx_t_12 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_10))));
          if (__builtin_expect(!!(__pyx_t_12), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_10))));
            Py_INCREF(((PyObject*)((__pyx_t_12))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_10; __pyx_t_10 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_mstate_global->__pyx_n_s_input, __pyx_t_11};
          __pyx_t_3 = __Pyx_PyObject_FastCallDict(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, (size_t)(2+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 371; (void)__pyx_lineno; __pyx_clineno = 15796; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        }
        __pyx_t_10 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_value) : PyObject_GetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_value)); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 371; (void)__pyx_lineno; __pyx_clineno = 15800; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_jazoest, __pyx_t_10) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15803; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
# 15813 "yxdfb/Kynaraa.cpp"
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_kyna, __pyx_mstate_global->__pyx_n_s_find); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 372; (void)__pyx_lineno; __pyx_clineno = 15813; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 372; (void)__pyx_lineno; __pyx_clineno = 15815; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_name, __pyx_mstate_global->__pyx_n_s_m_ts) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 372; (void)__pyx_lineno; __pyx_clineno = 15817; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_12 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyMethod_Type))), 1)) {
          __pyx_t_12 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_3))));
          if (__builtin_expect(!!(__pyx_t_12), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_3))));
            Py_INCREF(((PyObject*)((__pyx_t_12))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_3; __pyx_t_3 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_mstate_global->__pyx_n_s_input, __pyx_t_11};
          __pyx_t_10 = __Pyx_PyObject_FastCallDict(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, (size_t)(2+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 372; (void)__pyx_lineno; __pyx_clineno = 15837; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        }
        __pyx_t_3 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_s_value) : PyObject_GetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_s_value)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 372; (void)__pyx_lineno; __pyx_clineno = 15841; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_m_ts, __pyx_t_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15844; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 15854 "yxdfb/Kynaraa.cpp"
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_kyna, __pyx_mstate_global->__pyx_n_s_find); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 373; (void)__pyx_lineno; __pyx_clineno = 15854; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_11 = ((1 <= 8) ? PyDict_New() : _PyDict_NewPresized(1)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 373; (void)__pyx_lineno; __pyx_clineno = 15856; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        if (PyDict_SetItem(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_name, __pyx_mstate_global->__pyx_n_s_li) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 373; (void)__pyx_lineno; __pyx_clineno = 15858; (void)__pyx_clineno; } goto __pyx_L5_error; }
        __pyx_t_12 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyMethod_Type))), 1)) {
          __pyx_t_12 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_10))));
          if (__builtin_expect(!!(__pyx_t_12), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_10))));
            Py_INCREF(((PyObject*)((__pyx_t_12))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_10; __pyx_t_10 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_mstate_global->__pyx_n_s_input, __pyx_t_11};
          __pyx_t_3 = __Pyx_PyObject_FastCallDict(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, (size_t)(2+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 373; (void)__pyx_lineno; __pyx_clineno = 15878; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        }
        __pyx_t_10 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyDict_Type))), 1) ? __Pyx_PyDict_GetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_value) : PyObject_GetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_value)); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 373; (void)__pyx_lineno; __pyx_clineno = 15882; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_li, __pyx_t_10) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15885; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_try_number, __pyx_mstate_global->__pyx_kp_s_0) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15887; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_unrecognized_tries, __pyx_mstate_global->__pyx_kp_s_0) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15888; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 15897 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_prefill_contact_point, __pyx_v_user) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15897; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_prefill_source, __pyx_mstate_global->__pyx_n_s_provided_or_soft_matched) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15898; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_prefill_type, __pyx_mstate_global->__pyx_n_s_contact_point) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15899; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_first_prefill_source, __pyx_mstate_global->__pyx_n_s_provided_or_soft_matched) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15900; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_first_prefill_type, __pyx_mstate_global->__pyx_n_s_contact_point) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15901; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_had_cp_prefilled, __pyx_mstate_global->__pyx_n_s_true) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15902; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_had_password_prefilled, __pyx_mstate_global->__pyx_n_s_false) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15903; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_is_smart_lock, __pyx_mstate_global->__pyx_n_s_false) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15904; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_fb_noscript, __pyx_mstate_global->__pyx_n_s_true) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15905; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 15914 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_email, __pyx_v_user) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15914; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_pass, __pyx_v_pw) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 370; (void)__pyx_lineno; __pyx_clineno = 15915; (void)__pyx_clineno; } goto __pyx_L5_error; }
        do { PyObject *tmp = (PyObject *) __pyx_v_data; __pyx_v_data = ((PyObject*)__pyx_t_2); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_2 = 0;
# 15926 "yxdfb/Kynaraa.cpp"
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_ss, __pyx_mstate_global->__pyx_n_s_cookies); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 379; (void)__pyx_lineno; __pyx_clineno = 15926; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_s_get_dict); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 379; (void)__pyx_lineno; __pyx_clineno = 15928; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        __pyx_t_10 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyMethod_Type))), 1)) {
          __pyx_t_10 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_3))));
          if (__builtin_expect(!!(__pyx_t_10), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_3))));
            Py_INCREF(((PyObject*)((__pyx_t_10))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_3; __pyx_t_3 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __null};
          __pyx_t_2 = __Pyx_PyObject_FastCallDict(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 379; (void)__pyx_lineno; __pyx_clineno = 15949; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        }
        do { PyObject *tmp = (PyObject *) __pyx_v_apcb; __pyx_v_apcb = __pyx_t_2; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_2 = 0;
# 15963 "yxdfb/Kynaraa.cpp"
        __pyx_t_2 = ((23 <= 8) ? PyDict_New() : _PyDict_NewPresized(23)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15963; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_authority, __pyx_mstate_global->__pyx_kp_s_x_facebook_com) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15965; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_accept, __pyx_mstate_global->__pyx_kp_s_text_html_application_xhtml_xml) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15966; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_accept_language, __pyx_mstate_global->__pyx_kp_s_id_ID_id_q_0_9_en_US_q_0_8_en_q) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15967; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_cache_control, __pyx_mstate_global->__pyx_kp_s_max_age_0) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15968; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_content_type, __pyx_mstate_global->__pyx_kp_s_application_x_www_form_urlencode) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15969; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_dpr, __pyx_mstate_global->__pyx_kp_s_1_600000023841858) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15970; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_origin, __pyx_mstate_global->__pyx_kp_s_https_x_facebook_com) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15971; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_referer, __pyx_mstate_global->__pyx_kp_s_https_x_facebook_com_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15972; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_accept_encoding, __pyx_mstate_global->__pyx_kp_s_br_gzip) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15973; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_ch_prefers_color_scheme, __pyx_mstate_global->__pyx_n_s_dark) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 15974; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 15983 "yxdfb/Kynaraa.cpp"
        __pyx_t_3 = PyTuple_New(7); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 15983; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_13 = 0;
        __pyx_t_14 = 127;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Not_A_Brand_v))));
        __pyx_t_13 += 17;
                                               ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Not_A_Brand_v))));
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__48, __null); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 15991; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_10)))), __pyx_t_10) : PyObject_Str(__pyx_t_10)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 15993; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        __pyx_t_10 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 15996; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_10))));
                                 ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (1), ((PyObject*)((__pyx_t_10))));
        __pyx_t_10 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Chromium_v))));
        __pyx_t_13 += 17;
                                            ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Chromium_v))));
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__49, __null); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 16008; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_10)))), __pyx_t_10) : PyObject_Str(__pyx_t_10)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 16010; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        __pyx_t_10 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 16013; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_10))));
                                 ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (3), ((PyObject*)((__pyx_t_10))));
        __pyx_t_10 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Google_Chrome_v))));
        __pyx_t_13 += 22;
                                                 ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Google_Chrome_v))));
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__49, __null); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 16025; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_10)))), __pyx_t_10) : PyObject_Str(__pyx_t_10)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 16027; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        __pyx_t_10 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 16030; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_10))));
                                 ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (5), ((PyObject*)((__pyx_t_10))));
        __pyx_t_10 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__50))));
        __pyx_t_13 += 1;
                                     ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__50))));
        __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_3, 7, __pyx_t_13, __pyx_t_14); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 16042; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_ch_ua, __pyx_t_10) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16045; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
# 16055 "yxdfb/Kynaraa.cpp"
        __pyx_t_10 = PyTuple_New(15); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16055; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        __pyx_t_13 = 0;
        __pyx_t_14 = 127;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Not_A_Brand_v))));
        __pyx_t_13 += 17;
                                               ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Not_A_Brand_v))));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__48, __null); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16063; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : PyObject_Str(__pyx_t_3)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16065; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16068; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (1), ((PyObject*)((__pyx_t_3))));
        __pyx_t_3 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_0_0_0_Chromium_v))));
        __pyx_t_13 += 23;
                                                  ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_0_0_0_Chromium_v))));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__49, __null); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16080; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : PyObject_Str(__pyx_t_3)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16082; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16085; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (3), ((PyObject*)((__pyx_t_3))));
        __pyx_t_3 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_0_2))));
        __pyx_t_13 += 3;
                                     ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_0_2))));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__51, __null); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16097; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : PyObject_Str(__pyx_t_3)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16099; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16102; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (5), ((PyObject*)((__pyx_t_3))));
        __pyx_t_3 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__24))));
        __pyx_t_13 += 1;
                                     ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__24))));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__52, __null); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16114; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : PyObject_Str(__pyx_t_3)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16116; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16119; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (7), ((PyObject*)((__pyx_t_3))));
        __pyx_t_3 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Google_Chrome_v))));
        __pyx_t_13 += 22;
                                                 ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_Google_Chrome_v))));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__49, __null); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16131; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : PyObject_Str(__pyx_t_3)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16133; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16136; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (9), ((PyObject*)((__pyx_t_3))));
        __pyx_t_3 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_0_2))));
        __pyx_t_13 += 3;
                                     ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (10), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_0_2))));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__51, __null); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16148; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : PyObject_Str(__pyx_t_3)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16150; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16153; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (11), ((PyObject*)((__pyx_t_3))));
        __pyx_t_3 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__24))));
        __pyx_t_13 += 1;
                                     ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (12), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__24))));
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_rr, __pyx_mstate_global->__pyx_tuple__52, __null); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16165; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : PyObject_Str(__pyx_t_3)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16167; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16170; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
        __pyx_t_13 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (13), ((PyObject*)((__pyx_t_3))));
        __pyx_t_3 = 0;
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__50))));
        __pyx_t_13 += 1;
                                     ;
        PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (14), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__50))));
        __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_10, 15, __pyx_t_13, __pyx_t_14); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 16182; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_ch_ua_full_version_list, __pyx_t_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16185; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_ch_ua_mobile, __pyx_mstate_global->__pyx_kp_s_0_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16187; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_ch_ua_model, __pyx_mstate_global->__pyx_kp_s__53) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16188; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_ch_ua_platform, __pyx_mstate_global->__pyx_kp_s_Linux) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16189; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_ch_ua_platform_version, __pyx_mstate_global->__pyx_kp_s__53) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16190; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_fetch_dest, __pyx_mstate_global->__pyx_n_s_document) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16191; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_fetch_mode, __pyx_mstate_global->__pyx_n_s_navigate) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16192; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_fetch_site, __pyx_mstate_global->__pyx_kp_s_same_origin) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16193; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_sec_fetch_user, __pyx_mstate_global->__pyx_kp_s_1_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16194; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_upgrade_insecure_requests, __pyx_mstate_global->__pyx_kp_s_1) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16195; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 16204 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_user_agent, __pyx_v_ua) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16204; (void)__pyx_clineno; } goto __pyx_L5_error; }
        if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_kp_s_viewport_width, __pyx_mstate_global->__pyx_kp_s_980) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 381; (void)__pyx_lineno; __pyx_clineno = 16205; (void)__pyx_clineno; } goto __pyx_L5_error; }
        do { PyObject *tmp = (PyObject *) __pyx_v_head; __pyx_v_head = ((PyObject*)__pyx_t_2); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_2 = 0;
# 16216 "yxdfb/Kynaraa.cpp"
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ss, __pyx_mstate_global->__pyx_n_s_post); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 389; (void)__pyx_lineno; __pyx_clineno = 16216; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
# 16226 "yxdfb/Kynaraa.cpp"
        __pyx_t_3 = ((4 <= 8) ? PyDict_New() : _PyDict_NewPresized(4)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 391; (void)__pyx_lineno; __pyx_clineno = 16226; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_data, __pyx_v_data) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 391; (void)__pyx_lineno; __pyx_clineno = 16228; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 16237 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_headers, __pyx_v_head) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 391; (void)__pyx_lineno; __pyx_clineno = 16237; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 16246 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_cookies, __pyx_v_apcb) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 391; (void)__pyx_lineno; __pyx_clineno = 16246; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 16255 "yxdfb/Kynaraa.cpp"
        if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_allow_redirects, ((PyObject*)((&_Py_FalseStruct)))) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 391; (void)__pyx_lineno; __pyx_clineno = 16255; (void)__pyx_clineno; } goto __pyx_L5_error; }
# 16264 "yxdfb/Kynaraa.cpp"
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_mstate_global->__pyx_tuple__54, __pyx_t_3); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 389; (void)__pyx_lineno; __pyx_clineno = 16264; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        do { PyObject *tmp = (PyObject *) __pyx_v_szaz; __pyx_v_szaz = __pyx_t_10; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
        __pyx_t_10 = 0;
# 16278 "yxdfb/Kynaraa.cpp"
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_print_proses); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 397; (void)__pyx_lineno; __pyx_clineno = 16278; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_kyan, __pyx_mstate_global->__pyx_n_s_status_code); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 397; (void)__pyx_lineno; __pyx_clineno = 16280; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyMethod_Type))), 1)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_3))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_3))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_3; __pyx_t_3 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_t_2, __pyx_v_note};
          __pyx_t_10 = __Pyx_PyObject_FastCallDict(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, (size_t)(2+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
          if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 397; (void)__pyx_lineno; __pyx_clineno = 16301; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        }
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
# 16314 "yxdfb/Kynaraa.cpp"
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ss, __pyx_mstate_global->__pyx_n_s_cookies); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 398; (void)__pyx_lineno; __pyx_clineno = 16314; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_get_dict); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 398; (void)__pyx_lineno; __pyx_clineno = 16316; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
        __pyx_t_2 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 1)) {
          __pyx_t_2 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
          if (__builtin_expect(!!(__pyx_t_2), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((__pyx_t_2))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __null};
          __pyx_t_3 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
          if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 398; (void)__pyx_lineno; __pyx_clineno = 16337; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_keys); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 398; (void)__pyx_lineno; __pyx_clineno = 16341; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 1)) {
          __pyx_t_3 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
          if (__builtin_expect(!!(__pyx_t_3), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((__pyx_t_3))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __null};
          __pyx_t_10 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 398; (void)__pyx_lineno; __pyx_clineno = 16362; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        }
        __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_s_c_user, __pyx_t_10, 2)); if (__builtin_expect(!!((__pyx_t_15 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 398; (void)__pyx_lineno; __pyx_clineno = 16366; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        if (__pyx_t_15) {
# 16377 "yxdfb/Kynaraa.cpp"
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 399; (void)__pyx_lineno; __pyx_clineno = 16377; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_t_10, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 399; (void)__pyx_lineno; __pyx_clineno = 16379; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_ok, __pyx_t_11) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 399; (void)__pyx_lineno; __pyx_clineno = 16382; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
# 16392 "yxdfb/Kynaraa.cpp"
          {
            __pyx_t_11 = PyList_New(0); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16393; (void)__pyx_clineno; } goto __pyx_L16_error; }
                                    ;
            __pyx_t_13 = 0;
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_ss, __pyx_mstate_global->__pyx_n_s_cookies); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16396; (void)__pyx_clineno; } goto __pyx_L16_error; }
                                   ;
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_get_dict); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16398; (void)__pyx_clineno; } goto __pyx_L16_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
            __pyx_t_2 = __null;
            __pyx_t_4 = 0;

            if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyMethod_Type))), 1)) {
              __pyx_t_2 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_12))));
              if (__builtin_expect(!!(__pyx_t_2), 1)) {
                PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_12))));
                Py_INCREF(((PyObject*)((__pyx_t_2))));
                Py_INCREF(((PyObject*)((function))));
                do { PyObject *tmp = (PyObject *) __pyx_t_12; __pyx_t_12 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
                __pyx_t_4 = 1;
              }
            }

            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, __null};
              __pyx_t_3 = __Pyx_PyObject_FastCallDict(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
              Py_XDECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
              if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16419; (void)__pyx_clineno; } goto __pyx_L16_error; }
                                     ;
              Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
            }
            if (__builtin_expect(!!(__pyx_t_3 == (&_Py_NoneStruct)), 0)) {
              PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
              { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16425; (void)__pyx_clineno; } goto __pyx_L16_error; }
            }
            __pyx_t_12 = __Pyx_dict_iterator(__pyx_t_3, 0, __pyx_mstate_global->__pyx_n_s_items, (&__pyx_t_16), (&__pyx_t_17)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16427; (void)__pyx_clineno; } goto __pyx_L16_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
            Py_XDECREF(((PyObject*)((__pyx_t_10))));
            __pyx_t_10 = __pyx_t_12;
            __pyx_t_12 = 0;
            while (1) {
              __pyx_t_18 = __Pyx_dict_iter_next(__pyx_t_10, __pyx_t_16, &__pyx_t_13, &__pyx_t_12, &__pyx_t_3, __null, __pyx_t_17);
              if (__builtin_expect(!!(__pyx_t_18 == 0), 0)) break;
              if (__builtin_expect(!!(__pyx_t_18 == -1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16436; (void)__pyx_clineno; } goto __pyx_L16_error; }
                                      ;
                                     ;
              do { PyObject *tmp = (PyObject *) __pyx_8genexpr3__pyx_v_key; __pyx_8genexpr3__pyx_v_key = __pyx_t_12; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_12 = 0;
              do { PyObject *tmp = (PyObject *) __pyx_8genexpr3__pyx_v_value; __pyx_8genexpr3__pyx_v_value = __pyx_t_3; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_3 = 0;
              __pyx_t_3 = PyTuple_New(2); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16443; (void)__pyx_clineno; } goto __pyx_L16_error; }
                                     ;
              Py_INCREF(((PyObject*)((__pyx_8genexpr3__pyx_v_key))));
                                                       ;
              if ((PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (0), ((PyObject*)((__pyx_8genexpr3__pyx_v_key)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16447; (void)__pyx_clineno; } goto __pyx_L16_error; };
              Py_INCREF(((PyObject*)((__pyx_8genexpr3__pyx_v_value))));
                                                         ;
              if ((PyTuple_SET_ITEM(((PyObject*)((__pyx_t_3))), (1), ((PyObject*)((__pyx_8genexpr3__pyx_v_value)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16450; (void)__pyx_clineno; } goto __pyx_L16_error; };
              __pyx_t_12 = PyUnicode_Format(__pyx_mstate_global->__pyx_kp_s_s_s, __pyx_t_3); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16451; (void)__pyx_clineno; } goto __pyx_L16_error; }
                                      ;
              Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
              if (__builtin_expect(!!(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_t_12)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16454; (void)__pyx_clineno; } goto __pyx_L16_error; }
              Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
            }
            Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
            Py_XDECREF(((PyObject*)((__pyx_8genexpr3__pyx_v_key)))); __pyx_8genexpr3__pyx_v_key = 0;
            Py_XDECREF(((PyObject*)((__pyx_8genexpr3__pyx_v_value)))); __pyx_8genexpr3__pyx_v_value = 0;
            goto __pyx_L19_exit_scope;
            __pyx_L16_error:;
            Py_XDECREF(((PyObject*)((__pyx_8genexpr3__pyx_v_key)))); __pyx_8genexpr3__pyx_v_key = 0;
            Py_XDECREF(((PyObject*)((__pyx_8genexpr3__pyx_v_value)))); __pyx_8genexpr3__pyx_v_value = 0;
            goto __pyx_L5_error;
            __pyx_L19_exit_scope:;
          }
          __pyx_t_10 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_s__43, __pyx_t_11); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 400; (void)__pyx_lineno; __pyx_clineno = 16467; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          do { PyObject *tmp = (PyObject *) __pyx_v_coki; __pyx_v_coki = ((PyObject*)__pyx_t_10); Py_XDECREF(((PyObject*)((tmp)))); } while (0);
          __pyx_t_10 = 0;
# 16480 "yxdfb/Kynaraa.cpp"
          __pyx_t_10 = PyTuple_New(13); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16480; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = 0;
          __pyx_t_14 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          __pyx_t_16 += 2;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16488; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_12 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16490; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_12))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (1), ((PyObject*)((__pyx_t_12))));
          __pyx_t_12 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_OK_2))));
          __pyx_t_16 += 2;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_OK_2))));
          (__pyx_t_12) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16502; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_12)))), __pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_12) : PyObject_Format(__pyx_t_12, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16504; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (3), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          __pyx_t_16 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_H); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16516; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_12 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16518; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_12))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (5), ((PyObject*)((__pyx_t_12))));
          __pyx_t_12 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_16 += 1;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_12 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16530; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_12))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (7), ((PyObject*)((__pyx_t_12))));
          __pyx_t_12 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_16 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_12 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16541; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_12))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (9), ((PyObject*)((__pyx_t_12))));
          __pyx_t_12 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_16 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (10), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_12 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_coki)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_coki)))), __pyx_v_coki) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_coki)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_coki) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_coki)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_coki) : PyObject_Format(__pyx_v_coki, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16552; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_12)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_12))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (11), ((PyObject*)((__pyx_t_12))));
          __pyx_t_12 = 0;
          (__pyx_t_12) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16559; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_12)))), __pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_12) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_12) : PyObject_Format(__pyx_t_12, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16561; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_10))), (12), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_10, 13, __pyx_t_16, __pyx_t_14); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16569; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_11); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 401; (void)__pyx_lineno; __pyx_clineno = 16572; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
# 16584 "yxdfb/Kynaraa.cpp"
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_save_hasil); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16584; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_12 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16586; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = 0;
          __pyx_t_14 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_OK_OK))));
          __pyx_t_16 += 18;
                                                     ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_OK_OK))));
          (__pyx_t_19) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_Tod); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16594; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_20 = __null;
          __pyx_t_4 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_19)))), (&PyMethod_Type))), 0)) {
            __pyx_t_20 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_19))));
            if (__builtin_expect(!!(__pyx_t_20), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_19))));
              Py_INCREF(((PyObject*)((__pyx_t_20))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_19; __pyx_t_19 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_4 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_20, __null};
            __pyx_t_2 = __Pyx_PyObject_FastCallDict(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_20)))); __pyx_t_20 = 0;
            if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16614; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
          }
          __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_tggl); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16618; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
          __pyx_t_2 = __null;
          __pyx_t_4 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_19)))), (&PyMethod_Type))), 1)) {
            __pyx_t_2 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_19))));
            if (__builtin_expect(!!(__pyx_t_2), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_19))));
              Py_INCREF(((PyObject*)((__pyx_t_2))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_19; __pyx_t_19 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_4 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, __null};
            __pyx_t_3 = __Pyx_PyObject_FastCallDict(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
            if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16639; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
          }
          __pyx_t_19 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_3) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_3) : PyObject_Format(__pyx_t_3, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16643; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_19)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_19)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_19))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (1), ((PyObject*)((__pyx_t_19))));
          __pyx_t_19 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_16 += 4;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_19 = __Pyx_PyUnicode_Join(__pyx_t_12, 3, __pyx_t_16, __pyx_t_14); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16655; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = PyTuple_New(5); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16658; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = 0;
          __pyx_t_14 = 127;
          __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16662; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (0), ((PyObject*)((__pyx_t_3))));
          __pyx_t_3 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_16 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16673; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (2), ((PyObject*)((__pyx_t_3))));
          __pyx_t_3 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_16 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (3), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_coki)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_coki)))), __pyx_v_coki) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_coki)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_coki) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_coki)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_coki) : PyObject_Format(__pyx_v_coki, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16684; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_12))), (4), ((PyObject*)((__pyx_t_3))));
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_12, 5, __pyx_t_16, __pyx_t_14); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16691; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = __null;
          __pyx_t_4 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyMethod_Type))), 1)) {
            __pyx_t_12 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_11))));
            if (__builtin_expect(!!(__pyx_t_12), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((__pyx_t_12))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_11; __pyx_t_11 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_4 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_t_19, __pyx_t_3};
            __pyx_t_10 = __Pyx_PyObject_FastCallDict(__pyx_t_11, __pyx_callargs+1-__pyx_t_4, (size_t)(2+__pyx_t_4), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
            if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 402; (void)__pyx_lineno; __pyx_clineno = 16714; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
# 16727 "yxdfb/Kynaraa.cpp"
          goto __pyx_L10_try_break;
# 16736 "yxdfb/Kynaraa.cpp"
        }
# 16745 "yxdfb/Kynaraa.cpp"
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_ss, __pyx_mstate_global->__pyx_n_s_cookies); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 404; (void)__pyx_lineno; __pyx_clineno = 16745; (void)__pyx_clineno; } goto __pyx_L5_error; }
                               ;
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_get_dict); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 404; (void)__pyx_lineno; __pyx_clineno = 16747; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        __pyx_t_3 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_19)))), (&PyMethod_Type))), 1)) {
          __pyx_t_3 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_19))));
          if (__builtin_expect(!!(__pyx_t_3), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_19))));
            Py_INCREF(((PyObject*)((__pyx_t_3))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_19; __pyx_t_19 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __null};
          __pyx_t_11 = __Pyx_PyObject_FastCallDict(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 404; (void)__pyx_lineno; __pyx_clineno = 16768; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
        }
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_keys); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 404; (void)__pyx_lineno; __pyx_clineno = 16772; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_11 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_19)))), (&PyMethod_Type))), 1)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_19))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_19))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_19; __pyx_t_19 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __null};
          __pyx_t_10 = __Pyx_PyObject_FastCallDict(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 404; (void)__pyx_lineno; __pyx_clineno = 16793; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
        }
        __pyx_t_15 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_s_checkpoint, __pyx_t_10, 2)); if (__builtin_expect(!!((__pyx_t_15 < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 404; (void)__pyx_lineno; __pyx_clineno = 16797; (void)__pyx_clineno; } goto __pyx_L5_error; }
        Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        if (__pyx_t_15) {
# 16808 "yxdfb/Kynaraa.cpp"
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 405; (void)__pyx_lineno; __pyx_clineno = 16808; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_19 = __Pyx_PyInt_AddObjC(__pyx_t_10, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 405; (void)__pyx_lineno; __pyx_clineno = 16810; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_cp, __pyx_t_19) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 405; (void)__pyx_lineno; __pyx_clineno = 16813; (void)__pyx_clineno; } goto __pyx_L5_error; }
          Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
# 16823 "yxdfb/Kynaraa.cpp"
          __pyx_t_19 = PyTuple_New(12); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16823; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = 0;
          __pyx_t_14 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          __pyx_t_16 += 2;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__3))));
          (__pyx_t_10) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16831; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_10)))), __pyx_t_10) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_10) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_10) : PyObject_Format(__pyx_t_10, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16833; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (1), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_u_CP_2))));
          __pyx_t_16 += 2;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_n_u_CP_2))));
          (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16845; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_10 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16847; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_10))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (3), ((PyObject*)((__pyx_t_10))));
          __pyx_t_10 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          __pyx_t_16 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (4), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__44))));
          (__pyx_t_10) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_K); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16859; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_10)))), __pyx_t_10) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_10) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_10) : PyObject_Format(__pyx_t_10, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16861; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (5), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_16 += 1;
                                      ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (6), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__7))));
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16873; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (7), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_16 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (8), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_11 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16884; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_11)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_11))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (9), ((PyObject*)((__pyx_t_11))));
          __pyx_t_11 = 0;
          (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_N); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16891; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_10 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_11)))), __pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_11) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_11)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_11) : PyObject_Format(__pyx_t_11, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16893; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_10)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_10))));
                                   ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (10), ((PyObject*)((__pyx_t_10))));
          __pyx_t_10 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__45))));
          __pyx_t_16 += 12;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_19))), (11), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__45))));
          __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_19, 12, __pyx_t_16, __pyx_t_14); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16905; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
          __pyx_t_19 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_10); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 406; (void)__pyx_lineno; __pyx_clineno = 16908; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
# 16920 "yxdfb/Kynaraa.cpp"
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_save_hasil); if (__builtin_expect(!!(!__pyx_t_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16920; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_11 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16922; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = 0;
          __pyx_t_14 = 127;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_CP_CP))));
          __pyx_t_16 += 18;
                                                     ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_data_result_CP_CP))));
          (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_Tod); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16930; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_20 = __null;
          __pyx_t_4 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyMethod_Type))), 0)) {
            __pyx_t_20 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_2))));
            if (__builtin_expect(!!(__pyx_t_20), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_2))));
              Py_INCREF(((PyObject*)((__pyx_t_20))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_2; __pyx_t_2 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_4 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_20, __null};
            __pyx_t_12 = __Pyx_PyObject_FastCallDict(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_20)))); __pyx_t_20 = 0;
            if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16950; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
          }
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_s_tggl); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16954; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
          __pyx_t_12 = __null;
          __pyx_t_4 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyMethod_Type))), 1)) {
            __pyx_t_12 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_2))));
            if (__builtin_expect(!!(__pyx_t_12), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_2))));
              Py_INCREF(((PyObject*)((__pyx_t_12))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_2; __pyx_t_2 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_4 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[2] = {__pyx_t_12, __null};
            __pyx_t_3 = __Pyx_PyObject_FastCallDict(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, (size_t)(0+__pyx_t_4), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
            if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16975; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                   ;
            Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
          }
          __pyx_t_2 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_t_3)))), __pyx_t_3) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_t_3) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_3)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_t_3) : PyObject_Format(__pyx_t_3, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16979; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_2)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_2))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (1), ((PyObject*)((__pyx_t_2))));
          __pyx_t_2 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_16 += 4;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (2), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u_txt))));
          __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_11, 3, __pyx_t_16, __pyx_t_14); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16991; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = PyTuple_New(3); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16994; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                  ;
          __pyx_t_16 = 0;
          __pyx_t_14 = 127;
          __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_user)))), __pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_user) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_user)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_user) : PyObject_Format(__pyx_v_user, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 16998; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (0), ((PyObject*)((__pyx_t_3))));
          __pyx_t_3 = 0;
          Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_16 += 1;
                                       ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (1), ((PyObject*)((__pyx_mstate_global->__pyx_kp_u__20))));
          __pyx_t_3 = ( __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyUnicode_Type))), 1) ? (Py_INCREF(((PyObject*)((__pyx_v_pw)))), __pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyLong_Type))), 1) ? PyLong_Type.tp_repr(__pyx_v_pw) : __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_v_pw)))), (&PyFloat_Type))), 1) ? PyFloat_Type.tp_repr(__pyx_v_pw) : PyObject_Format(__pyx_v_pw, __pyx_mstate_global->__pyx_empty_unicode)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 17009; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          __pyx_t_14 = (PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) > __pyx_t_14) ? PyUnicode_MAX_CHAR_VALUE(((PyObject*)((__pyx_t_3)))) : __pyx_t_14;
          __pyx_t_16 += PyUnicode_GET_LENGTH(((PyObject*)((__pyx_t_3))));
                                  ;
          PyTuple_SET_ITEM(((PyObject*)((__pyx_t_11))), (2), ((PyObject*)((__pyx_t_3))));
          __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_11, 3, __pyx_t_16, __pyx_t_14); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 17016; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          __pyx_t_11 = __null;
          __pyx_t_4 = 0;

          if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_10)))), (&PyMethod_Type))), 1)) {
            __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_10))));
            if (__builtin_expect(!!(__pyx_t_11), 1)) {
              PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_10))));
              Py_INCREF(((PyObject*)((__pyx_t_11))));
              Py_INCREF(((PyObject*)((function))));
              do { PyObject *tmp = (PyObject *) __pyx_t_10; __pyx_t_10 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
              __pyx_t_4 = 1;
            }
          }

          {
            PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_t_2, __pyx_t_3};
            __pyx_t_19 = __Pyx_PyObject_FastCallDict(__pyx_t_10, __pyx_callargs+1-__pyx_t_4, (size_t)(2+__pyx_t_4), __null);
            Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
            Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
            if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 407; (void)__pyx_lineno; __pyx_clineno = 17039; (void)__pyx_clineno; } goto __pyx_L5_error; }
                                    ;
            Py_DECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
          }
          Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
# 17052 "yxdfb/Kynaraa.cpp"
          goto __pyx_L10_try_break;
# 17061 "yxdfb/Kynaraa.cpp"
        }
# 17070 "yxdfb/Kynaraa.cpp"
      }
      Py_XDECREF(((PyObject*)((__pyx_t_7)))); __pyx_t_7 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_8)))); __pyx_t_8 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_9)))); __pyx_t_9 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      Py_XDECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_20)))); __pyx_t_20 = 0;
      Py_XDECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 17091 "yxdfb/Kynaraa.cpp"
      __Pyx_ErrFetchInState(__pyx_tstate, &__pyx_t_19, &__pyx_t_10, &__pyx_t_3);
      (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_requests); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 409; (void)__pyx_lineno; __pyx_clineno = 17092; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                             ;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_exceptions); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 409; (void)__pyx_lineno; __pyx_clineno = 17094; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                              ;
      Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_ConnectionError); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 409; (void)__pyx_lineno; __pyx_clineno = 17097; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                             ;
      Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
      __pyx_t_17 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_19, __pyx_t_2);
      Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
      __Pyx_ErrRestoreInState(__pyx_tstate, __pyx_t_19, __pyx_t_10, __pyx_t_3);
      __pyx_t_19 = 0; __pyx_t_10 = 0; __pyx_t_3 = 0;
      if (__pyx_t_17) {
        __Pyx_AddTraceback("Kynaraa.Kynaa.reguller", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx__GetException(__pyx_tstate, &__pyx_t_3, &__pyx_t_10, &__pyx_t_19) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 409; (void)__pyx_lineno; __pyx_clineno = 17106; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                ;
                                 ;
                                 ;
# 17118 "yxdfb/Kynaraa.cpp"
        (__pyx_t_11) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_time); if (__builtin_expect(!!(!__pyx_t_11), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 410; (void)__pyx_lineno; __pyx_clineno = 17118; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                ;
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_s_sleep); if (__builtin_expect(!!(!__pyx_t_12), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 410; (void)__pyx_lineno; __pyx_clineno = 17120; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                ;
        Py_DECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
        __pyx_t_11 = __null;
        __pyx_t_4 = 0;

        if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_12)))), (&PyMethod_Type))), 0)) {
          __pyx_t_11 = PyMethod_GET_SELF(((PyObject*)((__pyx_t_12))));
          if (__builtin_expect(!!(__pyx_t_11), 1)) {
            PyObject* function = PyMethod_GET_FUNCTION(((PyObject*)((__pyx_t_12))));
            Py_INCREF(((PyObject*)((__pyx_t_11))));
            Py_INCREF(((PyObject*)((function))));
            do { PyObject *tmp = (PyObject *) __pyx_t_12; __pyx_t_12 = function; Py_DECREF(((PyObject*)((tmp)))); } while (0);
            __pyx_t_4 = 1;
          }
        }

        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_int_15};
          __pyx_t_2 = __Pyx_PyObject_FastCallDict(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, (size_t)(1+__pyx_t_4), __null);
          Py_XDECREF(((PyObject*)((__pyx_t_11)))); __pyx_t_11 = 0;
          if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 410; (void)__pyx_lineno; __pyx_clineno = 17141; (void)__pyx_clineno; } goto __pyx_L7_except_error; }
                                 ;
          Py_DECREF(((PyObject*)((__pyx_t_12)))); __pyx_t_12 = 0;
        }
        Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_10)))); __pyx_t_10 = 0;
        Py_XDECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;
# 17160 "yxdfb/Kynaraa.cpp"
      __pyx_L7_except_error:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L10_try_break:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L4_break;
      __pyx_L6_exception_handled:;
                               ;
                               ;
                               ;
      __Pyx__ExceptionReset(__pyx_tstate, __pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_L12_try_end:;
    }
# 17187 "yxdfb/Kynaraa.cpp"
  }
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  goto __pyx_L22_for_end;
  __pyx_L4_break:;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  goto __pyx_L22_for_end;
  __pyx_L22_for_end:;






  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop); if (__builtin_expect(!!(!__pyx_t_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 412; (void)__pyx_lineno; __pyx_clineno = 17200; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_19 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_1, 1, 1, 0); if (__builtin_expect(!!(!__pyx_t_19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 412; (void)__pyx_lineno; __pyx_clineno = 17202; (void)__pyx_clineno; } goto __pyx_L1_error; }
                          ;
  Py_DECREF(((PyObject*)((__pyx_t_1)))); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_s_lop, __pyx_t_19) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 412; (void)__pyx_lineno; __pyx_clineno = 17205; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_19)))); __pyx_t_19 = 0;
# 17217 "yxdfb/Kynaraa.cpp"
  __pyx_r = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_1))));
  Py_XDECREF(((PyObject*)((__pyx_t_2))));
  Py_XDECREF(((PyObject*)((__pyx_t_3))));
  Py_XDECREF(((PyObject*)((__pyx_t_10))));
  Py_XDECREF(((PyObject*)((__pyx_t_11))));
  Py_XDECREF(((PyObject*)((__pyx_t_12))));
  Py_XDECREF(((PyObject*)((__pyx_t_19))));
  Py_XDECREF(((PyObject*)((__pyx_t_20))));
  __Pyx_AddTraceback("Kynaraa.Kynaa.reguller", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = __null;
  __pyx_L0:;
  Py_XDECREF(((PyObject*)((__pyx_v_ss))));
  Py_XDECREF(((PyObject*)((__pyx_v_pw))));
  Py_XDECREF(((PyObject*)((__pyx_v_rr))));
  Py_XDECREF(((PyObject*)((__pyx_v_ua))));
  Py_XDECREF(((PyObject*)((__pyx_v_kyan))));
  Py_XDECREF(((PyObject*)((__pyx_v_kyna))));
  Py_XDECREF(((PyObject*)((__pyx_v_data))));
  Py_XDECREF(((PyObject*)((__pyx_v_apcb))));
  Py_XDECREF(((PyObject*)((__pyx_v_head))));
  Py_XDECREF(((PyObject*)((__pyx_v_szaz))));
  Py_XDECREF(((PyObject*)((__pyx_v_coki))));
  Py_XDECREF(((PyObject*)((__pyx_8genexpr3__pyx_v_key))));
  Py_XDECREF(((PyObject*)((__pyx_8genexpr3__pyx_v_value))));
                         ;
                               ;
  return __pyx_r;
}


static struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *__pyx_freelist_7Kynaraa___pyx_scope_struct__print_proses_api[8];
static int __pyx_freecount_7Kynaraa___pyx_scope_struct__print_proses_api = 0;


static PyObject *__pyx_tp_new_7Kynaraa___pyx_scope_struct__print_proses_api(PyTypeObject *t, [[maybe_unused]] PyObject *a, [[maybe_unused]] PyObject *k) {
  PyObject *o;





  if (__builtin_expect(!!((int)(__pyx_freecount_7Kynaraa___pyx_scope_struct__print_proses_api > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api))), 1)) {
    o = (PyObject*)__pyx_freelist_7Kynaraa___pyx_scope_struct__print_proses_api[--__pyx_freecount_7Kynaraa___pyx_scope_struct__print_proses_api];
    memset(o, 0, sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api));
    (void) PyObject_Init(((PyObject*)((o))), (t));
    PyObject_GC_Track(o);
  } else

  {
    o = (*t->tp_alloc)(t, 0);
    if (__builtin_expect(!!(!o), 0)) return 0;
  }

  return o;
}

static void __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct__print_proses_api(PyObject *o) {
  struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *)o;

  if (__builtin_expect(!!((((3 << 24) | (12 << 16) | (9 << 8) | (0xF << 4) | (0 << 0)) >= 0x03080000 || (((((PyTypeObject *)Py_TYPE(((PyObject*)((o)))))->tp_flags) & ((1UL << 0))) != 0)) && ((Py_TYPE(((PyObject*)((o)))))->tp_finalize)), 0) && !PyObject_GC_IsFinalized(o)) {
    if (((Py_TYPE(((PyObject*)((o)))))->tp_dealloc) == __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct__print_proses_api) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }

  PyObject_GC_UnTrack(o);
  do { __typeof__(p->__pyx_v_response_text)* _tmp_op_ptr = &(p->__pyx_v_response_text); __typeof__(p->__pyx_v_response_text) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);

  if (((int)(__pyx_freecount_7Kynaraa___pyx_scope_struct__print_proses_api < 8) & (int)(Py_TYPE(((PyObject*)((o))))->tp_basicsize == sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api)))) {
    __pyx_freelist_7Kynaraa___pyx_scope_struct__print_proses_api[__pyx_freecount_7Kynaraa___pyx_scope_struct__print_proses_api++] = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *)o);
  } else

  {

    (*Py_TYPE(((PyObject*)((o))))->tp_free)(o);






  }
}

static int __pyx_tp_traverse_7Kynaraa___pyx_scope_struct__print_proses_api(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *)o;
  if (p->__pyx_v_response_text) {
    e = (*v)(p->__pyx_v_response_text, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7Kynaraa___pyx_scope_struct__print_proses_api(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api *)o;
  tmp = ((PyObject*)p->__pyx_v_response_text);
  p->__pyx_v_response_text = (&_Py_NoneStruct); Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
  Py_XDECREF(((PyObject*)((tmp))));
  return 0;
}
# 17338 "yxdfb/Kynaraa.cpp"
static PyTypeObject __pyx_type_7Kynaraa___pyx_scope_struct__print_proses_api = {
  { { { 1 }, (0) }, (0) },
  "Kynaraa.""__pyx_scope_struct__print_proses_api",
  sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct__print_proses_api),
  0,
  __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct__print_proses_api,




  0,

  0,
  0,




  0,

  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  ( 0 | 0)|(1UL << 18)|0|0|(1UL << 14)|(1UL << 0),
  0,
  __pyx_tp_traverse_7Kynaraa___pyx_scope_struct__print_proses_api,
  __pyx_tp_clear_7Kynaraa___pyx_scope_struct__print_proses_api,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,

  0,

  0,
  0,
  __pyx_tp_new_7Kynaraa___pyx_scope_struct__print_proses_api,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,


  0,





  0,





  0,







};



static struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *__pyx_freelist_7Kynaraa___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_7Kynaraa___pyx_scope_struct_1_genexpr = 0;


static PyObject *__pyx_tp_new_7Kynaraa___pyx_scope_struct_1_genexpr(PyTypeObject *t, [[maybe_unused]] PyObject *a, [[maybe_unused]] PyObject *k) {
  PyObject *o;





  if (__builtin_expect(!!((int)(__pyx_freecount_7Kynaraa___pyx_scope_struct_1_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr))), 1)) {
    o = (PyObject*)__pyx_freelist_7Kynaraa___pyx_scope_struct_1_genexpr[--__pyx_freecount_7Kynaraa___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr));
    (void) PyObject_Init(((PyObject*)((o))), (t));
    PyObject_GC_Track(o);
  } else

  {
    o = (*t->tp_alloc)(t, 0);
    if (__builtin_expect(!!(!o), 0)) return 0;
  }

  return o;
}

static void __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *)o;

  if (__builtin_expect(!!((((3 << 24) | (12 << 16) | (9 << 8) | (0xF << 4) | (0 << 0)) >= 0x03080000 || (((((PyTypeObject *)Py_TYPE(((PyObject*)((o)))))->tp_flags) & ((1UL << 0))) != 0)) && ((Py_TYPE(((PyObject*)((o)))))->tp_finalize)), 0) && !PyObject_GC_IsFinalized(o)) {
    if (((Py_TYPE(((PyObject*)((o)))))->tp_dealloc) == __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_1_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }

  PyObject_GC_UnTrack(o);
  do { __typeof__(p->__pyx_outer_scope)* _tmp_op_ptr = &(p->__pyx_outer_scope); __typeof__(p->__pyx_outer_scope) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
  do { __typeof__(p->__pyx_genexpr_arg_0)* _tmp_op_ptr = &(p->__pyx_genexpr_arg_0); __typeof__(p->__pyx_genexpr_arg_0) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
  do { __typeof__(p->__pyx_v_pattern)* _tmp_op_ptr = &(p->__pyx_v_pattern); __typeof__(p->__pyx_v_pattern) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);

  if (((int)(__pyx_freecount_7Kynaraa___pyx_scope_struct_1_genexpr < 8) & (int)(Py_TYPE(((PyObject*)((o))))->tp_basicsize == sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_7Kynaraa___pyx_scope_struct_1_genexpr[__pyx_freecount_7Kynaraa___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *)o);
  } else

  {

    (*Py_TYPE(((PyObject*)((o))))->tp_free)(o);






  }
}

static int __pyx_tp_traverse_7Kynaraa___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_pattern) {
    e = (*v)(p->__pyx_v_pattern, a); if (e) return e;
  }
  return 0;
}
# 17510 "yxdfb/Kynaraa.cpp"
static PyTypeObject __pyx_type_7Kynaraa___pyx_scope_struct_1_genexpr = {
  { { { 1 }, (0) }, (0) },
  "Kynaraa.""__pyx_scope_struct_1_genexpr",
  sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_1_genexpr),
  0,
  __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_1_genexpr,




  0,

  0,
  0,




  0,

  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  ( 0 | 0)|(1UL << 18)|0|0|(1UL << 14)|(1UL << 0),
  0,
  __pyx_tp_traverse_7Kynaraa___pyx_scope_struct_1_genexpr,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,

  0,

  0,
  0,
  __pyx_tp_new_7Kynaraa___pyx_scope_struct_1_genexpr,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,


  0,





  0,





  0,







};



static struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *__pyx_freelist_7Kynaraa___pyx_scope_struct_2_genexpr[8];
static int __pyx_freecount_7Kynaraa___pyx_scope_struct_2_genexpr = 0;


static PyObject *__pyx_tp_new_7Kynaraa___pyx_scope_struct_2_genexpr(PyTypeObject *t, [[maybe_unused]] PyObject *a, [[maybe_unused]] PyObject *k) {
  PyObject *o;





  if (__builtin_expect(!!((int)(__pyx_freecount_7Kynaraa___pyx_scope_struct_2_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr))), 1)) {
    o = (PyObject*)__pyx_freelist_7Kynaraa___pyx_scope_struct_2_genexpr[--__pyx_freecount_7Kynaraa___pyx_scope_struct_2_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr));
    (void) PyObject_Init(((PyObject*)((o))), (t));
    PyObject_GC_Track(o);
  } else

  {
    o = (*t->tp_alloc)(t, 0);
    if (__builtin_expect(!!(!o), 0)) return 0;
  }

  return o;
}

static void __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_2_genexpr(PyObject *o) {
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *)o;

  if (__builtin_expect(!!((((3 << 24) | (12 << 16) | (9 << 8) | (0xF << 4) | (0 << 0)) >= 0x03080000 || (((((PyTypeObject *)Py_TYPE(((PyObject*)((o)))))->tp_flags) & ((1UL << 0))) != 0)) && ((Py_TYPE(((PyObject*)((o)))))->tp_finalize)), 0) && !PyObject_GC_IsFinalized(o)) {
    if (((Py_TYPE(((PyObject*)((o)))))->tp_dealloc) == __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_2_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }

  PyObject_GC_UnTrack(o);
  do { __typeof__(p->__pyx_genexpr_arg_0)* _tmp_op_ptr = &(p->__pyx_genexpr_arg_0); __typeof__(p->__pyx_genexpr_arg_0) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
  do { __typeof__(p->__pyx_v_key)* _tmp_op_ptr = &(p->__pyx_v_key); __typeof__(p->__pyx_v_key) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
  do { __typeof__(p->__pyx_v_value)* _tmp_op_ptr = &(p->__pyx_v_value); __typeof__(p->__pyx_v_value) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
  do { __typeof__(p->__pyx_t_0)* _tmp_op_ptr = &(p->__pyx_t_0); __typeof__(p->__pyx_t_0) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);

  if (((int)(__pyx_freecount_7Kynaraa___pyx_scope_struct_2_genexpr < 8) & (int)(Py_TYPE(((PyObject*)((o))))->tp_basicsize == sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr)))) {
    __pyx_freelist_7Kynaraa___pyx_scope_struct_2_genexpr[__pyx_freecount_7Kynaraa___pyx_scope_struct_2_genexpr++] = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *)o);
  } else

  {

    (*Py_TYPE(((PyObject*)((o))))->tp_free)(o);






  }
}

static int __pyx_tp_traverse_7Kynaraa___pyx_scope_struct_2_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_key) {
    e = (*v)(p->__pyx_v_key, a); if (e) return e;
  }
  if (p->__pyx_v_value) {
    e = (*v)(p->__pyx_v_value, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
# 17686 "yxdfb/Kynaraa.cpp"
static PyTypeObject __pyx_type_7Kynaraa___pyx_scope_struct_2_genexpr = {
  { { { 1 }, (0) }, (0) },
  "Kynaraa.""__pyx_scope_struct_2_genexpr",
  sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_2_genexpr),
  0,
  __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_2_genexpr,




  0,

  0,
  0,




  0,

  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  ( 0 | 0)|(1UL << 18)|0|0|(1UL << 14)|(1UL << 0),
  0,
  __pyx_tp_traverse_7Kynaraa___pyx_scope_struct_2_genexpr,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,

  0,

  0,
  0,
  __pyx_tp_new_7Kynaraa___pyx_scope_struct_2_genexpr,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,


  0,





  0,





  0,







};



static struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *__pyx_freelist_7Kynaraa___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_7Kynaraa___pyx_scope_struct_3_genexpr = 0;


static PyObject *__pyx_tp_new_7Kynaraa___pyx_scope_struct_3_genexpr(PyTypeObject *t, [[maybe_unused]] PyObject *a, [[maybe_unused]] PyObject *k) {
  PyObject *o;





  if (__builtin_expect(!!((int)(__pyx_freecount_7Kynaraa___pyx_scope_struct_3_genexpr > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr))), 1)) {
    o = (PyObject*)__pyx_freelist_7Kynaraa___pyx_scope_struct_3_genexpr[--__pyx_freecount_7Kynaraa___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr));
    (void) PyObject_Init(((PyObject*)((o))), (t));
    PyObject_GC_Track(o);
  } else

  {
    o = (*t->tp_alloc)(t, 0);
    if (__builtin_expect(!!(!o), 0)) return 0;
  }

  return o;
}

static void __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *)o;

  if (__builtin_expect(!!((((3 << 24) | (12 << 16) | (9 << 8) | (0xF << 4) | (0 << 0)) >= 0x03080000 || (((((PyTypeObject *)Py_TYPE(((PyObject*)((o)))))->tp_flags) & ((1UL << 0))) != 0)) && ((Py_TYPE(((PyObject*)((o)))))->tp_finalize)), 0) && !PyObject_GC_IsFinalized(o)) {
    if (((Py_TYPE(((PyObject*)((o)))))->tp_dealloc) == __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_3_genexpr) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }

  PyObject_GC_UnTrack(o);
  do { __typeof__(p->__pyx_genexpr_arg_0)* _tmp_op_ptr = &(p->__pyx_genexpr_arg_0); __typeof__(p->__pyx_genexpr_arg_0) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
  do { __typeof__(p->__pyx_v_i)* _tmp_op_ptr = &(p->__pyx_v_i); __typeof__(p->__pyx_v_i) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
  do { __typeof__(p->__pyx_t_0)* _tmp_op_ptr = &(p->__pyx_t_0); __typeof__(p->__pyx_t_0) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);

  if (((int)(__pyx_freecount_7Kynaraa___pyx_scope_struct_3_genexpr < 8) & (int)(Py_TYPE(((PyObject*)((o))))->tp_basicsize == sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_7Kynaraa___pyx_scope_struct_3_genexpr[__pyx_freecount_7Kynaraa___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *)o);
  } else

  {

    (*Py_TYPE(((PyObject*)((o))))->tp_free)(o);






  }
}

static int __pyx_tp_traverse_7Kynaraa___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_genexpr_arg_0) {
    e = (*v)(p->__pyx_genexpr_arg_0, a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
# 17858 "yxdfb/Kynaraa.cpp"
static PyTypeObject __pyx_type_7Kynaraa___pyx_scope_struct_3_genexpr = {
  { { { 1 }, (0) }, (0) },
  "Kynaraa.""__pyx_scope_struct_3_genexpr",
  sizeof(struct __pyx_obj_7Kynaraa___pyx_scope_struct_3_genexpr),
  0,
  __pyx_tp_dealloc_7Kynaraa___pyx_scope_struct_3_genexpr,




  0,

  0,
  0,




  0,

  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  ( 0 | 0)|(1UL << 18)|0|0|(1UL << 14)|(1UL << 0),
  0,
  __pyx_tp_traverse_7Kynaraa___pyx_scope_struct_3_genexpr,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,

  0,

  0,
  0,
  __pyx_tp_new_7Kynaraa___pyx_scope_struct_3_genexpr,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,


  0,





  0,





  0,







};


static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
# 17957 "yxdfb/Kynaraa.cpp"
static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_mstate_global->__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_01, __pyx_k_01, sizeof(__pyx_k_01), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_01710940017, __pyx_k_01710940017, sizeof(__pyx_k_01710940017), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_02, __pyx_k_02, sizeof(__pyx_k_02), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_0_0, __pyx_k_0_0, sizeof(__pyx_k_0_0), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_0_0_0_Chromium_v, __pyx_k_0_0_0_Chromium_v, sizeof(__pyx_k_0_0_0_Chromium_v), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_0_2, __pyx_k_0_2, sizeof(__pyx_k_0_2), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_0_3, __pyx_k_0_3, sizeof(__pyx_k_0_3), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_0_31m, __pyx_k_0_31m, sizeof(__pyx_k_0_31m), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_0m, __pyx_k_0m, sizeof(__pyx_k_0m), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_119940804214876861379510865434, __pyx_k_119940804214876861379510865434, sizeof(__pyx_k_119940804214876861379510865434), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_123, __pyx_k_123, sizeof(__pyx_k_123), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_1234, __pyx_k_1234, sizeof(__pyx_k_1234), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_12345, __pyx_k_12345, sizeof(__pyx_k_12345), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_123456, __pyx_k_123456, sizeof(__pyx_k_123456), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_123456789, __pyx_k_123456789, sizeof(__pyx_k_123456789), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_123456_anjing_dll, __pyx_k_123456_anjing_dll, sizeof(__pyx_k_123456_anjing_dll), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_12345_2, __pyx_k_12345_2, sizeof(__pyx_k_12345_2), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_1234_2, __pyx_k_1234_2, sizeof(__pyx_k_1234_2), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_123_2, __pyx_k_123_2, sizeof(__pyx_k_123_2), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_1633, __pyx_k_1633, sizeof(__pyx_k_1633), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_1_2, __pyx_k_1_2, sizeof(__pyx_k_1_2), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_1_600000023841858, __pyx_k_1_600000023841858, sizeof(__pyx_k_1_600000023841858), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_1_92m, __pyx_k_1_92m, sizeof(__pyx_k_1_92m), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_1_93m, __pyx_k_1_93m, sizeof(__pyx_k_1_93m), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_1f, __pyx_k_1f, sizeof(__pyx_k_1f), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_200, __pyx_k_200, sizeof(__pyx_k_200), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_321, __pyx_k_321, sizeof(__pyx_k_321), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_3643298472347298, __pyx_k_3643298472347298, sizeof(__pyx_k_3643298472347298), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_3711cb070fe0ab5acd59ae663b1ae4dc, __pyx_k_3711cb070fe0ab5acd59ae663b1ae4dc, sizeof(__pyx_k_3711cb070fe0ab5acd59ae663b1ae4dc), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_400, __pyx_k_400, sizeof(__pyx_k_400), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_401, __pyx_k_401, sizeof(__pyx_k_401), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_403, __pyx_k_403, sizeof(__pyx_k_403), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_404, __pyx_k_404, sizeof(__pyx_k_404), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_429, __pyx_k_429, sizeof(__pyx_k_429), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_500, __pyx_k_500, sizeof(__pyx_k_500), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_51001, __pyx_k_51001, sizeof(__pyx_k_51001), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_51011, __pyx_k_51011, sizeof(__pyx_k_51011), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_80973453345210784798, __pyx_k_80973453345210784798, sizeof(__pyx_k_80973453345210784798), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_980, __pyx_k_980, sizeof(__pyx_k_980), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_AXIS, __pyx_k_AXIS, sizeof(__pyx_k_AXIS), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_Accept_Encoding, __pyx_k_Accept_Encoding, sizeof(__pyx_k_Accept_Encoding), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_Anda_Tidak_Dapat_Menggunakan_Fit, __pyx_k_Anda_Tidak_Dapat_Menggunakan_Fit, sizeof(__pyx_k_Anda_Tidak_Dapat_Menggunakan_Fit), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_AuthOperations_PasswordAuthOpera, __pyx_k_AuthOperations_PasswordAuthOpera, sizeof(__pyx_k_AuthOperations_PasswordAuthOpera), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_Authorization, __pyx_k_Authorization, sizeof(__pyx_k_Authorization), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_BeautifulSoup, __pyx_k_BeautifulSoup, sizeof(__pyx_k_BeautifulSoup), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_Build, __pyx_k_Build, sizeof(__pyx_k_Build), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_CP, __pyx_k_CP, sizeof(__pyx_k_CP), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_u_CP_2, __pyx_k_CP_2, sizeof(__pyx_k_CP_2), 0, 1, 0, 1},
    {&__pyx_mstate_global->__pyx_kp_u_Chromium_v, __pyx_k_Chromium_v, sizeof(__pyx_k_Chromium_v), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_Connection, __pyx_k_Connection, sizeof(__pyx_k_Connection), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_ConnectionError, __pyx_k_ConnectionError, sizeof(__pyx_k_ConnectionError), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_Content_Type, __pyx_k_Content_Type, sizeof(__pyx_k_Content_Type), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_Cracking_selesai, __pyx_k_Cracking_selesai, sizeof(__pyx_k_Cracking_selesai), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_Dalvik_2_1_0_Linux_U_Android, __pyx_k_Dalvik_2_1_0_Linux_U_Android, sizeof(__pyx_k_Dalvik_2_1_0_Linux_U_Android), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_FB4A, __pyx_k_FB4A, sizeof(__pyx_k_FB4A), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_FBAN, __pyx_k_FBAN, sizeof(__pyx_k_FBAN), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_FBAN_2, __pyx_k_FBAN_2, sizeof(__pyx_k_FBAN_2), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBAV, __pyx_k_FBAV, sizeof(__pyx_k_FBAV), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBBV, __pyx_k_FBBV, sizeof(__pyx_k_FBBV), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBCA, __pyx_k_FBCA, sizeof(__pyx_k_FBCA), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBCR, __pyx_k_FBCR, sizeof(__pyx_k_FBCR), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBDM_density, __pyx_k_FBDM_density, sizeof(__pyx_k_FBDM_density), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBLC, __pyx_k_FBLC, sizeof(__pyx_k_FBLC), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBMF_ITEL_FBBD_Itel_FBDV, __pyx_k_FBMF_ITEL_FBBD_Itel_FBDV, sizeof(__pyx_k_FBMF_ITEL_FBBD_Itel_FBDV), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBPN, __pyx_k_FBPN, sizeof(__pyx_k_FBPN), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FBSV, __pyx_k_FBSV, sizeof(__pyx_k_FBSV), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_FB_FW, __pyx_k_FB_FW, sizeof(__pyx_k_FB_FW), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_False, __pyx_k_False, sizeof(__pyx_k_False), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_FbBloksActionRootQuery_com_bloks, __pyx_k_FbBloksActionRootQuery_com_bloks, sizeof(__pyx_k_FbBloksActionRootQuery_com_bloks), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_GRAPH_V1, __pyx_k_GRAPH_V1, sizeof(__pyx_k_GRAPH_V1), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_GRAPH_V1_2, __pyx_k_GRAPH_V1_2, sizeof(__pyx_k_GRAPH_V1_2), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_GRAPH_V2, __pyx_k_GRAPH_V2, sizeof(__pyx_k_GRAPH_V2), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_Google_Chrome_v, __pyx_k_Google_Chrome_v, sizeof(__pyx_k_Google_Chrome_v), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_GraphServices, __pyx_k_GraphServices, sizeof(__pyx_k_GraphServices), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_H, __pyx_k_H, sizeof(__pyx_k_H), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Host, __pyx_k_Host, sizeof(__pyx_k_Host), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_IGNORECASE, __pyx_k_IGNORECASE, sizeof(__pyx_k_IGNORECASE), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_INDOSAT, __pyx_k_INDOSAT, sizeof(__pyx_k_INDOSAT), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_Kesalahan_Kueriterkena_batas, __pyx_k_Kesalahan_Kueriterkena_batas, sizeof(__pyx_k_Kesalahan_Kueriterkena_batas), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa, __pyx_k_Kynaa, sizeof(__pyx_k_Kynaa), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa___init, __pyx_k_Kynaa___init, sizeof(__pyx_k_Kynaa___init), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_abcd, __pyx_k_Kynaa_abcd, sizeof(__pyx_k_Kynaa_abcd), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_generate_random_user_agent, __pyx_k_Kynaa_generate_random_user_agent, sizeof(__pyx_k_Kynaa_generate_random_user_agent), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_graph_v1, __pyx_k_Kynaa_graph_v1, sizeof(__pyx_k_Kynaa_graph_v1), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_graph_v1_locals_genexpr, __pyx_k_Kynaa_graph_v1_locals_genexpr, sizeof(__pyx_k_Kynaa_graph_v1_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_graph_v2, __pyx_k_Kynaa_graph_v2, sizeof(__pyx_k_Kynaa_graph_v2), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_graph_v2_locals_genexpr, __pyx_k_Kynaa_graph_v2_locals_genexpr, sizeof(__pyx_k_Kynaa_graph_v2_locals_genexpr), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_notice, __pyx_k_Kynaa_notice, sizeof(__pyx_k_Kynaa_notice), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_print_proses, __pyx_k_Kynaa_print_proses, sizeof(__pyx_k_Kynaa_print_proses), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_print_proses_api, __pyx_k_Kynaa_print_proses_api, sizeof(__pyx_k_Kynaa_print_proses_api), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_print_proses_api_locals_ge, __pyx_k_Kynaa_print_proses_api_locals_ge, sizeof(__pyx_k_Kynaa_print_proses_api_locals_ge), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_reguller, __pyx_k_Kynaa_reguller, sizeof(__pyx_k_Kynaa_reguller), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaa_save_hasil, __pyx_k_Kynaa_save_hasil, sizeof(__pyx_k_Kynaa_save_hasil), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_k_Kynaraa, sizeof(__pyx_k_Kynaraa), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_Linux, __pyx_k_Linux, sizeof(__pyx_k_Linux), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_Logo, __pyx_k_Logo, sizeof(__pyx_k_Logo), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_MOBILE_LTE, __pyx_k_MOBILE_LTE, sizeof(__pyx_k_MOBILE_LTE), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_Module, __pyx_k_Module, sizeof(__pyx_k_Module), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_Not_A_Brand_v, __pyx_k_Not_A_Brand_v, sizeof(__pyx_k_Not_A_Brand_v), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_OAuth_350685531728_62f8ce9f74b12, __pyx_k_OAuth_350685531728_62f8ce9f74b12, sizeof(__pyx_k_OAuth_350685531728_62f8ce9f74b12), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_OK, __pyx_k_OK, sizeof(__pyx_k_OK), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_u_OK_2, __pyx_k_OK_2, sizeof(__pyx_k_OK_2), 0, 1, 0, 1},
    {&__pyx_mstate_global->__pyx_kp_s_ON_OFF_MODE_PESAWAT_SETIAP_200, __pyx_k_ON_OFF_MODE_PESAWAT_SETIAP_200, sizeof(__pyx_k_ON_OFF_MODE_PESAWAT_SETIAP_200), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_Orca_Android, __pyx_k_Orca_Android, sizeof(__pyx_k_Orca_Android), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_GRAPH_V1, __pyx_k_PROSES_CRACK_METODE_GRAPH_V1, sizeof(__pyx_k_PROSES_CRACK_METODE_GRAPH_V1), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_GRAPH_V2, __pyx_k_PROSES_CRACK_METODE_GRAPH_V2, sizeof(__pyx_k_PROSES_CRACK_METODE_GRAPH_V2), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_VALID_V1, __pyx_k_PROSES_CRACK_METODE_VALID_V1, sizeof(__pyx_k_PROSES_CRACK_METODE_VALID_V1), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_PROSES_CRACK_METODE_VALID_V2, __pyx_k_PROSES_CRACK_METODE_VALID_V2, sizeof(__pyx_k_PROSES_CRACK_METODE_VALID_V2), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_PWD_FB4A_0, __pyx_k_PWD_FB4A_0, sizeof(__pyx_k_PWD_FB4A_0), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_Password, __pyx_k_Password, sizeof(__pyx_k_Password), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Priority, __pyx_k_Priority, sizeof(__pyx_k_Priority), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_Pws, __pyx_k_Pws, sizeof(__pyx_k_Pws), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_QP1A_190711_020, __pyx_k_QP1A_190711_020, sizeof(__pyx_k_QP1A_190711_020), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_R, __pyx_k_R, sizeof(__pyx_k_R), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_RP1A_200720_011, __pyx_k_RP1A_200720_011, sizeof(__pyx_k_RP1A_200720_011), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_SP1A_210812_016, __pyx_k_SP1A_210812_016, sizeof(__pyx_k_SP1A_210812_016), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_Session, __pyx_k_Session, sizeof(__pyx_k_Session), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_TELKOMSEL, __pyx_k_TELKOMSEL, sizeof(__pyx_k_TELKOMSEL), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_THREE, __pyx_k_THREE, sizeof(__pyx_k_THREE), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_TP1A_220905_001, __pyx_k_TP1A_220905_001, sizeof(__pyx_k_TP1A_220905_001), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_ThreadPoolExecutor, __pyx_k_ThreadPoolExecutor, sizeof(__pyx_k_ThreadPoolExecutor), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_Tigon_Liger, __pyx_k_Tigon_Liger, sizeof(__pyx_k_Tigon_Liger), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_Tod, __pyx_k_Tod, sizeof(__pyx_k_Tod), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_True, __pyx_k_True, sizeof(__pyx_k_True), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_UP1A_231005_007, __pyx_k_UP1A_231005_007, sizeof(__pyx_k_UP1A_231005_007), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_UserAgent, __pyx_k_UserAgent, sizeof(__pyx_k_UserAgent), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_UserAgent_bawaan_script, __pyx_k_UserAgent_bawaan_script, sizeof(__pyx_k_UserAgent_bawaan_script), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_UserAgent_yang_disetting, __pyx_k_UserAgent_yang_disetting, sizeof(__pyx_k_UserAgent_yang_disetting), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_User_Agent, __pyx_k_User_Agent, sizeof(__pyx_k_User_Agent), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_User_must_verify_their_account, __pyx_k_User_must_verify_their_account, sizeof(__pyx_k_User_must_verify_their_account), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_VALID_V1, __pyx_k_VALID_V1, sizeof(__pyx_k_VALID_V1), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_VALID_V2, __pyx_k_VALID_V2, sizeof(__pyx_k_VALID_V2), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_XL, __pyx_k_XL, sizeof(__pyx_k_XL), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__14, __pyx_k__14, sizeof(__pyx_k__14), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__35, __pyx_k__35, sizeof(__pyx_k__35), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s__38, __pyx_k__38, sizeof(__pyx_k__38), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s__39, __pyx_k__39, sizeof(__pyx_k__39), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__41, __pyx_k__41, sizeof(__pyx_k__41), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s__43, __pyx_k__43, sizeof(__pyx_k__43), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u__43, __pyx_k__43, sizeof(__pyx_k__43), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__44, __pyx_k__44, sizeof(__pyx_k__44), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__45, __pyx_k__45, sizeof(__pyx_k__45), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s__47, __pyx_k__47, sizeof(__pyx_k__47), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u__50, __pyx_k__50, sizeof(__pyx_k__50), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__53, __pyx_k__53, sizeof(__pyx_k__53), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_abcd, __pyx_k_abcd, sizeof(__pyx_k_abcd), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_accept, __pyx_k_accept, sizeof(__pyx_k_accept), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_accept_encoding, __pyx_k_accept_encoding, sizeof(__pyx_k_accept_encoding), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_accept_language, __pyx_k_accept_language, sizeof(__pyx_k_accept_language), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_access_token, __pyx_k_access_token, sizeof(__pyx_k_access_token), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_account_recovery, __pyx_k_account_recovery, sizeof(__pyx_k_account_recovery), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_adid, __pyx_k_adid, sizeof(__pyx_k_adid), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_aktivitas_mencurigakan, __pyx_k_aktivitas_mencurigakan, sizeof(__pyx_k_aktivitas_mencurigakan), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_allow_redirects, __pyx_k_allow_redirects, sizeof(__pyx_k_allow_redirects), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_u_aman, __pyx_k_aman, sizeof(__pyx_k_aman), 0, 1, 0, 1},
    {&__pyx_mstate_global->__pyx_kp_u_anda_saat_ini_menggunakan, __pyx_k_anda_saat_ini_menggunakan, sizeof(__pyx_k_anda_saat_ini_menggunakan), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_android_login, __pyx_k_android_login, sizeof(__pyx_k_android_login), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_android_versions, __pyx_k_android_versions, sizeof(__pyx_k_android_versions), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_apcb, __pyx_k_apcb, sizeof(__pyx_k_apcb), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_app_id, __pyx_k_app_id, sizeof(__pyx_k_app_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_application_x_www_form_urlencode, __pyx_k_application_x_www_form_urlencode, sizeof(__pyx_k_application_x_www_form_urlencode), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_arm64_v8a, __pyx_k_arm64_v8a, sizeof(__pyx_k_arm64_v8a), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_armeabi_v7a, __pyx_k_armeabi_v7a, sizeof(__pyx_k_armeabi_v7a), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_asu, __pyx_k_asu, sizeof(__pyx_k_asu), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_asw, __pyx_k_asw, sizeof(__pyx_k_asw), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_auth_login, __pyx_k_auth_login, sizeof(__pyx_k_auth_login), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_authenticate, __pyx_k_authenticate, sizeof(__pyx_k_authenticate), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_authority, __pyx_k_authority, sizeof(__pyx_k_authority), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_authorization, __pyx_k_authorization, sizeof(__pyx_k_authorization), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_aw, __pyx_k_aw, sizeof(__pyx_k_aw), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_b64encode, __pyx_k_b64encode, sizeof(__pyx_k_b64encode), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_base64, __pyx_k_base64, sizeof(__pyx_k_base64), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_belakang, __pyx_k_belakang, sizeof(__pyx_k_belakang), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_bloks_version, __pyx_k_bloks_version, sizeof(__pyx_k_bloks_version), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_bloks_versioning_id, __pyx_k_bloks_versioning_id, sizeof(__pyx_k_bloks_versioning_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_bluid_data, __pyx_k_bluid_data, sizeof(__pyx_k_bluid_data), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_bluid_logo, __pyx_k_bluid_logo, sizeof(__pyx_k_bluid_logo), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_br_gzip, __pyx_k_br_gzip, sizeof(__pyx_k_br_gzip), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_bs4, __pyx_k_bs4, sizeof(__pyx_k_bs4), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_build_ids, __pyx_k_build_ids, sizeof(__pyx_k_build_ids), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_button_with_disabled, __pyx_k_button_with_disabled, sizeof(__pyx_k_button_with_disabled), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_c4663a0f_a919_4454_bf17_3d542589, __pyx_k_c4663a0f_a919_4454_bf17_3d542589, sizeof(__pyx_k_c4663a0f_a919_4454_bf17_3d542589), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_c_user, __pyx_k_c_user, sizeof(__pyx_k_c_user), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_cache_control, __pyx_k_cache_control, sizeof(__pyx_k_cache_control), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_cfe75e13b386d5c54b1de2dcca1bee5a, __pyx_k_cfe75e13b386d5c54b1de2dcca1bee5a, sizeof(__pyx_k_cfe75e13b386d5c54b1de2dcca1bee5a), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_checkpoint, __pyx_k_checkpoint, sizeof(__pyx_k_checkpoint), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_choice, __pyx_k_choice, sizeof(__pyx_k_choice), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_client_country_code, __pyx_k_client_country_code, sizeof(__pyx_k_client_country_code), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_client_doc_id, __pyx_k_client_doc_id, sizeof(__pyx_k_client_doc_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_client_trace_id, __pyx_k_client_trace_id, sizeof(__pyx_k_client_trace_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_code, __pyx_k_code, sizeof(__pyx_k_code), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_coki, __pyx_k_coki, sizeof(__pyx_k_coki), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_cokie, __pyx_k_cokie, sizeof(__pyx_k_cokie), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_cokz, __pyx_k_cokz, sizeof(__pyx_k_cokz), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_com_bloks_www_ap_two_step_verifi, __pyx_k_com_bloks_www_ap_two_step_verifi, sizeof(__pyx_k_com_bloks_www_ap_two_step_verifi), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_com_bloks_www_bloks_caa_login_as, __pyx_k_com_bloks_www_bloks_caa_login_as, sizeof(__pyx_k_com_bloks_www_bloks_caa_login_as), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_com_bloks_www_two_step_verificat, __pyx_k_com_bloks_www_two_step_verificat, sizeof(__pyx_k_com_bloks_www_two_step_verificat), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_com_facebook_katana, __pyx_k_com_facebook_katana, sizeof(__pyx_k_com_facebook_katana), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_com_facebook_orca, __pyx_k_com_facebook_orca, sizeof(__pyx_k_com_facebook_orca), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_concurrent_futures, __pyx_k_concurrent_futures, sizeof(__pyx_k_concurrent_futures), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_contact_point, __pyx_k_contact_point, sizeof(__pyx_k_contact_point), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_content_type, __pyx_k_content_type, sizeof(__pyx_k_content_type), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_cookie, __pyx_k_cookie, sizeof(__pyx_k_cookie), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_cookies, __pyx_k_cookies, sizeof(__pyx_k_cookies), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_cp, __pyx_k_cp, sizeof(__pyx_k_cp), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_cpl, __pyx_k_cpl, sizeof(__pyx_k_cpl), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_curl, __pyx_k_curl, sizeof(__pyx_k_curl), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_dark, __pyx_k_dark, sizeof(__pyx_k_dark), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_data_cache_sett_UaFB_json, __pyx_k_data_cache_sett_UaFB_json, sizeof(__pyx_k_data_cache_sett_UaFB_json), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_data_result_CP_CP, __pyx_k_data_result_CP_CP, sizeof(__pyx_k_data_result_CP_CP), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_u_data_result_OK_OK, __pyx_k_data_result_OK_OK, sizeof(__pyx_k_data_result_OK_OK), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_datr, __pyx_k_datr, sizeof(__pyx_k_datr), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_datr_2, __pyx_k_datr_2, sizeof(__pyx_k_datr_2), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_debug_tooling_metadata_token, __pyx_k_debug_tooling_metadata_token, sizeof(__pyx_k_debug_tooling_metadata_token), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_densities, __pyx_k_densities, sizeof(__pyx_k_densities), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_depan, __pyx_k_depan, sizeof(__pyx_k_depan), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_device_id, __pyx_k_device_id, sizeof(__pyx_k_device_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_document, __pyx_k_document, sizeof(__pyx_k_document), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_dpr, __pyx_k_dpr, sizeof(__pyx_k_dpr), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_dumps, __pyx_k_dumps, sizeof(__pyx_k_dumps), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_email, __pyx_k_email, sizeof(__pyx_k_email), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_en_US, __pyx_k_en_US, sizeof(__pyx_k_en_US), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_encrypted_password, __pyx_k_encrypted_password, sizeof(__pyx_k_encrypted_password), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_error_detail_type, __pyx_k_error_detail_type, sizeof(__pyx_k_error_detail_type), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_es_ES, __pyx_k_es_ES, sizeof(__pyx_k_es_ES), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_exceptions, __pyx_k_exceptions, sizeof(__pyx_k_exceptions), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_executor, __pyx_k_executor, sizeof(__pyx_k_executor), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_exit_2, __pyx_k_exit_2, sizeof(__pyx_k_exit_2), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd, __pyx_k_eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd, sizeof(__pyx_k_eyJhbGciOiJSUzI1NiIsImtpZCI6Ijd), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_fallback_triggered_s_true, __pyx_k_fallback_triggered_s_true, sizeof(__pyx_k_fallback_triggered_s_true), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_false, __pyx_k_false, sizeof(__pyx_k_false), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_family_device_id, __pyx_k_family_device_id, sizeof(__pyx_k_family_device_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fb_api_analytics_tags, __pyx_k_fb_api_analytics_tags, sizeof(__pyx_k_fb_api_analytics_tags), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fb_api_caller_class, __pyx_k_fb_api_caller_class, sizeof(__pyx_k_fb_api_caller_class), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fb_api_req_friendly_name, __pyx_k_fb_api_req_friendly_name, sizeof(__pyx_k_fb_api_req_friendly_name), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fb_fw, __pyx_k_fb_fw, sizeof(__pyx_k_fb_fw), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fb_noscript, __pyx_k_fb_noscript, sizeof(__pyx_k_fb_noscript), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fbans, __pyx_k_fbans, sizeof(__pyx_k_fbans), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fbavs, __pyx_k_fbavs, sizeof(__pyx_k_fbavs), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fbbvs, __pyx_k_fbbvs, sizeof(__pyx_k_fbbvs), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fbcas, __pyx_k_fbcas, sizeof(__pyx_k_fbcas), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fbcrs, __pyx_k_fbcrs, sizeof(__pyx_k_fbcrs), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fblcs, __pyx_k_fblcs, sizeof(__pyx_k_fblcs), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fbpns, __pyx_k_fbpns, sizeof(__pyx_k_fbpns), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fesnuk, __pyx_k_fesnuk, sizeof(__pyx_k_fesnuk), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fetch, __pyx_k_fetch, sizeof(__pyx_k_fetch), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_find, __pyx_k_find, sizeof(__pyx_k_find), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_first_prefill_source, __pyx_k_first_prefill_source, sizeof(__pyx_k_first_prefill_source), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_first_prefill_type, __pyx_k_first_prefill_type, sizeof(__pyx_k_first_prefill_type), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fr, __pyx_k_fr, sizeof(__pyx_k_fr), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_fr_FR, __pyx_k_fr_FR, sizeof(__pyx_k_fr_FR), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_generate_random_user_agent, __pyx_k_generate_random_user_agent, sizeof(__pyx_k_generate_random_user_agent), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_generate_session_cookies, __pyx_k_generate_session_cookies, sizeof(__pyx_k_generate_session_cookies), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_get_dict, __pyx_k_get_dict, sizeof(__pyx_k_get_dict), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_google, __pyx_k_google, sizeof(__pyx_k_google), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_gp, __pyx_k_gp, sizeof(__pyx_k_gp), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_graph_facebook_com, __pyx_k_graph_facebook_com, sizeof(__pyx_k_graph_facebook_com), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_graph_v1, __pyx_k_graph_v1, sizeof(__pyx_k_graph_v1), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_graph_v2, __pyx_k_graph_v2, sizeof(__pyx_k_graph_v2), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_graphservice, __pyx_k_graphservice, sizeof(__pyx_k_graphservice), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_group, __pyx_k_group, sizeof(__pyx_k_group), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_gunakan_koma_untuk_pemisah_cont, __pyx_k_gunakan_koma_untuk_pemisah_cont, sizeof(__pyx_k_gunakan_koma_untuk_pemisah_cont), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_gzip_deflate, __pyx_k_gzip_deflate, sizeof(__pyx_k_gzip_deflate), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_had_cp_prefilled, __pyx_k_had_cp_prefilled, sizeof(__pyx_k_had_cp_prefilled), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_had_password_prefilled, __pyx_k_had_password_prefilled, sizeof(__pyx_k_had_password_prefilled), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_head, __pyx_k_head, sizeof(__pyx_k_head), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_headers, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_host, __pyx_k_host, sizeof(__pyx_k_host), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_html_parser, __pyx_k_html_parser, sizeof(__pyx_k_html_parser), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_https_b_graph_facebook_com_auth, __pyx_k_https_b_graph_facebook_com_auth, sizeof(__pyx_k_https_b_graph_facebook_com_auth), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_https_graph_facebook_com_graphql, __pyx_k_https_graph_facebook_com_graphql, sizeof(__pyx_k_https_graph_facebook_com_graphql), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_https_touch_facebook_com_login_p, __pyx_k_https_touch_facebook_com_login_p, sizeof(__pyx_k_https_touch_facebook_com_login_p), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_https_www_facebook_com_login_dev, __pyx_k_https_www_facebook_com_login_dev, sizeof(__pyx_k_https_www_facebook_com_login_dev), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_https_x_facebook_com, __pyx_k_https_x_facebook_com, sizeof(__pyx_k_https_x_facebook_com), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_https_x_facebook_com_2, __pyx_k_https_x_facebook_com_2, sizeof(__pyx_k_https_x_facebook_com_2), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_https_x_facebook_com_login_php, __pyx_k_https_x_facebook_com_login_php, sizeof(__pyx_k_https_x_facebook_com_login_php), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_id_ID, __pyx_k_id_ID, sizeof(__pyx_k_id_ID), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_id_ID_id_q_0_9_en_US_q_0_8_en_q, __pyx_k_id_ID_id_q_0_9_en_US_q_0_8_en_q, sizeof(__pyx_k_id_ID_id_q_0_9_en_US_q_0_8_en_q), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_input, __pyx_k_input, sizeof(__pyx_k_input), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_is_flipper_enabled, __pyx_k_is_flipper_enabled, sizeof(__pyx_k_is_flipper_enabled), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_is_push_on, __pyx_k_is_push_on, sizeof(__pyx_k_is_push_on), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_is_smart_lock, __pyx_k_is_smart_lock, sizeof(__pyx_k_is_smart_lock), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_itel_S666LN, __pyx_k_itel_S666LN, sizeof(__pyx_k_itel_S666LN), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_jazoest, __pyx_k_jazoest, sizeof(__pyx_k_jazoest), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_keep_alive, __pyx_k_keep_alive, sizeof(__pyx_k_keep_alive), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_kyan, __pyx_k_kyan, sizeof(__pyx_k_kyan), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_kyna, __pyx_k_kyna, sizeof(__pyx_k_kyna), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_li, __pyx_k_li, sizeof(__pyx_k_li), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_locale, __pyx_k_locale, sizeof(__pyx_k_locale), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_lop, __pyx_k_lop, sizeof(__pyx_k_lop), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_lsd, __pyx_k_lsd, sizeof(__pyx_k_lsd), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_m_pixel_ratio_1_25_dpr_1_25_wd, __pyx_k_m_pixel_ratio_1_25_dpr_1_25_wd, sizeof(__pyx_k_m_pixel_ratio_1_25_dpr_1_25_wd), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_m_ts, __pyx_k_m_ts, sizeof(__pyx_k_m_ts), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_masukan_kata_sandi_tambahan_ops, __pyx_k_masukan_kata_sandi_tambahan_ops, sizeof(__pyx_k_masukan_kata_sandi_tambahan_ops), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_max_age_0, __pyx_k_max_age_0, sizeof(__pyx_k_max_age_0), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_max_workers, __pyx_k_max_workers, sizeof(__pyx_k_max_workers), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_membatasi_seberapa_sering_Anda_d, __pyx_k_membatasi_seberapa_sering_Anda_d, sizeof(__pyx_k_membatasi_seberapa_sering_Anda_d), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_mode_pesawat_5_detik, __pyx_k_mode_pesawat_5_detik, sizeof(__pyx_k_mode_pesawat_5_detik), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_nama, __pyx_k_nama, sizeof(__pyx_k_nama), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_name_c_user_value_d, __pyx_k_name_c_user_value_d, sizeof(__pyx_k_name_c_user_value_d), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_name_datr_value, __pyx_k_name_datr_value, sizeof(__pyx_k_name_datr_value), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_name_fr_value, __pyx_k_name_fr_value, sizeof(__pyx_k_name_fr_value), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_name_xs_value, __pyx_k_name_xs_value, sizeof(__pyx_k_name_xs_value), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_navigate, __pyx_k_navigate, sizeof(__pyx_k_navigate), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_network_tags_product_3506855317, __pyx_k_network_tags_product_3506855317, sizeof(__pyx_k_network_tags_product_3506855317), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_note, __pyx_k_note, sizeof(__pyx_k_note), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_notice, __pyx_k_notice, sizeof(__pyx_k_notice), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_nt_context, __pyx_k_nt_context, sizeof(__pyx_k_nt_context), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_ok, __pyx_k_ok, sizeof(__pyx_k_ok), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_openid_emails, __pyx_k_openid_emails, sizeof(__pyx_k_openid_emails), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_openid_flow, __pyx_k_openid_flow, sizeof(__pyx_k_openid_flow), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_openid_provider, __pyx_k_openid_provider, sizeof(__pyx_k_openid_provider), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_openid_tokens, __pyx_k_openid_tokens, sizeof(__pyx_k_openid_tokens), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_params_client_input_params_devi, __pyx_k_params_client_input_params_devi, sizeof(__pyx_k_params_client_input_params_devi), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_pass, __pyx_k_pass, sizeof(__pyx_k_pass), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_password, __pyx_k_password, sizeof(__pyx_k_password), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_password_manual, __pyx_k_password_manual, sizeof(__pyx_k_password_manual), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_pasw, __pyx_k_pasw, sizeof(__pyx_k_pasw), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_phone_models, __pyx_k_phone_models, sizeof(__pyx_k_phone_models), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_pixel_ratio, __pyx_k_pixel_ratio, sizeof(__pyx_k_pixel_ratio), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_post, __pyx_k_post, sizeof(__pyx_k_post), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_prefill_contact_point, __pyx_k_prefill_contact_point, sizeof(__pyx_k_prefill_contact_point), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_prefill_source, __pyx_k_prefill_source, sizeof(__pyx_k_prefill_source), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_prefill_type, __pyx_k_prefill_type, sizeof(__pyx_k_prefill_type), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_pretty, __pyx_k_pretty, sizeof(__pyx_k_pretty), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_print_proses, __pyx_k_print_proses, sizeof(__pyx_k_print_proses), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_print_proses_api, __pyx_k_print_proses_api, sizeof(__pyx_k_print_proses_api), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_provided_or_soft_matched, __pyx_k_provided_or_soft_matched, sizeof(__pyx_k_provided_or_soft_matched), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_purpose, __pyx_k_purpose, sizeof(__pyx_k_purpose), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_pw, __pyx_k_pw, sizeof(__pyx_k_pw), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_pwek, __pyx_k_pwek, sizeof(__pyx_k_pwek), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_pwnya, __pyx_k_pwnya, sizeof(__pyx_k_pwnya), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_randint, __pyx_k_randint, sizeof(__pyx_k_randint), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_random, __pyx_k_random, sizeof(__pyx_k_random), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_re, __pyx_k_re, sizeof(__pyx_k_re), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_referer, __pyx_k_referer, sizeof(__pyx_k_referer), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_reguller, __pyx_k_reguller, sizeof(__pyx_k_reguller), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_requests, __pyx_k_requests, sizeof(__pyx_k_requests), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_response, __pyx_k_response, sizeof(__pyx_k_response), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_response_text, __pyx_k_response_text, sizeof(__pyx_k_response_text), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_rr, __pyx_k_rr, sizeof(__pyx_k_rr), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_s_s, __pyx_k_s_s, sizeof(__pyx_k_s_s), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_same_origin, __pyx_k_same_origin, sizeof(__pyx_k_same_origin), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_sandi_tambahan, __pyx_k_sandi_tambahan, sizeof(__pyx_k_sandi_tambahan), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_save_hasil, __pyx_k_save_hasil, sizeof(__pyx_k_save_hasil), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_sb, __pyx_k_sb, sizeof(__pyx_k_sb), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_screen_height, __pyx_k_screen_height, sizeof(__pyx_k_screen_height), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_screen_width, __pyx_k_screen_width, sizeof(__pyx_k_screen_width), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_sec_ch_prefers_color_scheme, __pyx_k_sec_ch_prefers_color_scheme, sizeof(__pyx_k_sec_ch_prefers_color_scheme), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_ch_ua, __pyx_k_sec_ch_ua, sizeof(__pyx_k_sec_ch_ua), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_ch_ua_full_version_list, __pyx_k_sec_ch_ua_full_version_list, sizeof(__pyx_k_sec_ch_ua_full_version_list), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_ch_ua_mobile, __pyx_k_sec_ch_ua_mobile, sizeof(__pyx_k_sec_ch_ua_mobile), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_ch_ua_model, __pyx_k_sec_ch_ua_model, sizeof(__pyx_k_sec_ch_ua_model), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_ch_ua_platform, __pyx_k_sec_ch_ua_platform, sizeof(__pyx_k_sec_ch_ua_platform), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_ch_ua_platform_version, __pyx_k_sec_ch_ua_platform_version, sizeof(__pyx_k_sec_ch_ua_platform_version), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_fetch_dest, __pyx_k_sec_fetch_dest, sizeof(__pyx_k_sec_fetch_dest), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_fetch_mode, __pyx_k_sec_fetch_mode, sizeof(__pyx_k_sec_fetch_mode), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_fetch_site, __pyx_k_sec_fetch_site, sizeof(__pyx_k_sec_fetch_site), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_sec_fetch_user, __pyx_k_sec_fetch_user, sizeof(__pyx_k_sec_fetch_user), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_secure_family_device_id, __pyx_k_secure_family_device_id, sizeof(__pyx_k_secure_family_device_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_sementara_diblokir, __pyx_k_sementara_diblokir, sizeof(__pyx_k_sementara_diblokir), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_server_params_is_from_logged_ou, __pyx_k_server_params_is_from_logged_ou, sizeof(__pyx_k_server_params_is_from_logged_ou), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_server_timestamps, __pyx_k_server_timestamps, sizeof(__pyx_k_server_timestamps), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_ses, __pyx_k_ses, sizeof(__pyx_k_ses), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_session_cookies, __pyx_k_session_cookies, sizeof(__pyx_k_session_cookies), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_session_key, __pyx_k_session_key, sizeof(__pyx_k_session_key), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_setiap_kata_minimal_6_karakter, __pyx_k_setiap_kata_minimal_6_karakter, sizeof(__pyx_k_setiap_kata_minimal_6_karakter), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_silakan_coba_lagi_nantiGagal_men, __pyx_k_silakan_coba_lagi_nantiGagal_men, sizeof(__pyx_k_silakan_coba_lagi_nantiGagal_men), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_sim_serials, __pyx_k_sim_serials, sizeof(__pyx_k_sim_serials), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_u_spam, __pyx_k_spam, sizeof(__pyx_k_spam), 0, 1, 0, 1},
    {&__pyx_mstate_global->__pyx_n_s_spam_patterns, __pyx_k_spam_patterns, sizeof(__pyx_k_spam_patterns), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_ss, __pyx_k_ss, sizeof(__pyx_k_ss), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_status_code, __pyx_k_status_code, sizeof(__pyx_k_status_code), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_stdout, __pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_styles_id, __pyx_k_styles_id, sizeof(__pyx_k_styles_id), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_submit, __pyx_k_submit, sizeof(__pyx_k_submit), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_szaz, __pyx_k_szaz, sizeof(__pyx_k_szaz), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_terlalu_banyak_percobaan, __pyx_k_terlalu_banyak_percobaan, sizeof(__pyx_k_terlalu_banyak_percobaan), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_text_html_application_xhtml_xml, __pyx_k_text_html_application_xhtml_xml, sizeof(__pyx_k_text_html_application_xhtml_xml), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_tggl, __pyx_k_tggl, sizeof(__pyx_k_tggl), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_theme_params, __pyx_k_theme_params, sizeof(__pyx_k_theme_params), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_tod, __pyx_k_tod, sizeof(__pyx_k_tod), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_true, __pyx_k_true, sizeof(__pyx_k_true), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_try_num, __pyx_k_try_num, sizeof(__pyx_k_try_num), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_try_number, __pyx_k_try_number, sizeof(__pyx_k_try_number), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_u_txt, __pyx_k_txt, sizeof(__pyx_k_txt), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_kp_s_u_3_i, __pyx_k_u_3_i, sizeof(__pyx_k_u_3_i), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_ua, __pyx_k_ua, sizeof(__pyx_k_ua), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_ua_fb_val, __pyx_k_ua_fb_val, sizeof(__pyx_k_ua_fb_val), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_uid, __pyx_k_uid, sizeof(__pyx_k_uid), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_uniform, __pyx_k_uniform, sizeof(__pyx_k_uniform), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_unrecognized_tries, __pyx_k_unrecognized_tries, sizeof(__pyx_k_unrecognized_tries), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_upgrade_insecure_requests, __pyx_k_upgrade_insecure_requests, sizeof(__pyx_k_upgrade_insecure_requests), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_urandom, __pyx_k_urandom, sizeof(__pyx_k_urandom), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_user, __pyx_k_user, sizeof(__pyx_k_user), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_user_agent, __pyx_k_user_agent, sizeof(__pyx_k_user_agent), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_user_agent_2, __pyx_k_user_agent_2, sizeof(__pyx_k_user_agent_2), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_user_agent_status, __pyx_k_user_agent_status, sizeof(__pyx_k_user_agent_status), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_using_white_navbar, __pyx_k_using_white_navbar, sizeof(__pyx_k_using_white_navbar), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_uuid, __pyx_k_uuid, sizeof(__pyx_k_uuid), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_uuid4, __pyx_k_uuid4, sizeof(__pyx_k_uuid4), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_valid_v1, __pyx_k_valid_v1, sizeof(__pyx_k_valid_v1), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_variables, __pyx_k_variables, sizeof(__pyx_k_variables), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_viewport_width, __pyx_k_viewport_width, sizeof(__pyx_k_viewport_width), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_u_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 1, 0, 0},
    {&__pyx_mstate_global->__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_x86, __pyx_k_x86, sizeof(__pyx_k_x86), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_x_facebook_com, __pyx_k_x_facebook_com, sizeof(__pyx_k_x_facebook_com), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_client_ip, __pyx_k_x_fb_client_ip, sizeof(__pyx_k_x_fb_client_ip), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_connection_type, __pyx_k_x_fb_connection_type, sizeof(__pyx_k_x_fb_connection_type), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_device_group, __pyx_k_x_fb_device_group, sizeof(__pyx_k_x_fb_device_group), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_friendly_name, __pyx_k_x_fb_friendly_name, sizeof(__pyx_k_x_fb_friendly_name), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_http_engine, __pyx_k_x_fb_http_engine, sizeof(__pyx_k_x_fb_http_engine), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_net_hni, __pyx_k_x_fb_net_hni, sizeof(__pyx_k_x_fb_net_hni), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_privacy_context, __pyx_k_x_fb_privacy_context, sizeof(__pyx_k_x_fb_privacy_context), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_request_analytics_tags, __pyx_k_x_fb_request_analytics_tags, sizeof(__pyx_k_x_fb_request_analytics_tags), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_server_cluster, __pyx_k_x_fb_server_cluster, sizeof(__pyx_k_x_fb_server_cluster), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_fb_sim_hni, __pyx_k_x_fb_sim_hni, sizeof(__pyx_k_x_fb_sim_hni), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_graphql_client_library, __pyx_k_x_graphql_client_library, sizeof(__pyx_k_x_graphql_client_library), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_graphql_request_purpose, __pyx_k_x_graphql_request_purpose, sizeof(__pyx_k_x_graphql_request_purpose), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_kp_s_x_tigon_is_retry, __pyx_k_x_tigon_is_retry, sizeof(__pyx_k_x_tigon_is_retry), 0, 0, 1, 0},
    {&__pyx_mstate_global->__pyx_n_s_xpw, __pyx_k_xpw, sizeof(__pyx_k_xpw), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_xpwd, __pyx_k_xpwd, sizeof(__pyx_k_xpwd), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_n_s_xs, __pyx_k_xs, sizeof(__pyx_k_xs), 0, 0, 1, 1},
    {&__pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_k_yxdfb_Kynaraa_py, sizeof(__pyx_k_yxdfb_Kynaraa_py), 0, 0, 1, 0},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}

static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_s_open); if (!__pyx_builtin_open) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 18498; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_s_print); if (!__pyx_builtin_print) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 46; (void)__pyx_lineno; __pyx_clineno = 18499; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_builtin_input = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_s_input); if (!__pyx_builtin_input) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 62; (void)__pyx_lineno; __pyx_clineno = 18500; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_builtin_exit = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_s_exit); if (!__pyx_builtin_exit) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 141; (void)__pyx_lineno; __pyx_clineno = 18501; (void)__pyx_clineno; } goto __pyx_L1_error; }
  return 0;
  __pyx_L1_error:;
  return -1;
}


static int __Pyx_InitCachedConstants(void) {

                                                            ;
# 18519 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__2 = PyTuple_Pack(3, (&_Py_NoneStruct), (&_Py_NoneStruct), (&_Py_NoneStruct)); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 25; (void)__pyx_lineno; __pyx_clineno = 18519; (void)__pyx_clineno; } goto __pyx_L1_error; }
                              ;
                               ;
# 18530 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__18 = PyTuple_Pack(1, __pyx_mstate_global->__pyx_kp_s_ON_OFF_MODE_PESAWAT_SETIAP_200); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__18), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 74; (void)__pyx_lineno; __pyx_clineno = 18530; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18541 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__19 = PyTuple_Pack(1, __pyx_mstate_global->__pyx_kp_s__17); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__19), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 75; (void)__pyx_lineno; __pyx_clineno = 18541; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18552 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__21 = PyTuple_Pack(1, __pyx_mstate_global->__pyx_kp_s_Cracking_selesai); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__21), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 141; (void)__pyx_lineno; __pyx_clineno = 18552; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18563 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__22 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_300, __pyx_mstate_global->__pyx_int_400); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__22), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 18563; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_tuple__23 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_1, __pyx_mstate_global->__pyx_int_30); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__23), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 18566; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_tuple__25 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_1, __pyx_mstate_global->__pyx_int_200); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__25), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 170; (void)__pyx_lineno; __pyx_clineno = 18569; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18580 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__26 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_300000000, __pyx_mstate_global->__pyx_int_600000000); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__26), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 173; (void)__pyx_lineno; __pyx_clineno = 18580; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18591 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__27 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_float_1_0, __pyx_mstate_global->__pyx_float_3_0); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__27), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 176; (void)__pyx_lineno; __pyx_clineno = 18591; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18602 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__28 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_720, __pyx_mstate_global->__pyx_int_1440); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__28), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 177; (void)__pyx_lineno; __pyx_clineno = 18602; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18613 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__29 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_1280, __pyx_mstate_global->__pyx_int_2880); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__29), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 178; (void)__pyx_lineno; __pyx_clineno = 18613; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18624 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__30 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_1, __pyx_mstate_global->__pyx_int_5); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__30), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 179; (void)__pyx_lineno; __pyx_clineno = 18624; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18635 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__34 = PyTuple_Pack(1, __pyx_mstate_global->__pyx_kp_s_https_graph_facebook_com_graphql); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__34), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 234; (void)__pyx_lineno; __pyx_clineno = 18635; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18646 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__36 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_s__35, __pyx_mstate_global->__pyx_kp_s__8); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__36), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 238; (void)__pyx_lineno; __pyx_clineno = 18646; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18657 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__37 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_s__33, __pyx_mstate_global->__pyx_kp_s__8); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__37), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 18657; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_tuple__40 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_s__38, __pyx_mstate_global->__pyx_n_s__39); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__40), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 18660; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_tuple__42 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_kp_s__6, __pyx_mstate_global->__pyx_kp_s__41); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__42), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 242; (void)__pyx_lineno; __pyx_clineno = 18663; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18674 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__48 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_8, __pyx_mstate_global->__pyx_int_20); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__48), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 18674; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_tuple__49 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_40, __pyx_mstate_global->__pyx_int_114); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__49), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 384; (void)__pyx_lineno; __pyx_clineno = 18677; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18688 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__51 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_2000, __pyx_mstate_global->__pyx_int_5999); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__51), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 18688; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_tuple__52 = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_10, __pyx_mstate_global->__pyx_int_399); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__52), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 385; (void)__pyx_lineno; __pyx_clineno = 18691; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18702 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__54 = PyTuple_Pack(1, __pyx_mstate_global->__pyx_kp_u_https_www_facebook_com_login_dev); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__54), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 389; (void)__pyx_lineno; __pyx_clineno = 18702; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
# 18713 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__55 = PyTuple_Pack(3, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_id, __pyx_mstate_global->__pyx_n_s_aw); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__55), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 18713; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__55, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_init, 19, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__56), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 18716; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18725 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__57 = PyTuple_Pack(4, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_filename, __pyx_mstate_global->__pyx_n_s_data, __pyx_mstate_global->__pyx_n_s_file); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__57), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 18725; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__57, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_save_hasil, 24, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__58), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 18728; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18737 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__59 = PyTuple_Pack(4, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_code, __pyx_mstate_global->__pyx_n_s_gp, __pyx_mstate_global->__pyx_n_s_kyna); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__59), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 18737; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__59, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_print_proses, 28, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__60), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 18740; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18749 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__61 = PyTuple_Pack(3, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_tod, __pyx_mstate_global->__pyx_n_s_kyna); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__61), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 18749; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__61, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_notice, 48, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__62), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 18752; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18761 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__63 = PyTuple_Pack(15, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_asu, __pyx_mstate_global->__pyx_n_s_pwnya, __pyx_mstate_global->__pyx_n_s_pwek, __pyx_mstate_global->__pyx_n_s_password_manual, __pyx_mstate_global->__pyx_n_s_xpw, __pyx_mstate_global->__pyx_n_s_user_agent_status, __pyx_mstate_global->__pyx_n_s_executor, __pyx_mstate_global->__pyx_n_s_user, __pyx_mstate_global->__pyx_n_s_uid, __pyx_mstate_global->__pyx_n_s_nama, __pyx_mstate_global->__pyx_n_s_depan, __pyx_mstate_global->__pyx_n_s_belakang, __pyx_mstate_global->__pyx_n_s_pasw, __pyx_mstate_global->__pyx_n_s_xpwd); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__63), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 18761; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 15, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__63, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_abcd, 59, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__64), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 18764; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18773 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__65 = PyTuple_Pack(7, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_response_text, __pyx_mstate_global->__pyx_n_s_gp, __pyx_mstate_global->__pyx_n_s_spam_patterns, __pyx_mstate_global->__pyx_n_s_kyna, __pyx_mstate_global->__pyx_n_s_genexpr, __pyx_mstate_global->__pyx_n_s_genexpr); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__65), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 18773; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 7, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__65, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_print_proses_api, 144, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__66), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 18776; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18785 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__67 = PyTuple_Pack(16, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_android_versions, __pyx_mstate_global->__pyx_n_s_phone_models, __pyx_mstate_global->__pyx_n_s_build_ids, __pyx_mstate_global->__pyx_n_s_fbans, __pyx_mstate_global->__pyx_n_s_fbavs, __pyx_mstate_global->__pyx_n_s_fbpns, __pyx_mstate_global->__pyx_n_s_fblcs, __pyx_mstate_global->__pyx_n_s_fbbvs, __pyx_mstate_global->__pyx_n_s_fbcrs, __pyx_mstate_global->__pyx_n_s_fbcas, __pyx_mstate_global->__pyx_n_s_densities, __pyx_mstate_global->__pyx_n_s_screen_width, __pyx_mstate_global->__pyx_n_s_screen_height, __pyx_mstate_global->__pyx_n_s_fb_fw, __pyx_mstate_global->__pyx_n_s_user_agent_2); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__67), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 165; (void)__pyx_lineno; __pyx_clineno = 18785; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 16, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__67, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_generate_random_user_agent, 165, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__68), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 165; (void)__pyx_lineno; __pyx_clineno = 18788; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18797 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__69 = PyTuple_Pack(13, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_user, __pyx_mstate_global->__pyx_n_s_pasw, __pyx_mstate_global->__pyx_n_s_pw, __pyx_mstate_global->__pyx_n_s_ua, __pyx_mstate_global->__pyx_n_s_apcb, __pyx_mstate_global->__pyx_n_s_data, __pyx_mstate_global->__pyx_n_s_response, __pyx_mstate_global->__pyx_n_s_response_text, __pyx_mstate_global->__pyx_n_s_cokie, __pyx_mstate_global->__pyx_n_s_cookie, __pyx_mstate_global->__pyx_n_s_genexpr, __pyx_mstate_global->__pyx_n_s_genexpr); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__69), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 18797; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 13, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__69, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_graph_v1, 195, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__70), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 18800; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18809 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__71 = PyTuple_Pack(15, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_user, __pyx_mstate_global->__pyx_n_s_pasw, __pyx_mstate_global->__pyx_n_s_pw, __pyx_mstate_global->__pyx_n_s_ua, __pyx_mstate_global->__pyx_n_s_data, __pyx_mstate_global->__pyx_n_s_headers, __pyx_mstate_global->__pyx_n_s_curl, __pyx_mstate_global->__pyx_n_s_response, __pyx_mstate_global->__pyx_n_s_q, __pyx_mstate_global->__pyx_n_s_datr, __pyx_mstate_global->__pyx_n_s_cokz, __pyx_mstate_global->__pyx_n_s_coki, __pyx_mstate_global->__pyx_n_s_genexpr, __pyx_mstate_global->__pyx_n_s_genexpr); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__71), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 18809; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 15, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__71, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_graph_v2, 270, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__72), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 18812; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 18821 "yxdfb/Kynaraa.cpp"
  __pyx_mstate_global->__pyx_tuple__73 = PyTuple_Pack(18, __pyx_mstate_global->__pyx_n_s_self, __pyx_mstate_global->__pyx_n_s_user, __pyx_mstate_global->__pyx_n_s_pasw, __pyx_mstate_global->__pyx_n_s_host, __pyx_mstate_global->__pyx_n_s_note, __pyx_mstate_global->__pyx_n_s_ss, __pyx_mstate_global->__pyx_n_s_pw, __pyx_mstate_global->__pyx_n_s_rr, __pyx_mstate_global->__pyx_n_s_ua, __pyx_mstate_global->__pyx_n_s_kyan, __pyx_mstate_global->__pyx_n_s_kyna, __pyx_mstate_global->__pyx_n_s_data, __pyx_mstate_global->__pyx_n_s_apcb, __pyx_mstate_global->__pyx_n_s_head, __pyx_mstate_global->__pyx_n_s_szaz, __pyx_mstate_global->__pyx_n_s_coki, __pyx_mstate_global->__pyx_n_s_key, __pyx_mstate_global->__pyx_n_s_value); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_tuple__73), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 18821; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
                                ;
  __pyx_mstate_global->__pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 18, 0, 0x0001|0x0002, __pyx_mstate_global->__pyx_empty_bytes, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_tuple__73, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_kp_s_yxdfb_Kynaraa_py, __pyx_mstate_global->__pyx_n_s_reguller, 360, __pyx_mstate_global->__pyx_empty_bytes); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_codeobj__74), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 18824; (void)__pyx_clineno; } goto __pyx_L1_error; }
                               ;
  return 0;
  __pyx_L1_error:;
                               ;
  return -1;
}


static int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18834; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_mstate_global->__pyx_float_1_0 = PyFloat_FromDouble(1.0); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_float_1_0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18835; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_float_3_0 = PyFloat_FromDouble(3.0); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_float_3_0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18836; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_0 = PyLong_FromLong(0); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_0), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18837; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_1 = PyLong_FromLong(1); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_1), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18838; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_2 = PyLong_FromLong(2); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18839; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_3 = PyLong_FromLong(3); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18840; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_5 = PyLong_FromLong(5); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_5), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18841; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_6 = PyLong_FromLong(6); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_6), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18842; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_8 = PyLong_FromLong(8); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_8), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18843; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_10 = PyLong_FromLong(10); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_10), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18844; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_15 = PyLong_FromLong(15); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_15), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18845; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_18 = PyLong_FromLong(18); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_18), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18846; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_20 = PyLong_FromLong(20); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_20), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18847; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_30 = PyLong_FromLong(30); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_30), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18848; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_40 = PyLong_FromLong(40); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_40), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18849; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_75 = PyLong_FromLong(75); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_75), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18850; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_114 = PyLong_FromLong(114); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_114), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18851; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_200 = PyLong_FromLong(200); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_200), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18852; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_300 = PyLong_FromLong(300); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_300), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18853; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_399 = PyLong_FromLong(399); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_399), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18854; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_400 = PyLong_FromLong(400); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_400), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18855; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_401 = PyLong_FromLong(401); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_401), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18856; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_403 = PyLong_FromLong(403); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_403), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18857; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_404 = PyLong_FromLong(404); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_404), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18858; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_429 = PyLong_FromLong(429); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_429), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18859; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_500 = PyLong_FromLong(500); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_500), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18860; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_720 = PyLong_FromLong(720); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_720), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18861; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_1280 = PyLong_FromLong(1280); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_1280), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18862; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_1440 = PyLong_FromLong(1440); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_1440), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18863; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_2000 = PyLong_FromLong(2000); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_2000), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18864; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_2880 = PyLong_FromLong(2880); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_2880), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18865; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_5999 = PyLong_FromLong(5999); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_5999), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18866; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_300000000 = PyLong_FromLong(300000000L); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_300000000), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18867; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_int_600000000 = PyLong_FromLong(600000000L); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_int_600000000), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 18868; (void)__pyx_clineno; } goto __pyx_L1_error; }
  return 0;
  __pyx_L1_error:;
  return -1;
}


static int __Pyx_InitGlobals(void) {
  return 0;
}


static int __Pyx_modinit_global_init_code(void);
static int __Pyx_modinit_variable_export_code(void);
static int __Pyx_modinit_function_export_code(void);
static int __Pyx_modinit_type_init_code(void);
static int __Pyx_modinit_type_import_code(void);
static int __Pyx_modinit_variable_import_code(void);
static int __Pyx_modinit_function_import_code(void);

static int __Pyx_modinit_global_init_code(void) {

                                                                 ;

                               ;
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {

                                                                     ;

                               ;
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {

                                                                     ;

                               ;
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {

  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;
                                                               ;





  __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct__print_proses_api = &__pyx_type_7Kynaraa___pyx_scope_struct__print_proses_api;




  if (__Pyx_PyType_Ready(__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct__print_proses_api) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 18928; (void)__pyx_clineno; } goto __pyx_L1_error; }





  if ((1 && 1) && __builtin_expect(!!(!__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct__print_proses_api->tp_dictoffset && __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct__print_proses_api->tp_getattro == PyObject_GenericGetAttr), 1)) {
    __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct__print_proses_api->tp_getattro = PyObject_GenericGetAttr;
  }





  __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_1_genexpr = &__pyx_type_7Kynaraa___pyx_scope_struct_1_genexpr;




  if (__Pyx_PyType_Ready(__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_1_genexpr) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 157; (void)__pyx_lineno; __pyx_clineno = 18947; (void)__pyx_clineno; } goto __pyx_L1_error; }





  if ((1 && 1) && __builtin_expect(!!(!__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_1_genexpr->tp_dictoffset && __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_1_genexpr->tp_getattro == PyObject_GenericGetAttr), 1)) {
    __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_1_genexpr->tp_getattro = PyObject_GenericGetAttr;
  }





  __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_2_genexpr = &__pyx_type_7Kynaraa___pyx_scope_struct_2_genexpr;




  if (__Pyx_PyType_Ready(__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_2_genexpr) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 247; (void)__pyx_lineno; __pyx_clineno = 18966; (void)__pyx_clineno; } goto __pyx_L1_error; }





  if ((1 && 1) && __builtin_expect(!!(!__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_2_genexpr->tp_dictoffset && __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_2_genexpr->tp_getattro == PyObject_GenericGetAttr), 1)) {
    __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_2_genexpr->tp_getattro = PyObject_GenericGetAttr;
  }





  __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_3_genexpr = &__pyx_type_7Kynaraa___pyx_scope_struct_3_genexpr;




  if (__Pyx_PyType_Ready(__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_3_genexpr) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 316; (void)__pyx_lineno; __pyx_clineno = 18985; (void)__pyx_clineno; } goto __pyx_L1_error; }





  if ((1 && 1) && __builtin_expect(!!(!__pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_3_genexpr->tp_dictoffset && __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_3_genexpr->tp_getattro == PyObject_GenericGetAttr), 1)) {
    __pyx_mstate_global->__pyx_ptype_7Kynaraa___pyx_scope_struct_3_genexpr->tp_getattro = PyObject_GenericGetAttr;
  }

                               ;
  return 0;
  __pyx_L1_error:;
                               ;
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {

                                                                 ;

                               ;
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {

                                                                     ;

                               ;
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {

                                                                     ;

                               ;
  return 0;
}




static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def);
static int __pyx_pymod_exec_Kynaraa(PyObject* module);
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {1, (void*)__pyx_pymod_create},
  {2, (void*)__pyx_pymod_exec_Kynaraa},
  {0, __null}
};



namespace {
  struct PyModuleDef __pyx_moduledef =



  {
      { { { 1 }, (nullptr) }, nullptr, 0, nullptr, },
      "Kynaraa",
      0,

      0,





      __pyx_methods ,

      __pyx_moduledef_slots,
# 19066 "yxdfb/Kynaraa.cpp"
      __null,
      __null,
      __null

  };

}
# 19097 "yxdfb/Kynaraa.cpp"
extern "C" __attribute__ ((visibility ("default"))) PyObject* PyInit_Kynaraa(void) ;
extern "C" __attribute__ ((visibility ("default"))) PyObject* PyInit_Kynaraa(void)

{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_check_single_interpreter(void) {

    static int64_t main_interpreter_id = -1;
    int64_t current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (__builtin_expect(!!(current_id == -1), 0)) ? -1 : 0;
    } else if (__builtin_expect(!!(main_interpreter_id != current_id), 0))







    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}



static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)

{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (__builtin_expect(!!(value), 1)) {
        if (allow_none || value != (&_Py_NoneStruct)) {



            result = PyDict_SetItemString(moddict, to_name, value);

        }
        Py_DECREF(((PyObject*)((value))));
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = __null, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return __null;
    if (__pyx_m)
        return (Py_INCREF(((PyObject*)((__pyx_m)))), __pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (__builtin_expect(!!(!modname), 0)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(((PyObject*)((modname))));
    if (__builtin_expect(!!(!module), 0)) goto bad;



    moddict = PyModule_GetDict(module);
    if (__builtin_expect(!!(!moddict), 0)) goto bad;

    if (__builtin_expect(!!(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0), 0)) goto bad;
    if (__builtin_expect(!!(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0), 0)) goto bad;
    if (__builtin_expect(!!(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0), 0)) goto bad;
    if (__builtin_expect(!!(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0), 0)) goto bad;
    return module;
bad:
    Py_XDECREF(((PyObject*)((module))));
    return __null;
}


static int __pyx_pymod_exec_Kynaraa(PyObject *__pyx_pyinit_module)


{
  int stringtab_initialized = 0;



  PyObject *__pyx_t_1 = __null;
  PyObject *__pyx_t_2 = __null;
  PyObject *__pyx_t_3 = __null;
  int __pyx_lineno = 0;
  const char *__pyx_filename = __null;
  int __pyx_clineno = 0;


  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Kynaraa' has already been imported. Re-initialisation is not supported.");
    return -1;
  }





  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(((PyObject*)((__pyx_m))));
# 19224 "yxdfb/Kynaraa.cpp"
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_mstate_global->__pyx_d = PyModule_GetDict(__pyx_m); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_d), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19225; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_d))));
  __pyx_mstate_global->__pyx_b = __Pyx_PyImport_AddModuleRef("builtins"); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_b), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19227; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_cython_runtime), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19228; (void)__pyx_clineno; } goto __pyx_L1_error; }
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate_global->__pyx_b) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19229; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 19239 "yxdfb/Kynaraa.cpp"
                                                                            ;
  if (__Pyx_check_binary_version(((3 << 24) | (12 << 16) | (9 << 8) | (0xF << 4) | (0 << 0)), __Pyx_get_runtime_version(), 0) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19240; (void)__pyx_clineno; } goto __pyx_L1_error; }



  __pyx_mstate_global->__pyx_empty_tuple = PyTuple_New(0); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_empty_tuple), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19244; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_empty_bytes), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19245; (void)__pyx_clineno; } goto __pyx_L1_error; }
  __pyx_mstate_global->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_empty_unicode), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19246; (void)__pyx_clineno; } goto __pyx_L1_error; }

  if (__pyx_CyFunction_init(__pyx_m) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19248; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 19257 "yxdfb/Kynaraa.cpp"
  if (__pyx_Generator_init(__pyx_m) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19257; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 19271 "yxdfb/Kynaraa.cpp"
  if (__Pyx_InitConstants() < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19271; (void)__pyx_clineno; } goto __pyx_L1_error; }
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19273; (void)__pyx_clineno; } goto __pyx_L1_error; }



  if (__pyx_module_is_main_Kynaraa) {
    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_s_name_2, __pyx_mstate_global->__pyx_n_s_main) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19278; (void)__pyx_clineno; } goto __pyx_L1_error; }
  }

  {
    PyObject *modules = PyImport_GetModuleDict(); if (__builtin_expect(!!(!modules), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19282; (void)__pyx_clineno; } goto __pyx_L1_error; }
    if (!PyDict_GetItemString(modules, "Kynaraa")) {
      if (__builtin_expect(!!((PyDict_SetItemString(modules, "Kynaraa", __pyx_m) < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19284; (void)__pyx_clineno; } goto __pyx_L1_error; }
    }
  }


  if (__Pyx_InitCachedBuiltins() < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19289; (void)__pyx_clineno; } goto __pyx_L1_error; }

  if (__Pyx_InitCachedConstants() < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19291; (void)__pyx_clineno; } goto __pyx_L1_error; }

  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (__builtin_expect(!!((__Pyx_modinit_type_init_code() < 0)), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19296; (void)__pyx_clineno; } goto __pyx_L1_error; }
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();


  if (__Pyx_patch_abc() < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19302; (void)__pyx_clineno; } goto __pyx_L1_error; }







  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_time, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19310; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_time, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19312; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_json, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19314; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_json, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19316; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_requests, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19318; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_requests, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19320; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_uuid, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19322; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_uuid, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19324; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_random, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19326; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_random, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19328; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_os, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19330; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_os, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19332; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_re, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19334; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_re, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19336; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_base64, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19338; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_base64, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19340; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_s_sys, __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19342; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_sys, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19344; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
# 19354 "yxdfb/Kynaraa.cpp"
  __pyx_t_2 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 3; (void)__pyx_lineno; __pyx_clineno = 19354; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_ThreadPoolExecutor))));
                                             ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_ThreadPoolExecutor)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 3; (void)__pyx_lineno; __pyx_clineno = 19358; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_s_concurrent_futures, __pyx_t_2, 0); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 3; (void)__pyx_lineno; __pyx_clineno = 19359; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_ThreadPoolExecutor); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 3; (void)__pyx_lineno; __pyx_clineno = 19362; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_ThreadPoolExecutor, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 3; (void)__pyx_lineno; __pyx_clineno = 19364; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19375 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 4; (void)__pyx_lineno; __pyx_clineno = 19375; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_BeautifulSoup))));
                                        ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_3))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_BeautifulSoup)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 4; (void)__pyx_lineno; __pyx_clineno = 19379; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_s_bs4, __pyx_t_3, 0); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 4; (void)__pyx_lineno; __pyx_clineno = 19380; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_BeautifulSoup); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 4; (void)__pyx_lineno; __pyx_clineno = 19383; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_BeautifulSoup, __pyx_t_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 4; (void)__pyx_lineno; __pyx_clineno = 19385; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
# 19396 "yxdfb/Kynaraa.cpp"
  __pyx_t_2 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 5; (void)__pyx_lineno; __pyx_clineno = 19396; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_Pws))));
                              ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_Pws)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 5; (void)__pyx_lineno; __pyx_clineno = 19400; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_s_Password, __pyx_t_2, 1); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 5; (void)__pyx_lineno; __pyx_clineno = 19401; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_Pws); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 5; (void)__pyx_lineno; __pyx_clineno = 19404; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_Pws, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 5; (void)__pyx_lineno; __pyx_clineno = 19406; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19417 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 6; (void)__pyx_lineno; __pyx_clineno = 19417; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_Tod))));
                              ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_3))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_Tod)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 6; (void)__pyx_lineno; __pyx_clineno = 19421; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_s_Module, __pyx_t_3, 1); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 6; (void)__pyx_lineno; __pyx_clineno = 19422; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_Tod); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 6; (void)__pyx_lineno; __pyx_clineno = 19425; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_Tod, __pyx_t_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 6; (void)__pyx_lineno; __pyx_clineno = 19427; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
# 19438 "yxdfb/Kynaraa.cpp"
  __pyx_t_2 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 7; (void)__pyx_lineno; __pyx_clineno = 19438; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_Logo))));
                               ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_2))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_Logo)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 7; (void)__pyx_lineno; __pyx_clineno = 19442; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_s_bluid_logo, __pyx_t_2, 0); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 7; (void)__pyx_lineno; __pyx_clineno = 19443; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_s_Logo); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 7; (void)__pyx_lineno; __pyx_clineno = 19446; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_Logo, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 7; (void)__pyx_lineno; __pyx_clineno = 19448; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19459 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = PyList_New(1); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 8; (void)__pyx_lineno; __pyx_clineno = 19459; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_n_s_UserAgent))));
                                    ;
  if ((PyList_SET_ITEM(((PyObject*)((__pyx_t_3))), (0), ((PyObject*)((__pyx_mstate_global->__pyx_n_s_UserAgent)))), (0))) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 8; (void)__pyx_lineno; __pyx_clineno = 19463; (void)__pyx_clineno; } goto __pyx_L1_error; };
  __pyx_t_2 = __Pyx_Import(__pyx_mstate_global->__pyx_n_s_bluid_data, __pyx_t_3, 0); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 8; (void)__pyx_lineno; __pyx_clineno = 19464; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_UserAgent); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 8; (void)__pyx_lineno; __pyx_clineno = 19467; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_UserAgent, __pyx_t_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 8; (void)__pyx_lineno; __pyx_clineno = 19469; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
# 19480 "yxdfb/Kynaraa.cpp"
  (__pyx_t_2) = __Pyx__GetModuleGlobalName(__pyx_mstate_global->__pyx_n_s_requests); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 10; (void)__pyx_lineno; __pyx_clineno = 19480; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_Session); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 10; (void)__pyx_lineno; __pyx_clineno = 19482; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 10; (void)__pyx_lineno; __pyx_clineno = 19485; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_ses, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 10; (void)__pyx_lineno; __pyx_clineno = 19488; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;
# 19498 "yxdfb/Kynaraa.cpp"
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_H, __pyx_mstate_global->__pyx_kp_s_1_92m) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 12; (void)__pyx_lineno; __pyx_clineno = 19498; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 19507 "yxdfb/Kynaraa.cpp"
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_K, __pyx_mstate_global->__pyx_kp_s_1_93m) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 13; (void)__pyx_lineno; __pyx_clineno = 19507; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 19516 "yxdfb/Kynaraa.cpp"
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_N, __pyx_mstate_global->__pyx_kp_s_0m) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 14; (void)__pyx_lineno; __pyx_clineno = 19516; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 19525 "yxdfb/Kynaraa.cpp"
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_R, __pyx_mstate_global->__pyx_kp_s_0_31m) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 15; (void)__pyx_lineno; __pyx_clineno = 19525; (void)__pyx_clineno; } goto __pyx_L1_error; }
# 19534 "yxdfb/Kynaraa.cpp"
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) __null, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_n_s_Kynaa, __pyx_mstate_global->__pyx_n_s_Kynaa, (PyObject *) __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, (PyObject *) __null); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 17; (void)__pyx_lineno; __pyx_clineno = 19534; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
# 19544 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_1__init__, 0, __pyx_mstate_global->__pyx_n_s_Kynaa___init, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__56)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 19544; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_init, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_init)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_init, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 19; (void)__pyx_lineno; __pyx_clineno = 19546; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19556 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_3save_hasil, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_save_hasil, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__58)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 19556; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_save_hasil, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_save_hasil)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_save_hasil, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 24; (void)__pyx_lineno; __pyx_clineno = 19558; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19568 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_5print_proses, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_print_proses, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__60)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 19568; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_print_proses, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_print_proses)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_print_proses, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 28; (void)__pyx_lineno; __pyx_clineno = 19570; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19580 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_7notice, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_notice, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__62)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 19580; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_notice, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_notice)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_notice, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 48; (void)__pyx_lineno; __pyx_clineno = 19582; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19592 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_9abcd, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_abcd, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__64)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 19592; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_abcd, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_abcd)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_abcd, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 59; (void)__pyx_lineno; __pyx_clineno = 19594; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19604 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_11print_proses_api, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_print_proses_api, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__66)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 19604; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_print_proses_api, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_print_proses_api)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_print_proses_api, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 144; (void)__pyx_lineno; __pyx_clineno = 19606; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19616 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_13generate_random_user_agent, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_generate_random_user_agent, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__68)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 165; (void)__pyx_lineno; __pyx_clineno = 19616; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_generate_random_user_agent, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_generate_random_user_agent)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_generate_random_user_agent, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 165; (void)__pyx_lineno; __pyx_clineno = 19618; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19628 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_15graph_v1, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_graph_v1, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__70)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 19628; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_graph_v1, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_graph_v1)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_graph_v1, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 195; (void)__pyx_lineno; __pyx_clineno = 19630; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19640 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_17graph_v2, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_graph_v2, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__72)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 19640; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_graph_v2, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_graph_v2)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_graph_v2, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 270; (void)__pyx_lineno; __pyx_clineno = 19642; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19652 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_7Kynaraa_5Kynaa_19reguller, 0, __pyx_mstate_global->__pyx_n_s_Kynaa_reguller, __null, __pyx_mstate_global->__pyx_n_s_Kynaraa, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj__74)); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 19652; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if ((__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((__pyx_t_2)))), (&PyDict_Type))), 1) ? _PyDict_SetItem_KnownHash(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_reguller, __pyx_t_3, ((PyASCIIObject *) __pyx_mstate_global->__pyx_n_s_reguller)->hash) : PyObject_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_s_reguller, __pyx_t_3)) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 360; (void)__pyx_lineno; __pyx_clineno = 19654; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
# 19664 "yxdfb/Kynaraa.cpp"
  __pyx_t_3 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_mstate_global->__pyx_n_s_Kynaa, __pyx_mstate_global->__pyx_empty_tuple, __pyx_t_2, __null, 0, 0); if (__builtin_expect(!!(!__pyx_t_3), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 17; (void)__pyx_lineno; __pyx_clineno = 19664; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_Kynaa, __pyx_t_3) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 17; (void)__pyx_lineno; __pyx_clineno = 19666; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_3)))); __pyx_t_3 = 0;
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;






  __pyx_t_2 = ((0 <= 8) ? PyDict_New() : _PyDict_NewPresized(0)); if (__builtin_expect(!!(!__pyx_t_2), 0)) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19675; (void)__pyx_clineno; } goto __pyx_L1_error; }
                         ;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_s_test, __pyx_t_2) < 0) { { __pyx_filename = __pyx_f[0]; (void)__pyx_filename; __pyx_lineno = 1; (void)__pyx_lineno; __pyx_clineno = 19677; (void)__pyx_clineno; } goto __pyx_L1_error; }
  Py_DECREF(((PyObject*)((__pyx_t_2)))); __pyx_t_2 = 0;



  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(((PyObject*)((__pyx_t_2))));
  Py_XDECREF(((PyObject*)((__pyx_t_3))));
  if (__pyx_m) {
    if (__pyx_mstate_global->__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init Kynaraa", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }

    do { __typeof__(__pyx_m)* _tmp_op_ptr = &(__pyx_m); __typeof__(__pyx_m) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
# 19701 "yxdfb/Kynaraa.cpp"
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Kynaraa");
  }
  __pyx_L0:;
                               ;

  return (__pyx_m != __null) ? 0 : -1;





}
# 19751 "yxdfb/Kynaraa.cpp"
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(((PyObject*)((tuple))));

    for (i=0; i<n; i++) {
        if (exc_type == ((((PyType_HasFeature((Py_TYPE(((PyObject*)((tuple))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 19756, __PRETTY_FUNCTION__, "PyTuple_Check(tuple)")), ((PyTupleObject*)((tuple))))->ob_item[(i)])) return 1;
    }

    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((tuple))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 19760, __PRETTY_FUNCTION__, "PyTuple_Check(tuple)")), ((PyTupleObject*)((tuple))))->ob_item[(i)]))) return 1;
    }
    return 0;
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;

    PyObject *current_exception = tstate->current_exception;
    if (__builtin_expect(!!(!current_exception), 0)) return 0;
    exc_type = (PyObject*) Py_TYPE(((PyObject*)((current_exception))));
    if (exc_type == err) return 1;
# 19780 "yxdfb/Kynaraa.cpp"
    if (__builtin_expect(!!(PyType_HasFeature((Py_TYPE(((PyObject*)((err))))), ((1UL << 26)))), 0)) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }



    return result;
}




static __inline__ __attribute__ ((__unused__)) void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {

    PyObject *tmp_value;
    ((type == __null || (value != __null && type == (PyObject*) Py_TYPE(((PyObject*)((value)))))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 19797, __PRETTY_FUNCTION__, "type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value))"));
    if (value) {

        if (__builtin_expect(!!(((PyBaseExceptionObject*) value)->traceback != tb), 0))

            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(((PyObject*)((tmp_value))));
    Py_XDECREF(((PyObject*)((type))));
    Py_XDECREF(((PyObject*)((tb))));
# 19821 "yxdfb/Kynaraa.cpp"
}
static __inline__ __attribute__ ((__unused__)) void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {

    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = __null;
    *tb = __null;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(((PyObject*)((exc_value))));
        Py_INCREF(((PyObject*)((*type))));

        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(((PyObject*)((*tb))));



    }
# 19848 "yxdfb/Kynaraa.cpp"
}




static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(((PyObject*)((obj))));
    if (__builtin_expect(!!(tp->tp_getattro), 1))
        return tp->tp_getattro(obj, attr_name);




    return PyObject_GetAttr(obj, attr_name);
}




static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    PyThreadState *__pyx_tstate;
    __pyx_tstate = _PyThreadState_UncheckedGet();
    if (__builtin_expect(!!(__Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, PyExc_AttributeError)), 1))
        __Pyx_ErrRestoreInState(__pyx_tstate, __null, __null, __null);
}

static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;





    PyTypeObject* tp = Py_TYPE(((PyObject*)((obj))));
    if (__builtin_expect(!!(tp->tp_getattro == PyObject_GenericGetAttr), 1)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, __null, 1);
    }

    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (__builtin_expect(!!(!result), 0)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;

}


static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);
    if (__builtin_expect(!!(!result), 0) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,

            "name '%U' is not defined", name);



    }
    return result;
}



static __inline__ __attribute__ ((__unused__)) void __Pyx_copy_object_array(PyObject *const *__restrict__ src, PyObject** __restrict__ dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(((PyObject*)((v))));
    }
}
static __inline__ __attribute__ ((__unused__)) PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(((PyObject*)((__pyx_mstate_global->__pyx_empty_tuple))));
        return __pyx_mstate_global->__pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (__builtin_expect(!!(res == __null), 0)) return __null;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static __inline__ __attribute__ ((__unused__)) PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (__builtin_expect(!!(res == __null), 0)) return __null;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}



static __inline__ __attribute__ ((__unused__)) int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {



    if (s1 == s2) {
        return (equals == 2);
    } else if (Py_IS_TYPE(((PyObject*)(((s1)))), (&PyBytes_Type)) & Py_IS_TYPE(((PyObject*)(((s2)))), (&PyBytes_Type))) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(((PyObject*)((s1))));
        if (length != PyBytes_GET_SIZE(((PyObject*)((s2)))))
            return (equals == 3);
        ps1 = PyBytes_AS_STRING(((PyObject*)((s1))));
        ps2 = PyBytes_AS_STRING(((PyObject*)((s2))));
        if (ps1[0] != ps2[0]) {
            return (equals == 3);
        } else if (length == 1) {
            return (equals == 2);
        } else {
            int result;
# 19973 "yxdfb/Kynaraa.cpp"
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == 2) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == (&_Py_NoneStruct)) & Py_IS_TYPE(((PyObject*)(((s2)))), (&PyBytes_Type))) {
        return (equals == 3);
    } else if ((s2 == (&_Py_NoneStruct)) & Py_IS_TYPE(((PyObject*)(((s1)))), (&PyBytes_Type))) {
        return (equals == 3);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(((PyObject*)((py_result))));
        return result;
    }

}


static __inline__ __attribute__ ((__unused__)) int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {






    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = Py_IS_TYPE(((PyObject*)(((s1)))), (&PyUnicode_Type));
    s2_is_unicode = Py_IS_TYPE(((PyObject*)(((s2)))), (&PyUnicode_Type));
# 20023 "yxdfb/Kynaraa.cpp"
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (__builtin_expect(!!((0) < 0), 0) || __builtin_expect(!!((0) < 0), 0))
            return -1;
        length = PyUnicode_GET_LENGTH(((PyObject*)((s1))));
        if (length != PyUnicode_GET_LENGTH(((PyObject*)((s2))))) {
            goto return_ne;
        }

        {
            Py_hash_t hash1, hash2;

            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;




            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }

        kind = ((int)((void)0, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((s1))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 20048, __PRETTY_FUNCTION__, "PyUnicode_Check(s1)")), ((PyASCIIObject*)((s1))))->state.kind)));
        if (kind != ((int)((void)0, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((s2))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 20049, __PRETTY_FUNCTION__, "PyUnicode_Check(s2)")), ((PyASCIIObject*)((s2))))->state.kind)))) {
            goto return_ne;
        }
        data1 = PyUnicode_DATA(((PyObject*)((s1))));
        data2 = PyUnicode_DATA(((PyObject*)((s2))));
        if (PyUnicode_READ(static_cast<int>(kind), static_cast<const void*>(data1), (0)) != PyUnicode_READ(static_cast<int>(kind), static_cast<const void*>(data2), (0))) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));



            return (equals == 2) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == (&_Py_NoneStruct)) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == (&_Py_NoneStruct)) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);



        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(((PyObject*)((py_result))));
        return result;
    }
return_eq:



    return (equals == 2);
return_ne:



    return (equals == 3);

}



static __inline__ __attribute__ ((__unused__)) PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(((PyObject*)((kwnames))));
    for (i = 0; i < n; i++)
    {
        if (s == ((((PyType_HasFeature((Py_TYPE(((PyObject*)((kwnames))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 20101, __PRETTY_FUNCTION__, "PyTuple_Check(kwnames)")), ((PyTupleObject*)((kwnames))))->ob_item[(i)])) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((kwnames))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 20105, __PRETTY_FUNCTION__, "PyTuple_Check(kwnames)")), ((PyTupleObject*)((kwnames))))->ob_item[(i)]), 2);
        if (__builtin_expect(!!(eq != 0), 0)) {
            if (__builtin_expect(!!(eq < 0), 0)) return __null;
            return kwvalues[i];
        }
    }
    return __null;
}
# 20134 "yxdfb/Kynaraa.cpp"
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" "z" "d positional argument%.1s (%" "z" "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}


static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,

        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);




}


static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = (((3 << 24) | (12 << 16) | (9 << 8) | (0xF << 4) | (0 << 0)) >= 0x030700A1) && __builtin_expect(!!(PyType_HasFeature((Py_TYPE(((PyObject*)((kwds))))), ((1UL << 26)))), 1);
    while (1) {
        Py_XDECREF(((PyObject*)((key)))); key = __null;
        Py_XDECREF(((PyObject*)((value)))); value = __null;
        if (kwds_is_tuple) {
            Py_ssize_t size;

            size = PyTuple_GET_SIZE(((PyObject*)((kwds))));




            if (pos >= size) break;




            key = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((kwds))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 20204, __PRETTY_FUNCTION__, "PyTuple_Check(kwds)")), ((PyTupleObject*)((kwds))))->ob_item[(pos)]);




            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;



        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;




            key = __null;
            value = __null;
            continue;
        }

        Py_INCREF(((PyObject*)((key))));

        Py_INCREF(((PyObject*)((value))));
        name = first_kw_arg;
# 20263 "yxdfb/Kynaraa.cpp"
        if (__builtin_expect(!!(PyType_HasFeature((Py_TYPE(((PyObject*)((key))))), ((1UL << 28)))), 1)) {
            while (*name) {
                int cmp = (

                    (PyUnicode_GET_LENGTH(((PyObject*)((**name)))) != PyUnicode_GET_LENGTH(((PyObject*)((key))))) ? 1 :

                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && __builtin_expect(!!(PyErr_Occurred()), 0)) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;



                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :

                        (PyUnicode_GET_LENGTH(((PyObject*)((**argname)))) != PyUnicode_GET_LENGTH(((PyObject*)((key))))) ? 1 :

                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && __builtin_expect(!!(PyErr_Occurred()), 0)) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (__builtin_expect(!!(PyDict_SetItem(kwds2, key, value)), 0)) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(((PyObject*)((key))));
    Py_XDECREF(((PyObject*)((value))));
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:





    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);

bad:
    Py_XDECREF(((PyObject*)((key))));
    Py_XDECREF(((PyObject*)((value))));
    return -1;
}



static __inline__ __attribute__ ((__unused__)) int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(((PyObject*)((obj))));
    if (__builtin_expect(!!(tp->tp_setattro), 1))
        return tp->tp_setattro(obj, attr_name, value);




    return PyObject_SetAttr(obj, attr_name, value);
}
# 20373 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx__GetModuleGlobalName(PyObject *name)

{
    PyObject *result;


    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);

    if (__builtin_expect(!!(result), 1)) {
        return (Py_INCREF(((PyObject*)((result)))), result);
    } else if (__builtin_expect(!!(PyErr_Occurred()), 0)) {
        return __null;
    }
# 20409 "yxdfb/Kynaraa.cpp"
    return __Pyx_GetBuiltinName(name);
}
# 20537 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(((PyObject*)((func))))->tp_call;
    if (__builtin_expect(!!(!call), 0))
        return PyObject_Call(func, arg, kw);




    if (__builtin_expect(!!(Py_EnterRecursiveCall(" while calling a Python object")), 0))
        return __null;

    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (__builtin_expect(!!(!result), 0) && __builtin_expect(!!(!PyErr_Occurred()), 0)) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}




static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = (((PyCFunctionObject*)(func))->m_ml->ml_meth);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);




    if (__builtin_expect(!!(Py_EnterRecursiveCall(" while calling a Python object")), 0))
        return __null;

    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (__builtin_expect(!!(!result), 0) && __builtin_expect(!!(!PyErr_Occurred()), 0)) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
# 20603 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = _PyVectorcall_NARGS((size_t)(_nargs));

    if (nargs == 0 && kwargs == __null) {
        if (__Pyx_IsAnySubtype2(Py_TYPE(((PyObject*)((func)))), (PyTypeObject *)__pyx_mstate_global->__pyx_CyFunctionType, (PyTypeObject *)&PyCFunction_Type) && __builtin_expect(!!((((PyCFunctionObject*)(func))->m_ml->ml_flags) & 0x0004), 1))
            return __Pyx_PyObject_CallMethO(func, __null);
    }
    else if (nargs == 1 && kwargs == __null) {
        if (__Pyx_IsAnySubtype2(Py_TYPE(((PyObject*)((func)))), (PyTypeObject *)__pyx_mstate_global->__pyx_CyFunctionType, (PyTypeObject *)&PyCFunction_Type) && __builtin_expect(!!((((PyCFunctionObject*)(func))->m_ml->ml_flags) & 0x0008), 1))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
# 20636 "yxdfb/Kynaraa.cpp"
    if (kwargs == __null) {




        vectorcallfunc f = PyVectorcall_Function(func);

        if (f) {
            return f(func, args, (size_t)nargs, __null);
        }






    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);
    }

    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);



}



static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(((PyObject*)((obj))));




    res = _PyType_Lookup(tp, attr_name);
    if (__builtin_expect(!!(res), 1)) {
        descrgetfunc f = Py_TYPE(((PyObject*)((res))))->tp_descr_get;
        if (!f) {
            Py_INCREF(((PyObject*)((res))));
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}




static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == __null || exc_info->exc_value == (&_Py_NoneStruct)) &&
           exc_info->previous_item != __null)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}




static __inline__ __attribute__ ((__unused__)) void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {

    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == __null || exc_value == (&_Py_NoneStruct)) {
        *value = __null;
        *type = __null;
        *tb = __null;
    } else {
        *value = exc_value;
        Py_INCREF(((PyObject*)((*value))));
        *type = (PyObject*) Py_TYPE(((PyObject*)((exc_value))));
        Py_INCREF(((PyObject*)((*type))));
        *tb = PyException_GetTraceback(exc_value);
    }
# 20735 "yxdfb/Kynaraa.cpp"
}
static __inline__ __attribute__ ((__unused__)) void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {

    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(((PyObject*)((tmp_value))));
    Py_XDECREF(((PyObject*)((type))));
    Py_XDECREF(((PyObject*)((tb))));
# 20766 "yxdfb/Kynaraa.cpp"
}




static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)



{
    PyObject *local_type = __null, *local_value, *local_tb = __null;

    PyObject *tmp_type, *tmp_value, *tmp_tb;

    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (__builtin_expect(!!(local_value), 1)) {
        local_type = (PyObject*) Py_TYPE(((PyObject*)((local_value))));
        Py_INCREF(((PyObject*)((local_type))));
        local_tb = PyException_GetTraceback(local_value);
    }
# 20798 "yxdfb/Kynaraa.cpp"
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);

    if (__builtin_expect(!!(tstate->current_exception), 0))





        goto bad;

    if (local_tb) {
        if (__builtin_expect(!!(PyException_SetTraceback(local_value, local_tb) < 0), 0))
            goto bad;
    }

    Py_XINCREF(((PyObject*)((local_tb))));
    Py_XINCREF(((PyObject*)((local_type))));
    Py_XINCREF(((PyObject*)((local_value))));
    *type = local_type;
    *value = local_value;
    *tb = local_tb;


    {
        _PyErr_StackItem *exc_info = tstate->exc_info;

        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = __null;
        tmp_tb = __null;
        Py_XDECREF(((PyObject*)((local_type))));
        Py_XDECREF(((PyObject*)((local_tb))));
# 20838 "yxdfb/Kynaraa.cpp"
    }
# 20847 "yxdfb/Kynaraa.cpp"
    Py_XDECREF(((PyObject*)((tmp_type))));
    Py_XDECREF(((PyObject*)((tmp_value))));
    Py_XDECREF(((PyObject*)((tmp_tb))));



    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(((PyObject*)((local_type))));
    Py_XDECREF(((PyObject*)((local_value))));
    Py_XDECREF(((PyObject*)((local_tb))));
    return -1;
}


static __inline__ __attribute__ ((__unused__)) int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
# 20879 "yxdfb/Kynaraa.cpp"
    if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((op1)))), (&PyLong_Type))), 1)) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = ((Py_ssize_t) (((PyLongObject*)op1)->long_value.lv_tag >> 3));
        const digit* digits = (((PyLongObject*)op1)->long_value.ob_digit);
        if (intval == 0) {
            return (((((PyLongObject*)op1)->long_value.lv_tag & 3) & 1) == 1);
        } else if (intval < 0) {
            if ((!(((((PyLongObject*)op1)->long_value.lv_tag & 3) & 2) != 0)))
                return 0;
            intval = -intval;
        } else {
            if ((((((PyLongObject*)op1)->long_value.lv_tag & 3) & 2) != 0))
                return 0;
        }
        uintval = (unsigned long) intval;
# 20908 "yxdfb/Kynaraa.cpp"
        if (uintval >> (30 * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) ((digit)(((digit)1 << 30) - 1))))
                 | (digits[1] != ((uintval >> (1 * 30)) & (unsigned long) ((digit)(((digit)1 << 30) - 1)))) | (digits[2] != ((uintval >> (2 * 30)) & (unsigned long) ((digit)(((digit)1 << 30) - 1))));
        } else


        if (uintval >> (30 * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) ((digit)(((digit)1 << 30) - 1))))
                 | (digits[1] != ((uintval >> (1 * 30)) & (unsigned long) ((digit)(((digit)1 << 30) - 1))));
        } else

            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) ((digit)(((digit)1 << 30) - 1))));
        return (unequal == 0);
    }

    if (Py_IS_TYPE(((PyObject*)(((op1)))), (&PyFloat_Type))) {
        const long b = intval;



        double a = PyFloat_AS_DOUBLE(((PyObject*)((op1))));

        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, 2));
}


static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {

    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_UNUSED_VAR(max_char);

    result_uval = PyUnicode_New(result_ulength, max_char);
    if (__builtin_expect(!!(!result_uval), 0)) return __null;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(((PyObject*)((result_uval))));







    ((kind_shift == 2 || kind_shift == 1 || kind_shift == 0) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 20958, __PRETTY_FUNCTION__, "kind_shift == 2 || kind_shift == 1 || kind_shift == 0"));
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((value_tuple))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 20964, __PRETTY_FUNCTION__, "PyTuple_Check(value_tuple)")), ((PyTupleObject*)((value_tuple))))->ob_item[(i)]);
        if (__builtin_expect(!!((0)), 0))
            goto bad;
        ulength = PyUnicode_GET_LENGTH(((PyObject*)((uval))));
        if (__builtin_expect(!!(!ulength), 0))
            continue;
        if (__builtin_expect(!!((9223372036854775807L >> kind_shift) - ulength < char_pos), 0))
            goto overflow;
        ukind = ((int)((void)0, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((uval))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 20972, __PRETTY_FUNCTION__, "PyUnicode_Check(uval)")), ((PyASCIIObject*)((uval))))->state.kind)));
        udata = PyUnicode_DATA(((PyObject*)((uval))));
        if (!1 || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {



            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);







        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(((PyObject*)((result_uval))));
    return __null;






}


static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};


static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;

    Py_ssize_t i;

    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (__builtin_expect(!!(!uval), 0)) return __null;
    udata = PyUnicode_DATA(((PyObject*)((uval))));






    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            PyUnicode_WRITE(static_cast<int>(PyUnicode_1BYTE_KIND), ((void*)(udata)), (0), static_cast<Py_UCS4>((Py_UCS4) '-'));
            i++;
        }
        for (; i < uoffset; i++) {
            PyUnicode_WRITE(static_cast<int>(PyUnicode_1BYTE_KIND), ((void*)(udata)), (i), static_cast<Py_UCS4>((Py_UCS4) padding_char));
        }
    }
    for (i=0; i < clength; i++) {
        PyUnicode_WRITE(static_cast<int>(PyUnicode_1BYTE_KIND), ((void*)(udata)), (uoffset+i), static_cast<Py_UCS4>((Py_UCS4) chars[i]));
    }
# 21104 "yxdfb/Kynaraa.cpp"
    return uval;
}


static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;




    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;



    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            ((0) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21153, __PRETTY_FUNCTION__, "0"));
            break;
        }
    } while (__builtin_expect(!!(remaining != 0), 0));
    ((!last_one_off || *dpos == '0') ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21157, __PRETTY_FUNCTION__, "!last_one_off || *dpos == '0'"));
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}


static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {__null, arg};
    return __Pyx_PyObject_FastCallDict(func, args+1, (size_t)(1 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1))), __null);
}


static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {__null, __null};
    return __Pyx_PyObject_FastCallDict(func, arg + 1, (size_t)(0 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1))), __null);
}


static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (__builtin_expect(!!(!j), 0)) return __null;
    r = PyObject_GetItem(o, j);
    Py_DECREF(((PyObject*)((j))));
    return r;
}
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                                                int wraparound,
                                                                                int boundscheck) {

    Py_ssize_t wrapped_i = i;
    if (wraparound & __builtin_expect(!!(i < 0), 0)) {
        wrapped_i += PyList_GET_SIZE(((PyObject*)((o))));
    }
    if ((!boundscheck) || __builtin_expect(!!(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(((PyObject*)((o)))))), 1)) {
        PyObject *r = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((o))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21209, __PRETTY_FUNCTION__, "PyList_Check(o)")), ((PyListObject*)((o))))->ob_item[(wrapped_i)]);
        Py_INCREF(((PyObject*)((r))));
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));



}
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                                                int wraparound,
                                                                                int boundscheck) {

    Py_ssize_t wrapped_i = i;
    if (wraparound & __builtin_expect(!!(i < 0), 0)) {
        wrapped_i += PyTuple_GET_SIZE(((PyObject*)((o))));
    }
    if ((!boundscheck) || __builtin_expect(!!(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(((PyObject*)((o)))))), 1)) {
        PyObject *r = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((o))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21227, __PRETTY_FUNCTION__, "PyTuple_Check(o)")), ((PyTupleObject*)((o))))->ob_item[(wrapped_i)]);
        Py_INCREF(((PyObject*)((r))));
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));



}
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                                       int wraparound,
                                                                       int boundscheck) {

    if (is_list || Py_IS_TYPE(((PyObject*)(((o)))), (&PyList_Type))) {
        Py_ssize_t n = ((!wraparound) | __builtin_expect(!!(i >= 0), 1)) ? i : i + PyList_GET_SIZE(((PyObject*)((o))));
        if ((!boundscheck) || (__builtin_expect(!!(__Pyx_is_valid_index(n, PyList_GET_SIZE(((PyObject*)((o)))))), 1))) {
            PyObject *r = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((o))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21243, __PRETTY_FUNCTION__, "PyList_Check(o)")), ((PyListObject*)((o))))->ob_item[(n)]);
            Py_INCREF(((PyObject*)((r))));
            return r;
        }
    }
    else if (Py_IS_TYPE(((PyObject*)(((o)))), (&PyTuple_Type))) {
        Py_ssize_t n = ((!wraparound) | __builtin_expect(!!(i >= 0), 1)) ? i : i + PyTuple_GET_SIZE(((PyObject*)((o))));
        if ((!boundscheck) || __builtin_expect(!!(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(((PyObject*)((o)))))), 1)) {
            PyObject *r = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((o))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21251, __PRETTY_FUNCTION__, "PyTuple_Check(o)")), ((PyTupleObject*)((o))))->ob_item[(n)]);
            Py_INCREF(((PyObject*)((r))));
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(((PyObject*)((o))))->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(((PyObject*)((o))))->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyLong_FromSsize_t(i);
            if (__builtin_expect(!!(!key), 0)) return __null;
            r = mm->mp_subscript(o, key);
            Py_DECREF(((PyObject*)((key))));
            return r;
        }
        if (__builtin_expect(!!(sm && sm->sq_item), 1)) {
            if (wraparound && __builtin_expect(!!(i < 0), 0) && __builtin_expect(!!(sm->sq_length), 1)) {
                Py_ssize_t l = sm->sq_length(o);
                if (__builtin_expect(!!(l >= 0), 1)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return __null;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }





    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
}


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}


static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    PyThreadState *__pyx_tstate;



    CYTHON_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (__builtin_expect(!!(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration)), 1)) {





            return;
    }
    __pyx_tstate = _PyThreadState_UncheckedGet();
    __Pyx__GetException(__pyx_tstate, &exc, &val, &tb);
    Py_XDECREF(((PyObject*)((exc))));
    Py_XDECREF(((PyObject*)((val))));
    Py_XDECREF(((PyObject*)((tb))));
    PyErr_SetString(PyExc_RuntimeError,




        "generator raised StopIteration");
}
# 21364 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    PyThreadState *__pyx_tstate;
    __pyx_tstate = _PyThreadState_UncheckedGet();
    exc_type = (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(((PyObject*)((__pyx_tstate->current_exception)))) : (PyObject*) __null);
    if (__builtin_expect(!!(exc_type), 0)) {
        if (__builtin_expect(!!(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)), 0))
            return -1;
        __Pyx_ErrRestoreInState(__pyx_tstate, __null, __null, __null);
        return 0;
    }
    return 0;
}


static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;

    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(((PyObject*)((obj))));
    PyObject *descr;
    descrgetfunc f = __null;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    ((*method == __null) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21388, __PRETTY_FUNCTION__, "*method == NULL"));
    if (__builtin_expect(!!(tp->tp_getattro != PyObject_GenericGetAttr), 0)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (__builtin_expect(!!(tp->tp_dict == __null), 0) && __builtin_expect(!!(PyType_Ready(tp) < 0), 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (__builtin_expect(!!(descr != __null), 1)) {
        Py_INCREF(((PyObject*)((descr))));

        if ((((((PyTypeObject *)Py_TYPE(((PyObject*)((descr)))))->tp_flags) & ((1UL << 17))) != 0))
# 21414 "yxdfb/Kynaraa.cpp"
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(((PyObject*)((descr))))->tp_descr_get;
            if (f != __null && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(((PyObject*)((obj)))));
                Py_DECREF(((PyObject*)((descr))));
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != __null && (dict = *dictptr) != __null) {
        Py_INCREF(((PyObject*)((dict))));
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != __null) {
            Py_INCREF(((PyObject*)((attr))));
            Py_DECREF(((PyObject*)((dict))));
            Py_XDECREF(((PyObject*)((descr))));
            goto try_unpack;
        }
        Py_DECREF(((PyObject*)((dict))));
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != __null) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(((PyObject*)((obj)))));
        Py_DECREF(((PyObject*)((descr))));
        goto try_unpack;
    }
    if (__builtin_expect(!!(descr != __null), 1)) {
        *method = descr;
        return 0;
    }
    type_name = ((tp)->tp_name);
    PyErr_Format(PyExc_AttributeError,

                 "'" "%.200s" "' object has no attribute '%U'",
                 type_name, name);




                                    ;
    return 0;




try_unpack:

    if (__builtin_expect(!!(attr), 1) && Py_IS_TYPE(((PyObject*)(((attr)))), (&PyMethod_Type)) && __builtin_expect(!!(PyMethod_GET_SELF(((PyObject*)((attr)))) == obj), 1)) {
        PyObject *function = PyMethod_GET_FUNCTION(((PyObject*)((attr))));
        Py_INCREF(((PyObject*)((function))));
        Py_DECREF(((PyObject*)((attr))));
        *method = function;
        return 1;
    }

    *method = attr;
    return 0;
}


static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = __null, *result = __null;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (__builtin_expect(!!(is_method), 1)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(((PyObject*)((method))));
        return result;
    }
    if (__builtin_expect(!!(!method), 0)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(((PyObject*)((method))));
bad:
    return result;
}


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" "z" "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" "z" "d)", expected);
}


static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (__builtin_expect(!!(retval), 0)) {
        Py_DECREF(((PyObject*)((retval))));
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}


static __inline__ __attribute__ ((__unused__)) void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}


static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == (&_Py_NoneStruct)) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(((PyObject*)((t)))) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(((PyObject*)((t)))));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}


static __inline__ __attribute__ ((__unused__)) int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = __null, *value2 = __null;




    value1 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((tuple))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21542, __PRETTY_FUNCTION__, "PyTuple_Check(tuple)")), ((PyTupleObject*)((tuple))))->ob_item[(0)]); Py_INCREF(((PyObject*)((value1))));
    value2 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((tuple))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21543, __PRETTY_FUNCTION__, "PyTuple_Check(tuple)")), ((PyTupleObject*)((tuple))))->ob_item[(1)]); Py_INCREF(((PyObject*)((value2))));

    if (decref_tuple) {
        Py_DECREF(((PyObject*)((tuple))));
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;







}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = __null, *value2 = __null, *iter = __null;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (__builtin_expect(!!(!iter), 0)) goto bad;
    if (decref_tuple) { Py_DECREF(((PyObject*)((tuple)))); tuple = __null; }
    iternext = (Py_TYPE(((PyObject*)((iter))))->tp_iternext);
    value1 = iternext(iter); if (__builtin_expect(!!(!value1), 0)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (__builtin_expect(!!(!value2), 0)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && __builtin_expect(!!(__Pyx_IternextUnpackEndCheck(iternext(iter), 2)), 0)) goto bad;
    Py_DECREF(((PyObject*)((iter))));
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(((PyObject*)((iter))));
    Py_XDECREF(((PyObject*)((value1))));
    Py_XDECREF(((PyObject*)((value2))));
    if (decref_tuple) { Py_XDECREF(((PyObject*)((tuple)))); }
    return -1;
}





static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || __builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((iterable)))), (&PyDict_Type))), 1);
    *p_source_is_dict = is_dict;
    if (is_dict) {

        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(((PyObject*)((iterable))));
        return iterable;
# 21617 "yxdfb/Kynaraa.cpp"
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return __null;

        if (Py_IS_TYPE(((PyObject*)(((iterable)))), (&PyTuple_Type)) || Py_IS_TYPE(((PyObject*)(((iterable)))), (&PyList_Type)))
            return iterable;

        iter = PyObject_GetIter(iterable);
        Py_DECREF(((PyObject*)((iterable))));
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_dict_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length, Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;

    if (source_is_dict) {
        PyObject *key, *value;
        if (__builtin_expect(!!(orig_length != PyDict_Size(iter_obj)), 0)) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (__builtin_expect(!!(!PyDict_Next(iter_obj, ppos, &key, &value)), 0)) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (__builtin_expect(!!(!tuple), 0)) {
                return -1;
            }
            Py_INCREF(((PyObject*)((key))));
            Py_INCREF(((PyObject*)((value))));
            PyTuple_SET_ITEM(((PyObject*)((tuple))), (0), ((PyObject*)((key))));
            PyTuple_SET_ITEM(((PyObject*)((tuple))), (1), ((PyObject*)((value))));
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(((PyObject*)((key))));
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(((PyObject*)((value))));
                *pvalue = value;
            }
        }
        return 1;
    } else if (Py_IS_TYPE(((PyObject*)(((iter_obj)))), (&PyTuple_Type))) {
        Py_ssize_t pos = *ppos;
        if (__builtin_expect(!!(pos >= PyTuple_GET_SIZE(((PyObject*)((iter_obj))))), 0)) return 0;
        *ppos = pos + 1;
        next_item = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((iter_obj))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21673, __PRETTY_FUNCTION__, "PyTuple_Check(iter_obj)")), ((PyTupleObject*)((iter_obj))))->ob_item[(pos)]);
        Py_INCREF(((PyObject*)((next_item))));
    } else if (Py_IS_TYPE(((PyObject*)(((iter_obj)))), (&PyList_Type))) {
        Py_ssize_t pos = *ppos;
        if (__builtin_expect(!!(pos >= PyList_GET_SIZE(((PyObject*)((iter_obj))))), 0)) return 0;
        *ppos = pos + 1;
        next_item = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((iter_obj))))), ((1UL << 25)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21679, __PRETTY_FUNCTION__, "PyList_Check(iter_obj)")), ((PyListObject*)((iter_obj))))->ob_item[(pos)]);
        Py_INCREF(((PyObject*)((next_item))));
    } else

    {
        next_item = PyIter_Next(iter_obj);
        if (__builtin_expect(!!(!next_item), 0)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if ((__builtin_expect(!!(source_is_dict || PyType_HasFeature((Py_TYPE(((PyObject*)((next_item))))), ((1UL << 26)))), 1) ? (__builtin_expect(!!(source_is_dict || PyTuple_GET_SIZE(((PyObject*)((next_item)))) == 2), 1) ? __Pyx_unpack_tuple2_exact(next_item, pkey, pvalue, 1) : (__Pyx_UnpackTupleError(next_item, 2), -1)) : __Pyx_unpack_tuple2_generic(next_item, pkey, pvalue, source_is_dict, 1)))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}



static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
# 21721 "yxdfb/Kynaraa.cpp"
    if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((op1)))), (&PyLong_Type))), 1)) {
        const long b = intval;
        long a, x;

        const long long llb = intval;
        long long lla, llx;

        if (__builtin_expect(!!(((((PyLongObject*)op1)->long_value.lv_tag & 3) & 1)), 0)) {
            return (Py_INCREF(((PyObject*)((op2)))), op2);
        }
        if (__builtin_expect(!!(_PyLong_IsCompact((PyLongObject*) op1)), 1)) {
            a = _PyLong_CompactValue((PyLongObject*) op1);
        } else {
            const digit* digits = (((PyLongObject*)op1)->long_value.ob_digit);
            const Py_ssize_t size = ((1 - (Py_ssize_t) (((PyLongObject*)op1)->long_value.lv_tag & 3)) * ((Py_ssize_t) (((PyLongObject*)op1)->long_value.lv_tag >> 3)));
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * 30) {
                        a = -(long) (((((unsigned long)digits[1]) << 30) | (unsigned long)digits[0]));
                        break;

                    } else if (8 * sizeof(long long) - 1 > 2 * 30) {
                        lla = -(long long) (((((unsigned long long)digits[1]) << 30) | (unsigned long long)digits[0]));
                        goto long_long;

                    }
                    [[fallthrough]];
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * 30) {
                        a = (long) (((((unsigned long)digits[1]) << 30) | (unsigned long)digits[0]));
                        break;

                    } else if (8 * sizeof(long long) - 1 > 2 * 30) {
                        lla = (long long) (((((unsigned long long)digits[1]) << 30) | (unsigned long long)digits[0]));
                        goto long_long;

                    }
                    [[fallthrough]];
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * 30) {
                        a = -(long) (((((((unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0]));
                        break;

                    } else if (8 * sizeof(long long) - 1 > 3 * 30) {
                        lla = -(long long) (((((((unsigned long long)digits[2]) << 30) | (unsigned long long)digits[1]) << 30) | (unsigned long long)digits[0]));
                        goto long_long;

                    }
                    [[fallthrough]];
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * 30) {
                        a = (long) (((((((unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0]));
                        break;

                    } else if (8 * sizeof(long long) - 1 > 3 * 30) {
                        lla = (long long) (((((((unsigned long long)digits[2]) << 30) | (unsigned long long)digits[1]) << 30) | (unsigned long long)digits[0]));
                        goto long_long;

                    }
                    [[fallthrough]];
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * 30) {
                        a = -(long) (((((((((unsigned long)digits[3]) << 30) | (unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0]));
                        break;

                    } else if (8 * sizeof(long long) - 1 > 4 * 30) {
                        lla = -(long long) (((((((((unsigned long long)digits[3]) << 30) | (unsigned long long)digits[2]) << 30) | (unsigned long long)digits[1]) << 30) | (unsigned long long)digits[0]));
                        goto long_long;

                    }
                    [[fallthrough]];
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * 30) {
                        a = (long) (((((((((unsigned long)digits[3]) << 30) | (unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0]));
                        break;

                    } else if (8 * sizeof(long long) - 1 > 4 * 30) {
                        lla = (long long) (((((((((unsigned long long)digits[3]) << 30) | (unsigned long long)digits[2]) << 30) | (unsigned long long)digits[1]) << 30) | (unsigned long long)digits[0]));
                        goto long_long;

                    }
                    [[fallthrough]];
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);

        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);



    }

    if (Py_IS_TYPE(((PyObject*)(((op1)))), (&PyFloat_Type))) {
        const long b = intval;



        double a = PyFloat_AS_DOUBLE(((PyObject*)((op1))));

            double result;


            result = ((double)a) + (double)b;

            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}



static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {__null, arg1, arg2};
    return __Pyx_PyObject_FastCallDict(function, args+1, (size_t)(2 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1))), __null);
}
# 21849 "yxdfb/Kynaraa.cpp"
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {

    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1)), __null);
# 21867 "yxdfb/Kynaraa.cpp"
}


static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    (void) __Pyx_PyObject_CallMethod1;



    return _PyBytes_Join(sep, values);



}



static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(((PyObject*)((unicode)))) != 1)
        return 0;
    if (!Py_IS_TYPE(((PyObject*)(((unicode)))), (&PyUnicode_Type)))
        return 0;
    if (PyUnicode_CHECK_INTERNED(((PyObject*)((unicode)))))
        return 0;
    return 1;
}
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right



    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (__builtin_expect(!!((0) == -1), 0))
        return __null;
    if (__builtin_expect(!!((0) == -1), 0))
        return __null;
    left_len = PyUnicode_GET_LENGTH(((PyObject*)((left))));
    if (left_len == 0) {
        Py_INCREF(((PyObject*)((right))));
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(((PyObject*)((right))));
    if (right_len == 0) {
        Py_INCREF(((PyObject*)((left))));
        return left;
    }
    if (__builtin_expect(!!(left_len > 9223372036854775807L - right_len), 0)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return __null;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && Py_IS_TYPE(((PyObject*)(((right)))), (&PyUnicode_Type))
            && ((void)0, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((right))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21923, __PRETTY_FUNCTION__, "PyUnicode_Check(right)")), ((PyASCIIObject*)((right))))->state.kind)) <= ((void)0, ((((PyType_HasFeature((Py_TYPE(((PyObject*)((left))))), ((1UL << 28)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21923, __PRETTY_FUNCTION__, "PyUnicode_Check(left)")), ((PyASCIIObject*)((left))))->state.kind))
            && !(PyUnicode_IS_ASCII(((PyObject*)((left)))) && !PyUnicode_IS_ASCII(((PyObject*)((right)))))) {
        int ret;
                              ;
        ret = PyUnicode_Resize(p_left, new_len);
                             ;
        if (__builtin_expect(!!(ret != 0), 0))
            return __null;



        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);

        Py_INCREF(((PyObject*)((*p_left))));
                              ;
        return *p_left;
    } else {
        return PyUnicode_Concat(left, right);
    }
  }




static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = ((a)->tp_base);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (__builtin_expect(!!(mro), 1)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(((PyObject*)((mro))));
        for (i = 0; i < n; i++) {
            if (((((PyType_HasFeature((Py_TYPE(((PyObject*)((mro))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21963, __PRETTY_FUNCTION__, "PyTuple_Check(mro)")), ((PyTupleObject*)((mro))))->ob_item[(i)]) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (__builtin_expect(!!(mro), 1)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(((PyObject*)((mro))));
        for (i = 0; i < n; i++) {
            PyObject *base = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((mro))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 21978, __PRETTY_FUNCTION__, "PyTuple_Check(mro)")), ((PyTupleObject*)((mro))))->ob_item[(i)]);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
# 22009 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}

static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    (((PyType_Check(((PyObject*)(((exc_type))))) && PyType_HasFeature(((PyTypeObject*)(exc_type)), ((1UL << 30))))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22019, __PRETTY_FUNCTION__, "PyExceptionClass_Check(exc_type)"));
    n = PyTuple_GET_SIZE(((PyObject*)((tuple))));

    for (i=0; i<n; i++) {
        if (exc_type == ((((PyType_HasFeature((Py_TYPE(((PyObject*)((tuple))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22023, __PRETTY_FUNCTION__, "PyTuple_Check(tuple)")), ((PyTupleObject*)((tuple))))->ob_item[(i)])) return 1;
    }

    for (i=0; i<n; i++) {
        PyObject *t = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((tuple))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22027, __PRETTY_FUNCTION__, "PyTuple_Check(tuple)")), ((PyTupleObject*)((tuple))))->ob_item[(i)]);



        if (__builtin_expect(!!((PyType_Check(((PyObject*)(((t))))) && PyType_HasFeature(((PyTypeObject*)(t)), ((1UL << 30))))), 1)) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, __null, t)) return 1;
        } else {
        }
    }
    return 0;
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (__builtin_expect(!!(err == exc_type), 1)) return 1;
    if (__builtin_expect(!!((PyType_Check(((PyObject*)(((err))))) && PyType_HasFeature(((PyTypeObject*)(err)), ((1UL << 30))))), 1)) {
        if (__builtin_expect(!!((PyType_Check(((PyObject*)(((exc_type))))) && PyType_HasFeature(((PyTypeObject*)(exc_type)), ((1UL << 30))))), 1)) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, __null, exc_type);
        } else if (__builtin_expect(!!(PyType_HasFeature((Py_TYPE(((PyObject*)((exc_type))))), ((1UL << 26)))), 1)) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    (((PyType_Check(((PyObject*)(((exc_type1))))) && PyType_HasFeature(((PyTypeObject*)(exc_type1)), ((1UL << 30))))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22051, __PRETTY_FUNCTION__, "PyExceptionClass_Check(exc_type1)"));
    (((PyType_Check(((PyObject*)(((exc_type2))))) && PyType_HasFeature(((PyTypeObject*)(exc_type2)), ((1UL << 30))))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22052, __PRETTY_FUNCTION__, "PyExceptionClass_Check(exc_type2)"));
    if (__builtin_expect(!!(err == exc_type1 || err == exc_type2), 1)) return 1;
    if (__builtin_expect(!!((PyType_Check(((PyObject*)(((err))))) && PyType_HasFeature(((PyTypeObject*)(err)), ((1UL << 30))))), 1)) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}




static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (__builtin_expect(!!(!value), 0)) {
        if (!PyErr_Occurred()) {
            if (__builtin_expect(!!(PyType_HasFeature((Py_TYPE(((PyObject*)((key))))), ((1UL << 26)))), 0)) {
                PyObject* args = PyTuple_Pack(1, key);
                if (__builtin_expect(!!(args), 1)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(((PyObject*)((args))));
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return __null;
    }
    Py_INCREF(((PyObject*)((value))));
    return value;
}
# 22160 "yxdfb/Kynaraa.cpp"
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;

    n = PyTuple_GET_SIZE(((PyObject*)((bases))));




    for (i = 1; i < n; i++)
    {




        PyObject *b0 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((bases))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22174, __PRETTY_FUNCTION__, "PyTuple_Check(bases)")), ((PyTupleObject*)((bases))))->ob_item[(i)]);




        PyTypeObject *b;
# 22191 "yxdfb/Kynaraa.cpp"
        b = (PyTypeObject*) b0;
        if (!(((((PyTypeObject *)b)->tp_flags) & ((1UL << 9))) != 0))
        {
            __Pyx_TypeName b_name = ((b)->tp_name);
            PyErr_Format(PyExc_TypeError,
                "base class '" "%.200s" "' is not a heap type", b_name);
                                         ;



            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;

            b_dictoffset = b->tp_dictoffset;







            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = ((b)->tp_name);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" "%.200s" "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                                                 ;
                }






                return -1;
            }
        }



    }
    return 0;
}



static int __Pyx_PyType_Ready(PyTypeObject *t) {







    int r;
    PyObject *bases = ((t)->tp_bases);
    if (bases && __builtin_expect(!!(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1), 0))
        return -1;

    {
        int gc_was_enabled;

        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
# 22289 "yxdfb/Kynaraa.cpp"
        t->tp_flags |= (1UL << 9);

        t->tp_flags |= (1UL << 8);




    r = PyType_Ready(t);

        t->tp_flags &= ~(1UL << 9);

        if (gc_was_enabled)
            PyGC_Enable();
# 22319 "yxdfb/Kynaraa.cpp"
    }

    return r;

}
# 22368 "yxdfb/Kynaraa.cpp"
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
# 22384 "yxdfb/Kynaraa.cpp"
    empty_dict = PyDict_New();
    if (__builtin_expect(!!(!empty_dict), 0))
        goto bad;
    {

        if (level == -1) {
            if (strchr("Kynaraa", '.') != __null) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);
                if (__builtin_expect(!!(!module), 0)) {
                    if (__builtin_expect(!!(!PyErr_ExceptionMatches(PyExc_ImportError)), 0))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }

        if (!module) {
# 22411 "yxdfb/Kynaraa.cpp"
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);

        }
    }
bad:
    Py_XDECREF(((PyObject*)((empty_dict))));
    Py_XDECREF(((PyObject*)((empty_list))));



    return module;
}



static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = __null, *slice = __null, *sep = __null;
    if (__builtin_expect(!!(PyErr_Occurred()), 0)) {
        PyErr_Clear();
    }
    if (__builtin_expect(!!(PyTuple_GET_SIZE(((PyObject*)((parts_tuple)))) == count), 1)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (__builtin_expect(!!(!slice), 0))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (__builtin_expect(!!(!sep), 0))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(





        PyExc_ModuleNotFoundError,



        "No module named '%U'", partial_name);

bad:
    Py_XDECREF(((PyObject*)((sep))));
    Py_XDECREF(((PyObject*)((slice))));
    Py_XDECREF(((PyObject*)((partial_name))));
    return __null;
}


static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;







    imported_module = PyImport_GetModule(name);

    return imported_module;
}


static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(((PyObject*)((parts_tuple))));
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;

        part = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((parts_tuple))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22484, __PRETTY_FUNCTION__, "PyTuple_Check(parts_tuple)")), ((PyTupleObject*)((parts_tuple))))->ob_item[(i)]);



        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);



        Py_DECREF(((PyObject*)((module))));
        module = submodule;
    }
    if (__builtin_expect(!!(!module), 0)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}

static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
# 22514 "yxdfb/Kynaraa.cpp"
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, __null, 0);
    if (!parts_tuple || __builtin_expect(!!(!module), 0))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (__builtin_expect(!!(imported_module), 1)) {
        Py_DECREF(((PyObject*)((module))));
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);

}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {

    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (__builtin_expect(!!(module), 1)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_s_spec);
        if (__builtin_expect(!!(spec), 1)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_s_initializing);
            if (__builtin_expect(!!(!unsafe || !__Pyx_PyObject_IsTrue(unsafe)), 1)) {
                Py_DECREF(((PyObject*)((spec))));
                spec = __null;
            }
            Py_XDECREF(((PyObject*)((unsafe))));
        }
        if (__builtin_expect(!!(!spec), 1)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(((PyObject*)((spec))));
        Py_DECREF(((PyObject*)((module))));
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }

    return __Pyx__ImportDottedModule(name, parts_tuple);
}


static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (__builtin_expect(!!(!value), 0) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (__builtin_expect(!!(!module_name_str), 0)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (__builtin_expect(!!(!module_name), 0)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_mstate_global->__pyx_kp_u__24);
        if (__builtin_expect(!!(!module_dot), 0)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (__builtin_expect(!!(!full_name), 0)) { goto modbad; }
# 22578 "yxdfb/Kynaraa.cpp"
        value = PyImport_GetModule(full_name);

      modbad:
        Py_XDECREF(((PyObject*)((full_name))));
        Py_XDECREF(((PyObject*)((module_dot))));
        Py_XDECREF(((PyObject*)((module_name))));
    }
    if (__builtin_expect(!!(!value), 0)) {
        PyErr_Format(PyExc_ImportError,



            "cannot import name %S", name);

    }
    return value;
}


static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) "_cython_" "3_0_12" "");
}


static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(((PyObject*)((cached_type))))) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = __null;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return __null;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(((PyObject*)((type))));
    cached_type = type;
done:
    Py_DECREF(((PyObject*)((abi_module))));
    return cached_type;
bad:
    Py_XDECREF(((PyObject*)((cached_type))));
    cached_type = __null;
    goto done;
}
# 22704 "yxdfb/Kynaraa.cpp"
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = __null;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(((PyObject*)((kw))));
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (__builtin_expect(!!(newargs == __null), 0)) {
        PyErr_NoMemory();
        return __null;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (__builtin_expect(!!(kwnames == __null), 0)) {
        PyMem_Free(newargs);
        return __null;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = (1UL << 28);
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(((PyObject*)((key))))->tp_flags;
        Py_INCREF(((PyObject*)((key))));
        Py_INCREF(((PyObject*)((value))));
        PyTuple_SET_ITEM(((PyObject*)((kwnames))), (i), ((PyObject*)((key))));
        kwvalues[i] = value;
        i++;
    }
    if (__builtin_expect(!!(!keys_are_strings), 0)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(((PyObject*)((kwnames))));
    for (i = 0; i < nkw; i++)
        Py_DECREF(((PyObject*)((kwvalues[i]))));
    PyMem_Free(newargs);
    return res;
}
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (__builtin_expect(!!(kw == __null), 1) || PyDict_GET_SIZE(((PyObject*)((kw)))) == 0) {
        return vc(func, args, nargs, __null);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
# 22769 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_IsAnySubtype2(Py_TYPE(((PyObject*)((func)))), (PyTypeObject *)__pyx_mstate_global->__pyx_CyFunctionType, (PyTypeObject *)&PyCFunction_Type) && (((PyCFunctionObject*)(func))->m_ml->ml_meth) == (PyCFunction) cfunc;
}

static __inline__ __attribute__ ((__unused__)) void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {





    do { PyObject *tmp = (PyObject *) ((PyCMethodObject *) (f))->mm_class; ((PyCMethodObject *) (f))->mm_class = (PyTypeObject*)((classobj) ? (Py_INCREF(((PyObject*)((classobj)))), classobj) : __null); Py_XDECREF(((PyObject*)((tmp)))); } while (0);



}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (__builtin_expect(!!(op->func_doc == __null), 0)) {




        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {

            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);



            if (__builtin_expect(!!(op->func_doc == __null), 0))
                return __null;
        } else {
            Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
            return (&_Py_NoneStruct);
        }

    }
    Py_INCREF(((PyObject*)((op->func_doc))));
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == __null) {
        value = (&_Py_NoneStruct);
    }
    Py_INCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) op->func_doc; op->func_doc = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (__builtin_expect(!!(op->func_name == __null), 0)) {



        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);



        if (__builtin_expect(!!(op->func_name == __null), 0))
            return __null;
    }
    Py_INCREF(((PyObject*)((op->func_name))));
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);

    if (__builtin_expect(!!(value == __null || !PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 28)))), 0))



    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) op->func_name; op->func_name = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(((PyObject*)((op->func_qualname))));
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);

    if (__builtin_expect(!!(value == __null || !PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 28)))), 0))



    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) op->func_qualname; op->func_qualname = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (__builtin_expect(!!(op->func_dict == __null), 0)) {
        op->func_dict = PyDict_New();
        if (__builtin_expect(!!(op->func_dict == __null), 0))
            return __null;
    }
    Py_INCREF(((PyObject*)((op->func_dict))));
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (__builtin_expect(!!(value == __null), 0)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (__builtin_expect(!!(!PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 29)))), 0)) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) op->func_dict; op->func_dict = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(((PyObject*)((op->func_globals))));
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
    return (&_Py_NoneStruct);
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : (&_Py_NoneStruct);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(((PyObject*)((result))));
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (__builtin_expect(!!(!res), 0))
        return -1;

    op->defaults_tuple = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((res))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22942, __PRETTY_FUNCTION__, "PyTuple_Check(res)")), ((PyTupleObject*)((res))))->ob_item[(0)]);
    Py_INCREF(((PyObject*)((op->defaults_tuple))));
    op->defaults_kwdict = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((res))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 22944, __PRETTY_FUNCTION__, "PyTuple_Check(res)")), ((PyTupleObject*)((res))))->ob_item[(1)]);
    Py_INCREF(((PyObject*)((op->defaults_kwdict))));
# 22954 "yxdfb/Kynaraa.cpp"
    Py_DECREF(((PyObject*)((res))));
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = (&_Py_NoneStruct);
    } else if (__builtin_expect(!!(value != (&_Py_NoneStruct) && !PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 26)))), 0)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) op->defaults_tuple; op->defaults_tuple = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (__builtin_expect(!!(!result), 0)) {
        if (op->defaults_getter) {
            if (__builtin_expect(!!(__Pyx_CyFunction_init_defaults(op) < 0), 0)) return __null;
            result = op->defaults_tuple;
        } else {
            result = (&_Py_NoneStruct);
        }
    }
    Py_INCREF(((PyObject*)((result))));
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = (&_Py_NoneStruct);
    } else if (__builtin_expect(!!(value != (&_Py_NoneStruct) && !PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 29)))), 0)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) op->defaults_kwdict; op->defaults_kwdict = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (__builtin_expect(!!(!result), 0)) {
        if (op->defaults_getter) {
            if (__builtin_expect(!!(__Pyx_CyFunction_init_defaults(op) < 0), 0)) return __null;
            result = op->defaults_kwdict;
        } else {
            result = (&_Py_NoneStruct);
        }
    }
    Py_INCREF(((PyObject*)((result))));
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == (&_Py_NoneStruct)) {
        value = __null;
    } else if (__builtin_expect(!!(!PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 29)))), 0)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) op->func_annotations; op->func_annotations = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (__builtin_expect(!!(!result), 0)) {
        result = PyDict_New();
        if (__builtin_expect(!!(!result), 0)) return __null;
        op->func_annotations = result;
    }
    Py_INCREF(((PyObject*)((result))));
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return (Py_INCREF(((PyObject*)((op->func_is_coroutine)))), op->func_is_coroutine);
    }
    is_coroutine = op->flags & 0x08;

    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_mstate_global->__pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (__builtin_expect(!!(!fromlist), 0)) return __null;
        Py_INCREF(((PyObject*)((marker))));

        PyList_SET_ITEM(((PyObject*)((fromlist))), (0), ((PyObject*)((marker))));







        module = PyImport_ImportModuleLevelObject(__pyx_mstate_global->__pyx_n_s_asyncio_coroutines, __null, __null, fromlist, 0);
        Py_DECREF(((PyObject*)((fromlist))));
        if (__builtin_expect(!!(!module), 0)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(((PyObject*)((module))));
        if (__builtin_expect(!!(op->func_is_coroutine), 1)) {
            return (Py_INCREF(((PyObject*)((op->func_is_coroutine)))), op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }

    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return (Py_INCREF(((PyObject*)((op->func_is_coroutine)))), op->func_is_coroutine);
}
# 23095 "yxdfb/Kynaraa.cpp"
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},



    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {

    {(char *) "__module__", 6, __builtin_offsetof(PyCFunctionObject, m_module), 0, 0},
# 23140 "yxdfb/Kynaraa.cpp"
    {0, 0, 0, 0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);

    Py_INCREF(((PyObject*)((m->func_qualname))));
    return m->func_qualname;



}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, 0x0001, 0},
    {0, 0, 0, 0}
};





static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {

    PyCFunctionObject *cf = (PyCFunctionObject*) op;

    if (__builtin_expect(!!(op == __null), 0))
        return __null;




    op->flags = flags;
    (((PyCFunctionObject*)op)->m_weakreflist) = __null;

    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;

    Py_XINCREF(((PyObject*)((closure))));
    op->func_closure = closure;

    Py_XINCREF(((PyObject*)((module))));
    cf->m_module = module;

    op->func_dict = __null;
    op->func_name = __null;
    Py_INCREF(((PyObject*)((qualname))));
    op->func_qualname = qualname;
    op->func_doc = __null;



    ((PyCMethodObject*)op)->mm_class = __null;

    op->func_globals = globals;
    Py_INCREF(((PyObject*)((op->func_globals))));
    Py_XINCREF(((PyObject*)((code))));
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = __null;
    op->defaults_tuple = __null;
    op->defaults_kwdict = __null;
    op->defaults_getter = __null;
    op->func_annotations = __null;
    op->func_is_coroutine = __null;

    switch (ml->ml_flags & (0x0001 | 0x0080 | 0x0004 | 0x0008 | 0x0002 | 0x0200)) {
    case 0x0004:
        (((PyCFunctionObject*)op)->vectorcall) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case 0x0008:
        (((PyCFunctionObject*)op)->vectorcall) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case 0x0200 | 0x0080 | 0x0002:
        (((PyCFunctionObject*)op)->vectorcall) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case 0x0080 | 0x0002:
        (((PyCFunctionObject*)op)->vectorcall) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case 0x0001 | 0x0002:
        (((PyCFunctionObject*)op)->vectorcall) = __null;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(((PyObject*)((op))));
        return __null;
    }

    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    do { __typeof__(m->func_closure)* _tmp_op_ptr = &(m->func_closure); __typeof__(m->func_closure) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);



    do { __typeof__(((PyCFunctionObject*)m)->m_module)* _tmp_op_ptr = &(((PyCFunctionObject*)m)->m_module); __typeof__(((PyCFunctionObject*)m)->m_module) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);

    do { __typeof__(m->func_dict)* _tmp_op_ptr = &(m->func_dict); __typeof__(m->func_dict) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(m->func_name)* _tmp_op_ptr = &(m->func_name); __typeof__(m->func_name) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(m->func_qualname)* _tmp_op_ptr = &(m->func_qualname); __typeof__(m->func_qualname) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(m->func_doc)* _tmp_op_ptr = &(m->func_doc); __typeof__(m->func_doc) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(m->func_globals)* _tmp_op_ptr = &(m->func_globals); __typeof__(m->func_globals) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(m->func_code)* _tmp_op_ptr = &(m->func_code); __typeof__(m->func_code) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);




    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = __null;
        Py_XDECREF(((PyObject*)((cls))));
    }


    do { __typeof__(m->defaults_tuple)* _tmp_op_ptr = &(m->defaults_tuple); __typeof__(m->defaults_tuple) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(m->defaults_kwdict)* _tmp_op_ptr = &(m->defaults_kwdict); __typeof__(m->defaults_kwdict) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(m->func_annotations)* _tmp_op_ptr = &(m->func_annotations); __typeof__(m->func_annotations) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(m->func_is_coroutine)* _tmp_op_ptr = &(m->func_is_coroutine); __typeof__(m->func_is_coroutine) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    if (m->defaults) {
        PyObject **pydefaults = ((PyObject * *)(((__pyx_CyFunctionObject *) (m))->defaults));
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(((PyObject*)((pydefaults[i]))));
        PyObject_Free(m->defaults);
        m->defaults = __null;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if ((((PyCFunctionObject*)m)->m_weakreflist) != __null)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    do { if (m->func_closure) { int vret = visit(((PyObject*)((m->func_closure))), arg); if (vret) return vret; } } while (0);



    do { if (((PyCFunctionObject*)m)->m_module) { int vret = visit(((PyObject*)((((PyCFunctionObject*)m)->m_module))), arg); if (vret) return vret; } } while (0);

    do { if (m->func_dict) { int vret = visit(((PyObject*)((m->func_dict))), arg); if (vret) return vret; } } while (0);
    do { if (m->func_name) { int vret = visit(((PyObject*)((m->func_name))), arg); if (vret) return vret; } } while (0);
    do { if (m->func_qualname) { int vret = visit(((PyObject*)((m->func_qualname))), arg); if (vret) return vret; } } while (0);
    do { if (m->func_doc) { int vret = visit(((PyObject*)((m->func_doc))), arg); if (vret) return vret; } } while (0);
    do { if (m->func_globals) { int vret = visit(((PyObject*)((m->func_globals))), arg); if (vret) return vret; } } while (0);
    do { if (m->func_code) { int vret = visit(((PyObject*)((m->func_code))), arg); if (vret) return vret; } } while (0);

    do { if (((PyObject*) ((PyCMethodObject *) (m))->mm_class)) { int vret = visit(((PyObject*)((((PyObject*) ((PyCMethodObject *) (m))->mm_class)))), arg); if (vret) return vret; } } while (0);

    do { if (m->defaults_tuple) { int vret = visit(((PyObject*)((m->defaults_tuple))), arg); if (vret) return vret; } } while (0);
    do { if (m->defaults_kwdict) { int vret = visit(((PyObject*)((m->defaults_kwdict))), arg); if (vret) return vret; } } while (0);
    do { if (m->func_is_coroutine) { int vret = visit(((PyObject*)((m->func_is_coroutine))), arg); if (vret) return vret; } } while (0);
    if (m->defaults) {
        PyObject **pydefaults = ((PyObject * *)(((__pyx_CyFunctionObject *) (m))->defaults));
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            do { if (pydefaults[i]) { int vret = visit(((PyObject*)((pydefaults[i]))), arg); if (vret) return vret; } } while (0);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{

    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);




}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
# 23334 "yxdfb/Kynaraa.cpp"
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;

    Py_ssize_t size;
    switch (flags & (0x0001 | 0x0002 | 0x0004 | 0x0008)) {
    case 0x0001:
        if (__builtin_expect(!!(kw == __null || PyDict_Size(kw) == 0), 1))
            return (*meth)(self, arg);
        break;
    case 0x0001 | 0x0002:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case 0x0004:
        if (__builtin_expect(!!(kw == __null || PyDict_Size(kw) == 0), 1)) {

            size = PyTuple_GET_SIZE(((PyObject*)((arg))));




            if (__builtin_expect(!!(size == 0), 1))
                return (*meth)(self, __null);
# 23364 "yxdfb/Kynaraa.cpp"
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" "z" "d given)",
                f->m_ml->ml_name, size);

            return __null;
        }
        break;
    case 0x0008:
        if (__builtin_expect(!!(kw == __null || PyDict_Size(kw) == 0), 1)) {

            size = PyTuple_GET_SIZE(((PyObject*)((arg))));




            if (__builtin_expect(!!(size == 1), 1)) {
                PyObject *result, *arg0;

                arg0 = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((arg))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 23382, __PRETTY_FUNCTION__, "PyTuple_Check(arg)")), ((PyTupleObject*)((arg))))->ob_item[(0)]);



                result = (*meth)(self, arg0);



                return result;
            }
# 23400 "yxdfb/Kynaraa.cpp"
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" "z" "d given)",
                f->m_ml->ml_name, size);

            return __null;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return __null;
    }







    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);

    return __null;
}
static __inline__ __attribute__ ((__unused__)) PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;




    self = ((PyCFunctionObject*)func)->m_self;

    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;

     vectorcallfunc vc = (((PyCFunctionObject*)cyfunc)->vectorcall);
    if (vc) {

        return __Pyx_PyVectorcall_FastCallDict(func, vc, &((((PyType_HasFeature((Py_TYPE(((PyObject*)((args))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 23441, __PRETTY_FUNCTION__, "PyTuple_Check(args)")), ((PyTupleObject*)((args))))->ob_item[(0)]), (size_t)PyTuple_GET_SIZE(((PyObject*)((args)))), kw);




    }

    if ((cyfunc->flags & 0x04) && !(cyfunc->flags & 0x01)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;

        argc = PyTuple_GET_SIZE(((PyObject*)((args))));




        new_args = PyTuple_GetSlice(args, 1, argc);
        if (__builtin_expect(!!(!new_args), 0))
            return __null;
        self = PyTuple_GetItem(args, 0);
        if (__builtin_expect(!!(!self), 0)) {
            Py_DECREF(((PyObject*)((new_args))));

            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);




            return __null;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(((PyObject*)((new_args))));
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}

static __inline__ __attribute__ ((__unused__)) int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & 0x04) && !(cyfunc->flags & 0x01)) {
        if (__builtin_expect(!!(nargs < 1), 0)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (__builtin_expect(!!(kwnames), 0) && __builtin_expect(!!(PyTuple_GET_SIZE(((PyObject*)((kwnames))))), 0)) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;



    Py_ssize_t nargs = _PyVectorcall_NARGS(nargsf);

    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return __null;
    }
    if (__builtin_expect(!!(nargs != 0), 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" "z" "d given)",
            def->ml_name, nargs);
        return __null;
    }
    return def->ml_meth(self, __null);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;



    Py_ssize_t nargs = _PyVectorcall_NARGS(nargsf);

    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return __null;
    }
    if (__builtin_expect(!!(nargs != 1), 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" "z" "d given)",
            def->ml_name, nargs);
        return __null;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;



    Py_ssize_t nargs = _PyVectorcall_NARGS(nargsf);

    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, __null)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return __null;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) ((PyObject*) ((PyCMethodObject *) (cyfunc))->mm_class);



    Py_ssize_t nargs = _PyVectorcall_NARGS(nargsf);

    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, __null)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return __null;
    }
    return ((PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
# 23637 "yxdfb/Kynaraa.cpp"
static PyTypeObject __pyx_CyFunctionType_type = {
    { { { 1 }, (0) }, (0) },
    "_cython_" "3_0_12" "" "." "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,





    __builtin_offsetof(PyCFunctionObject, vectorcall),

    0,
    0,



    0,

    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,

    (1UL << 17) |


    (1UL << 11) |

    ( 0 | 0) | (1UL << 14) | (1UL << 10),
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,



    __builtin_offsetof(PyCFunctionObject, m_weakreflist),

    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    __builtin_offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,

    0,


    0,





    0,







};

static int __pyx_CyFunction_init(PyObject *module) {



    CYTHON_UNUSED_VAR(module);
    __pyx_mstate_global->__pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);

    if (__builtin_expect(!!(__pyx_mstate_global->__pyx_CyFunctionType == __null), 0)) {
        return -1;
    }
    return 0;
}
static __inline__ __attribute__ ((__unused__)) void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (__builtin_expect(!!(!m->defaults), 0))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static __inline__ __attribute__ ((__unused__)) void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(((PyObject*)((tuple))));
}
static __inline__ __attribute__ ((__unused__)) void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(((PyObject*)((dict))));
}
static __inline__ __attribute__ ((__unused__)) void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(((PyObject*)((dict))));
}


static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        ((__pyx_CyFunctionObject*)(_PyObject_GC_New(__pyx_mstate_global->__pyx_CyFunctionType))),
        ml, flags, qualname, closure, module, globals, code
    );
    if (__builtin_expect(!!(op), 1)) {
        PyObject_GC_Track(op);
    }
    return op;
}


static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;

    nbases = PyTuple_GET_SIZE(((PyObject*)((bases))));




    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;

        PyObject *tmp = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((bases))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 23788, __PRETTY_FUNCTION__, "PyTuple_Check(bases)")), ((PyTupleObject*)((bases))))->ob_item[(i)]);




        tmptype = Py_TYPE(((PyObject*)((tmp))));




        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return __null;
    }
    if (!metaclass) {



        metaclass = &PyType_Type;

    }
    Py_INCREF(((PyObject*)(((PyObject*) metaclass))));
    return (PyObject*) metaclass;
}


static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_mstate_global->__pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {__null, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1)), mkw);
            Py_DECREF(((PyObject*)((prep))));
        } else {
            if (__builtin_expect(!!(PyErr_Occurred()), 0))
                return __null;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (__builtin_expect(!!(!ns), 0))
        return __null;
    if (__builtin_expect(!!(PyObject_SetItem(ns, __pyx_mstate_global->__pyx_n_s_module, modname) < 0), 0)) goto bad;

    if (__builtin_expect(!!(PyObject_SetItem(ns, __pyx_mstate_global->__pyx_n_s_qualname, qualname) < 0), 0)) goto bad;



    if (__builtin_expect(!!(doc && PyObject_SetItem(ns, __pyx_mstate_global->__pyx_n_s_doc, doc) < 0), 0)) goto bad;
    return ns;
bad:
    Py_DECREF(((PyObject*)((ns))));
    return __null;
}
# 23988 "yxdfb/Kynaraa.cpp"
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = __null;
    PyObject *margs[4] = {__null, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_mstate_global->__pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (__builtin_expect(!!(PyErr_ExceptionMatches(PyExc_KeyError)), 1)) {
            PyErr_Clear();
        } else {
            return __null;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(((PyObject*)((metaclass)))))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(((PyObject*)((owned_metaclass))));
        if (__builtin_expect(!!(!metaclass), 0))
            return __null;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1)),



        mkw

    );
    Py_XDECREF(((PyObject*)((owned_metaclass))));
# 24028 "yxdfb/Kynaraa.cpp"
    (void) &__Pyx_GetBuiltinName;

    return result;
}



static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;

    PyObject **cython_runtime_dict;

    CYTHON_UNUSED_VAR(tstate);
    if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_cython_runtime), 0)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);

    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);
    if (__builtin_expect(!!(cython_runtime_dict), 1)) {
        (use_cline) = (__Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_s_cline_in_traceback));


    } else

    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? ((PyObject*)((&_Py_FalseStruct))) : ((PyObject*)((&_Py_TrueStruct)));
        Py_DECREF(((PyObject*)((use_cline_obj))));
      } else {
        PyErr_Clear();
        use_cline = __null;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_s_cline_in_traceback, ((PyObject*)((&_Py_FalseStruct))));
    }
    else if (use_cline == ((PyObject*)((&_Py_FalseStruct))) || (use_cline != ((PyObject*)((&_Py_TrueStruct))) && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}




static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (__builtin_expect(!!(!code_line), 0) || __builtin_expect(!!(!__pyx_code_cache.entries), 0)) {
        return __null;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (__builtin_expect(!!(pos >= __pyx_code_cache.count), 0) || __builtin_expect(!!(__pyx_code_cache.entries[pos].code_line != code_line), 0)) {
        return __null;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(((PyObject*)((code_object))));
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (__builtin_expect(!!(!code_line), 0)) {
        return;
    }
    if (__builtin_expect(!!(!entries), 0)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (__builtin_expect(!!(entries), 1)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(((PyObject*)((code_object))));
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && __builtin_expect(!!(__pyx_code_cache.entries[pos].code_line == code_line), 0)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(((PyObject*)((tmp))));
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (__builtin_expect(!!(!entries), 0)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(((PyObject*)((code_object))));
}




# 1 "/data/data/com.termux/files/usr/include/python3.12/frameobject.h" 1





extern "C" {






# 1 "/data/data/com.termux/files/usr/include/python3.12/cpython/frameobject.h" 1








__attribute__ ((visibility ("default"))) PyFrameObject * PyFrame_New(PyThreadState *, PyCodeObject *,
                                        PyObject *, PyObject *);





__attribute__ ((visibility ("default"))) void PyFrame_LocalsToFast(PyFrameObject *, int);
# 26 "/data/data/com.termux/files/usr/include/python3.12/cpython/frameobject.h"
__attribute__ ((visibility ("default"))) int _PyFrame_IsEntryFrame(PyFrameObject *frame);

__attribute__ ((visibility ("default"))) int PyFrame_FastToLocalsWithError(PyFrameObject *f);
__attribute__ ((visibility ("default"))) void PyFrame_FastToLocals(PyFrameObject *);
# 14 "/data/data/com.termux/files/usr/include/python3.12/frameobject.h" 2




}
# 24161 "yxdfb/Kynaraa.cpp" 2





# 1 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h" 1



extern "C" {


# 1 "/data/data/com.termux/files/usr/include/c++/v1/stdbool.h" 1 3
# 26 "/data/data/com.termux/files/usr/include/c++/v1/stdbool.h" 3



# 1 "/data/data/com.termux/files/usr/lib/clang/19/include/stdbool.h" 1 3
# 30 "/data/data/com.termux/files/usr/include/c++/v1/stdbool.h" 2 3
# 8 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h" 2
# 1 "/data/data/com.termux/files/usr/include/c++/v1/stddef.h" 1 3
# 9 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h" 2
# 1 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h" 1



extern "C" {
# 20 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h"
typedef struct {
    uint16_t counter;
    uint16_t index;
    uint16_t module_keys_version;
    uint16_t builtin_keys_version;
} _PyLoadGlobalCache;



typedef struct {
    uint16_t counter;
} _PyBinaryOpCache;



typedef struct {
    uint16_t counter;
} _PyUnpackSequenceCache;




typedef struct {
    uint16_t counter;
} _PyCompareOpCache;



typedef struct {
    uint16_t counter;
} _PyBinarySubscrCache;



typedef struct {
    uint16_t counter;
} _PySuperAttrCache;



typedef struct {
    uint16_t counter;
    uint16_t version[2];
    uint16_t index;
} _PyAttrCache;

typedef struct {
    uint16_t counter;
    uint16_t type_version[2];
    uint16_t keys_version[2];
    uint16_t descr[4];
} _PyLoadMethodCache;







typedef struct {
    uint16_t counter;
    uint16_t func_version[2];
} _PyCallCache;



typedef struct {
    uint16_t counter;
} _PyStoreSubscrCache;



typedef struct {
    uint16_t counter;
} _PyForIterCache;



typedef struct {
    uint16_t counter;
} _PySendCache;




struct callable_cache {
    PyObject *isinstance;
    PyObject *len;
    PyObject *list_append;
    PyObject *object__getattribute__;
};
# 136 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h"
typedef unsigned char _PyLocals_Kind;

static inline _PyLocals_Kind
_PyLocals_GetKind(PyObject *kinds, int i)
{
    ((PyType_HasFeature((Py_TYPE(((PyObject*)((kinds))))), ((1UL << 27)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h", 141, __PRETTY_FUNCTION__, "PyBytes_Check(kinds)"));
    ((0 <= i && i < PyBytes_GET_SIZE(((PyObject*)((kinds))))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h", 142, __PRETTY_FUNCTION__, "0 <= i && i < PyBytes_GET_SIZE(kinds)"));
    char *ptr = PyBytes_AS_STRING(((PyObject*)((kinds))));
    return (_PyLocals_Kind)(ptr[i]);
}

static inline void
_PyLocals_SetKind(PyObject *kinds, int i, _PyLocals_Kind kind)
{
    ((PyType_HasFeature((Py_TYPE(((PyObject*)((kinds))))), ((1UL << 27)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h", 150, __PRETTY_FUNCTION__, "PyBytes_Check(kinds)"));
    ((0 <= i && i < PyBytes_GET_SIZE(((PyObject*)((kinds))))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h", 151, __PRETTY_FUNCTION__, "0 <= i && i < PyBytes_GET_SIZE(kinds)"));
    char *ptr = PyBytes_AS_STRING(((PyObject*)((kinds))));
    ptr[i] = (char) kind;
}


struct _PyCodeConstructor {

    PyObject *filename;
    PyObject *name;
    PyObject *qualname;
    int flags;


    PyObject *code;
    int firstlineno;
    PyObject *linetable;


    PyObject *consts;
    PyObject *names;


    PyObject *localsplusnames;
    PyObject *localspluskinds;


    int argcount;
    int posonlyargcount;

    int kwonlyargcount;


    int stacksize;


    PyObject *exceptiontable;
};
# 199 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h"
__attribute__ ((visibility ("default"))) int _PyCode_Validate(struct _PyCodeConstructor *);
__attribute__ ((visibility ("default"))) PyCodeObject * _PyCode_New(struct _PyCodeConstructor *);





extern PyObject* _PyCode_GetVarnames(PyCodeObject *);
extern PyObject* _PyCode_GetCellvars(PyCodeObject *);
extern PyObject* _PyCode_GetFreevars(PyCodeObject *);
extern PyObject* _PyCode_GetCode(PyCodeObject *);


extern int _PyCode_InitAddressRange(PyCodeObject* co, PyCodeAddressRange *bounds);


extern void _PyLineTable_InitAddressRange(
    const char *linetable,
    Py_ssize_t length,
    int firstlineno,
    PyCodeAddressRange *range);


extern int _PyLineTable_NextAddressRange(PyCodeAddressRange *range);
extern int _PyLineTable_PreviousAddressRange(PyCodeAddressRange *range);



extern void _Py_Specialize_LoadSuperAttr(PyObject *global_super, PyObject *cls,
                                         _Py_CODEUNIT *instr, int load_method);
extern void _Py_Specialize_LoadAttr(PyObject *owner, _Py_CODEUNIT *instr,
                                    PyObject *name);
extern void _Py_Specialize_StoreAttr(PyObject *owner, _Py_CODEUNIT *instr,
                                     PyObject *name);
extern void _Py_Specialize_LoadGlobal(PyObject *globals, PyObject *builtins,
                                      _Py_CODEUNIT *instr, PyObject *name);
extern void _Py_Specialize_BinarySubscr(PyObject *sub, PyObject *container,
                                        _Py_CODEUNIT *instr);
extern void _Py_Specialize_StoreSubscr(PyObject *container, PyObject *sub,
                                       _Py_CODEUNIT *instr);
extern void _Py_Specialize_Call(PyObject *callable, _Py_CODEUNIT *instr,
                                int nargs, PyObject *kwnames);
extern void _Py_Specialize_BinaryOp(PyObject *lhs, PyObject *rhs, _Py_CODEUNIT *instr,
                                    int oparg, PyObject **locals);
extern void _Py_Specialize_CompareOp(PyObject *lhs, PyObject *rhs,
                                     _Py_CODEUNIT *instr, int oparg);
extern void _Py_Specialize_UnpackSequence(PyObject *seq, _Py_CODEUNIT *instr,
                                          int oparg);
extern void _Py_Specialize_ForIter(PyObject *iter, _Py_CODEUNIT *instr, int oparg);
extern void _Py_Specialize_Send(PyObject *receiver, _Py_CODEUNIT *instr);


extern void _PyStaticCode_Fini(PyCodeObject *co);

extern int _PyStaticCode_Init(PyCodeObject *co);
# 292 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h"
static inline void
write_u32(uint16_t *p, uint32_t val)
{
    memcpy(p, &val, sizeof(val));
}

static inline void
write_u64(uint16_t *p, uint64_t val)
{
    memcpy(p, &val, sizeof(val));
}

static inline void
write_obj(uint16_t *p, PyObject *val)
{
    memcpy(p, &val, sizeof(val));
}

static inline uint16_t
read_u16(uint16_t *p)
{
    return *p;
}

static inline uint32_t
read_u32(uint16_t *p)
{
    uint32_t val;
    memcpy(&val, p, sizeof(val));
    return val;
}

static inline uint64_t
read_u64(uint16_t *p)
{
    uint64_t val;
    memcpy(&val, p, sizeof(val));
    return val;
}

static inline PyObject *
read_obj(uint16_t *p)
{
    PyObject *val;
    memcpy(&val, p, sizeof(val));
    return val;
}



static inline unsigned char *
parse_varint(unsigned char *p, int *result) {
    int val = p[0] & 63;
    while (p[0] & 64) {
        p++;
        val = (val << 6) | (p[0] & 63);
    }
    *result = val;
    return p+1;
}

static inline int
write_varint(uint8_t *ptr, unsigned int val)
{
    int written = 1;
    while (val >= 64) {
        *ptr++ = 64 | (val & 63);
        val >>= 6;
        written++;
    }
    *ptr = (uint8_t)val;
    return written;
}

static inline int
write_signed_varint(uint8_t *ptr, int val)
{
    unsigned int uval;
    if (val < 0) {

        uval = ((0 - (unsigned int)val) << 1) | 1;
    }
    else {
        uval = (unsigned int)val << 1;
    }
    return write_varint(ptr, uval);
}

static inline int
write_location_entry_start(uint8_t *ptr, int code, int length)
{
    (((code & 15) == code) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h", 383, __PRETTY_FUNCTION__, "(code & 15) == code"));
    *ptr = 128 | (uint8_t)(code << 3) | (uint8_t)(length - 1);
    return 1;
}
# 423 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h"
static inline uint16_t
adaptive_counter_bits(uint16_t value, uint16_t backoff) {
    return ((value << 4)
            | (backoff & ((1 << 4) - 1)));
}

static inline uint16_t
adaptive_counter_warmup(void) {
    return adaptive_counter_bits(1,
                                 1);
}

static inline uint16_t
adaptive_counter_cooldown(void) {
    return adaptive_counter_bits(52,
                                 0);
}

static inline uint16_t
adaptive_counter_backoff(uint16_t counter) {
    uint16_t backoff = counter & ((1 << 4) - 1);
    backoff++;
    if (backoff > (16 - 4)) {
        backoff = (16 - 4);
    }
    uint16_t value = (uint16_t)(1 << backoff) - 1;
    return adaptive_counter_bits(value, backoff);
}




typedef struct _PyShimCodeDef {
    const uint8_t *code;
    int codelen;
    int stacksize;
    const char *cname;
} _PyShimCodeDef;

extern PyCodeObject *
_Py_MakeShimCode(const _PyShimCodeDef *code);

extern uint32_t _Py_next_func_version;
# 488 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_code.h"
extern int _Py_Instrument(PyCodeObject *co, PyInterpreterState *interp);

extern int _Py_GetBaseOpcode(PyCodeObject *code, int offset);



}
# 10 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h" 2






struct _frame {
    PyObject ob_base;
    PyFrameObject *f_back;
    struct _PyInterpreterFrame *f_frame;
    PyObject *f_trace;
    int f_lineno;
    char f_trace_lines;
    char f_trace_opcodes;
    char f_fast_as_locals;

    PyObject *_f_frame_data[1];
};

extern PyFrameObject* _PyFrame_New_NoTrack(PyCodeObject *code);




typedef enum _framestate {
    FRAME_CREATED = -2,
    FRAME_SUSPENDED = -1,
    FRAME_EXECUTING = 0,
    FRAME_COMPLETED = 1,
    FRAME_CLEARED = 4
} PyFrameState;



enum _frameowner {
    FRAME_OWNED_BY_THREAD = 0,
    FRAME_OWNED_BY_GENERATOR = 1,
    FRAME_OWNED_BY_FRAME_OBJECT = 2,
    FRAME_OWNED_BY_CSTACK = 3,
};

typedef struct _PyInterpreterFrame {
    PyCodeObject *f_code;
    struct _PyInterpreterFrame *previous;
    PyObject *f_funcobj;
    PyObject *f_globals;
    PyObject *f_builtins;
    PyObject *f_locals;
    PyFrameObject *frame_obj;




    _Py_CODEUNIT *prev_instr;
    int stacktop;






    uint16_t return_offset;
    char owner;

    PyObject *localsplus[1];
} _PyInterpreterFrame;




static inline PyObject **_PyFrame_Stackbase(_PyInterpreterFrame *f) {
    return f->localsplus + f->f_code->co_nlocalsplus;
}

static inline PyObject *_PyFrame_StackPeek(_PyInterpreterFrame *f) {
    ((f->stacktop > f->f_code->co_nlocalsplus) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h", 85, __PRETTY_FUNCTION__, "f->stacktop > f->f_code->co_nlocalsplus"));
    ((f->localsplus[f->stacktop-1] != __null) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h", 86, __PRETTY_FUNCTION__, "f->localsplus[f->stacktop-1] != NULL"));
    return f->localsplus[f->stacktop-1];
}

static inline PyObject *_PyFrame_StackPop(_PyInterpreterFrame *f) {
    ((f->stacktop > f->f_code->co_nlocalsplus) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h", 91, __PRETTY_FUNCTION__, "f->stacktop > f->f_code->co_nlocalsplus"));
    f->stacktop--;
    return f->localsplus[f->stacktop];
}

static inline void _PyFrame_StackPush(_PyInterpreterFrame *f, PyObject *value) {
    f->localsplus[f->stacktop] = value;
    f->stacktop++;
}



static inline int
_PyFrame_NumSlotsForCodeObject(PyCodeObject *code)
{


    ((code->co_framesize >= ((int)((sizeof(_PyInterpreterFrame)-1)/sizeof(PyObject *)))) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h", 108, __PRETTY_FUNCTION__, "code->co_framesize >= FRAME_SPECIALS_SIZE"));
    return code->co_framesize - ((int)((sizeof(_PyInterpreterFrame)-1)/sizeof(PyObject *)));
}

void _PyFrame_Copy(_PyInterpreterFrame *src, _PyInterpreterFrame *dest);





static inline void
_PyFrame_Initialize(
    _PyInterpreterFrame *frame, PyFunctionObject *func,
    PyObject *locals, PyCodeObject *code, int null_locals_from)
{
    frame->f_funcobj = (PyObject *)func;
    frame->f_code = (PyCodeObject *)_Py_NewRef(((PyObject*)((code))));
    frame->f_builtins = func->func_builtins;
    frame->f_globals = func->func_globals;
    frame->f_locals = locals;
    frame->stacktop = code->co_nlocalsplus;
    frame->frame_obj = __null;
    frame->prev_instr = ((void)0, ((_Py_CODEUNIT *)(code)->co_code_adaptive)) - 1;
    frame->return_offset = 0;
    frame->owner = FRAME_OWNED_BY_THREAD;

    for (int i = null_locals_from; i < code->co_nlocalsplus; i++) {
        frame->localsplus[i] = __null;
    }
}




static inline PyObject**
_PyFrame_GetLocalsArray(_PyInterpreterFrame *frame)
{
    return frame->localsplus;
}





static inline PyObject**
_PyFrame_GetStackPointer(_PyInterpreterFrame *frame)
{
    PyObject **sp = frame->localsplus + frame->stacktop;
    frame->stacktop = -1;
    return sp;
}

static inline void
_PyFrame_SetStackPointer(_PyInterpreterFrame *frame, PyObject **stack_pointer)
{
    frame->stacktop = (int)(stack_pointer - frame->localsplus);
}
# 174 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h"
static inline bool
_PyFrame_IsIncomplete(_PyInterpreterFrame *frame)
{
    return frame->owner != FRAME_OWNED_BY_GENERATOR &&
    frame->prev_instr < ((void)0, ((_Py_CODEUNIT *)(frame->f_code)->co_code_adaptive)) + frame->f_code->_co_firsttraceable;
}

static inline _PyInterpreterFrame *
_PyFrame_GetFirstComplete(_PyInterpreterFrame *frame)
{
    while (frame && _PyFrame_IsIncomplete(frame)) {
        frame = frame->previous;
    }
    return frame;
}

static inline _PyInterpreterFrame *
_PyThreadState_GetFrame(PyThreadState *tstate)
{
    return _PyFrame_GetFirstComplete(tstate->cframe->current_frame);
}



PyFrameObject *
_PyFrame_MakeAndSetFrameObject(_PyInterpreterFrame *frame);




static inline PyFrameObject *
_PyFrame_GetFrameObject(_PyInterpreterFrame *frame)
{

    ((!_PyFrame_IsIncomplete(frame)) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h", 208, __PRETTY_FUNCTION__, "!_PyFrame_IsIncomplete(frame)"));
    PyFrameObject *res = frame->frame_obj;
    if (res != __null) {
        return res;
    }
    return _PyFrame_MakeAndSetFrameObject(frame);
}
# 225 "/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h"
void
_PyFrame_ClearExceptCode(_PyInterpreterFrame * frame);

int
_PyFrame_Traverse(_PyInterpreterFrame *frame, visitproc visit, void *arg);

PyObject *
_PyFrame_GetLocals(_PyInterpreterFrame *frame, int include_hidden);

int
_PyFrame_FastToLocalsWithError(_PyInterpreterFrame *frame);

void
_PyFrame_LocalsToFast(_PyInterpreterFrame *frame, int clear);

static inline bool
_PyThreadState_HasStackSpace(PyThreadState *tstate, int size)
{
    (((tstate->datastack_top == __null && tstate->datastack_limit == __null) || (tstate->datastack_top != __null && tstate->datastack_limit != __null)) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h", 247, __PRETTY_FUNCTION__, "(tstate->datastack_top == NULL && tstate->datastack_limit == NULL) || (tstate->datastack_top != NULL && tstate->datastack_limit != NULL)"));




    return tstate->datastack_top != __null &&
        size < tstate->datastack_limit - tstate->datastack_top;
}

extern _PyInterpreterFrame *
_PyThreadState_PushFrame(PyThreadState *tstate, size_t size);

void _PyThreadState_PopFrame(PyThreadState *tstate, _PyInterpreterFrame *frame);




static inline _PyInterpreterFrame *
_PyFrame_PushUnchecked(PyThreadState *tstate, PyFunctionObject *func, int null_locals_from)
{
    ((void)0);
    PyCodeObject *code = (PyCodeObject *)func->func_code;
    _PyInterpreterFrame *new_frame = (_PyInterpreterFrame *)tstate->datastack_top;
    tstate->datastack_top += code->co_framesize;
    ((tstate->datastack_top < tstate->datastack_limit) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h", 267, __PRETTY_FUNCTION__, "tstate->datastack_top < tstate->datastack_limit"));
    _PyFrame_Initialize(new_frame, func, __null, code, null_locals_from);
    return new_frame;
}

static inline
PyGenObject *_PyFrame_GetGenerator(_PyInterpreterFrame *frame)
{
    ((frame->owner == FRAME_OWNED_BY_GENERATOR) ? (static_cast<void>(0)) : __assert2("/data/data/com.termux/files/usr/include/python3.12/internal/pycore_frame.h", 275, __PRETTY_FUNCTION__, "frame->owner == FRAME_OWNED_BY_GENERATOR"));
    size_t offset_in_gen = __builtin_offsetof(PyGenObject, gi_iframe);
    return (PyGenObject *)(((char *)frame) - offset_in_gen);
}


}
# 24167 "yxdfb/Kynaraa.cpp" 2
# 24251 "yxdfb/Kynaraa.cpp"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = __null;
    PyObject *py_funcname = __null;





    if (c_line) {




        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;

    }
    else {




    }
# 24299 "yxdfb/Kynaraa.cpp"
    py_code = PyCode_NewEmpty(filename, funcname, py_line);

    Py_XDECREF(((PyObject*)((py_funcname))));
    return py_code;
bad:
    Py_XDECREF(((PyObject*)((py_funcname))));



    return __null;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = _PyThreadState_UncheckedGet();
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {


            Py_XDECREF(((PyObject*)((ptype))));
            Py_XDECREF(((PyObject*)((pvalue))));
            Py_XDECREF(((PyObject*)((ptraceback))));
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,
        py_code,
        __pyx_mstate_global->__pyx_d,
        0
    );
    if (!py_frame) goto bad;
    (py_frame)->f_lineno = (py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(((PyObject*)((py_code))));
    Py_XDECREF(((PyObject*)((py_frame))));
}



static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyInt_From_long(long value) {




    const long neg_one = (long) -1, const_zero = (long) 0;



    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);

        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);

        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyLong_FromLong((long) value);

        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);

        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;







        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
# 24418 "yxdfb/Kynaraa.cpp"
    }
}
# 24460 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) long __Pyx_PyInt_As_long(PyObject *x) {




    const long neg_one = (long) -1, const_zero = (long) 0;



    const int is_unsigned = neg_one > const_zero;
# 24483 "yxdfb/Kynaraa.cpp"
    if (__builtin_expect(!!(!PyType_HasFeature((Py_TYPE(((PyObject*)((x))))), ((1UL << 24)))), 0)) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(((PyObject*)((tmp))));
        return val;
    }
    if (is_unsigned) {

        if (__builtin_expect(!!((((((PyLongObject*)x)->long_value.lv_tag & 3) & 2) != 0)), 0)) {
            goto raise_neg_overflow;
        } else if (_PyLong_IsCompact((PyLongObject*) x)) {
            { __Pyx_compact_upylong value = ((((PyLongObject*)x)->long_value.ob_digit)[0]); if (sizeof(long) < sizeof(__Pyx_compact_upylong)) { if (__builtin_expect(!!(value != (__Pyx_compact_upylong) (long) value), 0)) { __Pyx_compact_upylong zero = 0; if (0 && __builtin_expect(!!(value == (__Pyx_compact_upylong)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
        } else {
            const digit* digits = (((PyLongObject*)x)->long_value.ob_digit);
            ((((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> 3)) > 1) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 24499, __PRETTY_FUNCTION__, "__Pyx_PyLong_DigitCount(x) > 1"));
            switch (((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> 3))) {
                case 2:
                    if ((8 * sizeof(long) > 1 * 30)) {
                        if ((8 * sizeof(unsigned long) > 2 * 30)) {
                            { unsigned long value = (((((unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (long) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) >= 2 * 30)) {
                            return (long) (((((long)digits[1]) << 30) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * 30)) {
                        if ((8 * sizeof(unsigned long) > 3 * 30)) {
                            { unsigned long value = (((((((unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (long) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) >= 3 * 30)) {
                            return (long) (((((((long)digits[2]) << 30) | (long)digits[1]) << 30) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * 30)) {
                        if ((8 * sizeof(unsigned long) > 4 * 30)) {
                            { unsigned long value = (((((((((unsigned long)digits[3]) << 30) | (unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (long) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) >= 4 * 30)) {
                            return (long) (((((((((long)digits[3]) << 30) | (long)digits[2]) << 30) | (long)digits[1]) << 30) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }






        {
            int result = PyObject_RichCompareBool(x, ((PyObject*)((&_Py_FalseStruct))), 0);
            if (__builtin_expect(!!(result < 0), 0))
                return (long) -1;
            if (__builtin_expect(!!(result == 1), 0))
                goto raise_neg_overflow;
        }

        if ((sizeof(long) <= sizeof(unsigned long))) {
            { unsigned long value = PyLong_AsUnsignedLong(x); if (sizeof(long) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (long) value), 0)) { unsigned long zero = 0; if (1 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }

        } else if ((sizeof(long) <= sizeof(unsigned long long))) {
            { unsigned long long value = PyLong_AsUnsignedLongLong(x); if (sizeof(long) < sizeof(unsigned long long)) { if (__builtin_expect(!!(value != (unsigned long long) (long) value), 0)) { unsigned long long zero = 0; if (1 && __builtin_expect(!!(value == (unsigned long long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }

        }
    } else {

        if (_PyLong_IsCompact((PyLongObject*) x)) {
            { __Pyx_compact_pylong value = _PyLong_CompactValue((PyLongObject*) x); if (sizeof(long) < sizeof(__Pyx_compact_pylong)) { if (__builtin_expect(!!(value != (__Pyx_compact_pylong) (long) value), 0)) { __Pyx_compact_pylong zero = 0; if (0 && __builtin_expect(!!(value == (__Pyx_compact_pylong)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
        } else {
            const digit* digits = (((PyLongObject*)x)->long_value.ob_digit);
            ((((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> 3)) > 1) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 24557, __PRETTY_FUNCTION__, "__Pyx_PyLong_DigitCount(x) > 1"));
            switch (((1 - (Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag & 3)) * ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> 3)))) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * 30)) {
                        if ((8 * sizeof(unsigned long) > 2 * 30)) {
                            { long value = -(long) (((((unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(long)) { if (__builtin_expect(!!(value != (long) (long) value), 0)) { long zero = 0; if (0 && __builtin_expect(!!(value == (long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) - 1 > 2 * 30)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << 30) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * 30)) {
                        if ((8 * sizeof(unsigned long) > 2 * 30)) {
                            { unsigned long value = (((((unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (long) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) - 1 > 2 * 30)) {
                            return (long) ((((((long)digits[1]) << 30) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * 30)) {
                        if ((8 * sizeof(unsigned long) > 3 * 30)) {
                            { long value = -(long) (((((((unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(long)) { if (__builtin_expect(!!(value != (long) (long) value), 0)) { long zero = 0; if (0 && __builtin_expect(!!(value == (long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) - 1 > 3 * 30)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << 30) | (long)digits[1]) << 30) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * 30)) {
                        if ((8 * sizeof(unsigned long) > 3 * 30)) {
                            { unsigned long value = (((((((unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (long) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) - 1 > 3 * 30)) {
                            return (long) ((((((((long)digits[2]) << 30) | (long)digits[1]) << 30) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * 30)) {
                        if ((8 * sizeof(unsigned long) > 4 * 30)) {
                            { long value = -(long) (((((((((unsigned long)digits[3]) << 30) | (unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(long)) { if (__builtin_expect(!!(value != (long) (long) value), 0)) { long zero = 0; if (0 && __builtin_expect(!!(value == (long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) - 1 > 4 * 30)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << 30) | (long)digits[2]) << 30) | (long)digits[1]) << 30) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * 30)) {
                        if ((8 * sizeof(unsigned long) > 4 * 30)) {
                            { unsigned long value = (((((((((unsigned long)digits[3]) << 30) | (unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(long) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (long) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }
                        } else if ((8 * sizeof(long) - 1 > 4 * 30)) {
                            return (long) ((((((((((long)digits[3]) << 30) | (long)digits[2]) << 30) | (long)digits[1]) << 30) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }

        if ((sizeof(long) <= sizeof(long))) {
            { long value = PyLong_AsLong(x); if (sizeof(long) < sizeof(long)) { if (__builtin_expect(!!(value != (long) (long) value), 0)) { long zero = 0; if (1 && __builtin_expect(!!(value == (long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }

        } else if ((sizeof(long) <= sizeof(long long))) {
            { long long value = PyLong_AsLongLong(x); if (sizeof(long) < sizeof(long long)) { if (__builtin_expect(!!(value != (long long) (long) value), 0)) { long long zero = 0; if (1 && __builtin_expect(!!(value == (long long)-1 && PyErr_Occurred()), 0)) return (long) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (long) value; }

        }
    }
    {
        long val;
        int ret = -1;
# 24637 "yxdfb/Kynaraa.cpp"
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
# 24712 "yxdfb/Kynaraa.cpp"
        if (__builtin_expect(!!(ret), 0))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}


static __inline__ __attribute__ ((__unused__)) int __Pyx_PyInt_As_int(PyObject *x) {




    const int neg_one = (int) -1, const_zero = (int) 0;



    const int is_unsigned = neg_one > const_zero;
# 24750 "yxdfb/Kynaraa.cpp"
    if (__builtin_expect(!!(!PyType_HasFeature((Py_TYPE(((PyObject*)((x))))), ((1UL << 24)))), 0)) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(((PyObject*)((tmp))));
        return val;
    }
    if (is_unsigned) {

        if (__builtin_expect(!!((((((PyLongObject*)x)->long_value.lv_tag & 3) & 2) != 0)), 0)) {
            goto raise_neg_overflow;
        } else if (_PyLong_IsCompact((PyLongObject*) x)) {
            { __Pyx_compact_upylong value = ((((PyLongObject*)x)->long_value.ob_digit)[0]); if (sizeof(int) < sizeof(__Pyx_compact_upylong)) { if (__builtin_expect(!!(value != (__Pyx_compact_upylong) (int) value), 0)) { __Pyx_compact_upylong zero = 0; if (0 && __builtin_expect(!!(value == (__Pyx_compact_upylong)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
        } else {
            const digit* digits = (((PyLongObject*)x)->long_value.ob_digit);
            ((((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> 3)) > 1) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 24766, __PRETTY_FUNCTION__, "__Pyx_PyLong_DigitCount(x) > 1"));
            switch (((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> 3))) {
                case 2:
                    if ((8 * sizeof(int) > 1 * 30)) {
                        if ((8 * sizeof(unsigned long) > 2 * 30)) {
                            { unsigned long value = (((((unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (int) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) >= 2 * 30)) {
                            return (int) (((((int)digits[1]) << 30) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * 30)) {
                        if ((8 * sizeof(unsigned long) > 3 * 30)) {
                            { unsigned long value = (((((((unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (int) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) >= 3 * 30)) {
                            return (int) (((((((int)digits[2]) << 30) | (int)digits[1]) << 30) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * 30)) {
                        if ((8 * sizeof(unsigned long) > 4 * 30)) {
                            { unsigned long value = (((((((((unsigned long)digits[3]) << 30) | (unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (int) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) >= 4 * 30)) {
                            return (int) (((((((((int)digits[3]) << 30) | (int)digits[2]) << 30) | (int)digits[1]) << 30) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }






        {
            int result = PyObject_RichCompareBool(x, ((PyObject*)((&_Py_FalseStruct))), 0);
            if (__builtin_expect(!!(result < 0), 0))
                return (int) -1;
            if (__builtin_expect(!!(result == 1), 0))
                goto raise_neg_overflow;
        }

        if ((sizeof(int) <= sizeof(unsigned long))) {
            { unsigned long value = PyLong_AsUnsignedLong(x); if (sizeof(int) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (int) value), 0)) { unsigned long zero = 0; if (1 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }

        } else if ((sizeof(int) <= sizeof(unsigned long long))) {
            { unsigned long long value = PyLong_AsUnsignedLongLong(x); if (sizeof(int) < sizeof(unsigned long long)) { if (__builtin_expect(!!(value != (unsigned long long) (int) value), 0)) { unsigned long long zero = 0; if (1 && __builtin_expect(!!(value == (unsigned long long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }

        }
    } else {

        if (_PyLong_IsCompact((PyLongObject*) x)) {
            { __Pyx_compact_pylong value = _PyLong_CompactValue((PyLongObject*) x); if (sizeof(int) < sizeof(__Pyx_compact_pylong)) { if (__builtin_expect(!!(value != (__Pyx_compact_pylong) (int) value), 0)) { __Pyx_compact_pylong zero = 0; if (0 && __builtin_expect(!!(value == (__Pyx_compact_pylong)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
        } else {
            const digit* digits = (((PyLongObject*)x)->long_value.ob_digit);
            ((((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> 3)) > 1) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 24824, __PRETTY_FUNCTION__, "__Pyx_PyLong_DigitCount(x) > 1"));
            switch (((1 - (Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag & 3)) * ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> 3)))) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * 30)) {
                        if ((8 * sizeof(unsigned long) > 2 * 30)) {
                            { long value = -(long) (((((unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(long)) { if (__builtin_expect(!!(value != (long) (int) value), 0)) { long zero = 0; if (0 && __builtin_expect(!!(value == (long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) - 1 > 2 * 30)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << 30) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * 30)) {
                        if ((8 * sizeof(unsigned long) > 2 * 30)) {
                            { unsigned long value = (((((unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (int) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) - 1 > 2 * 30)) {
                            return (int) ((((((int)digits[1]) << 30) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * 30)) {
                        if ((8 * sizeof(unsigned long) > 3 * 30)) {
                            { long value = -(long) (((((((unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(long)) { if (__builtin_expect(!!(value != (long) (int) value), 0)) { long zero = 0; if (0 && __builtin_expect(!!(value == (long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) - 1 > 3 * 30)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << 30) | (int)digits[1]) << 30) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * 30)) {
                        if ((8 * sizeof(unsigned long) > 3 * 30)) {
                            { unsigned long value = (((((((unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (int) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) - 1 > 3 * 30)) {
                            return (int) ((((((((int)digits[2]) << 30) | (int)digits[1]) << 30) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * 30)) {
                        if ((8 * sizeof(unsigned long) > 4 * 30)) {
                            { long value = -(long) (((((((((unsigned long)digits[3]) << 30) | (unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(long)) { if (__builtin_expect(!!(value != (long) (int) value), 0)) { long zero = 0; if (0 && __builtin_expect(!!(value == (long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) - 1 > 4 * 30)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << 30) | (int)digits[2]) << 30) | (int)digits[1]) << 30) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * 30)) {
                        if ((8 * sizeof(unsigned long) > 4 * 30)) {
                            { unsigned long value = (((((((((unsigned long)digits[3]) << 30) | (unsigned long)digits[2]) << 30) | (unsigned long)digits[1]) << 30) | (unsigned long)digits[0])); if (sizeof(int) < sizeof(unsigned long)) { if (__builtin_expect(!!(value != (unsigned long) (int) value), 0)) { unsigned long zero = 0; if (0 && __builtin_expect(!!(value == (unsigned long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }
                        } else if ((8 * sizeof(int) - 1 > 4 * 30)) {
                            return (int) ((((((((((int)digits[3]) << 30) | (int)digits[2]) << 30) | (int)digits[1]) << 30) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }

        if ((sizeof(int) <= sizeof(long))) {
            { long value = PyLong_AsLong(x); if (sizeof(int) < sizeof(long)) { if (__builtin_expect(!!(value != (long) (int) value), 0)) { long zero = 0; if (1 && __builtin_expect(!!(value == (long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }

        } else if ((sizeof(int) <= sizeof(long long))) {
            { long long value = PyLong_AsLongLong(x); if (sizeof(int) < sizeof(long long)) { if (__builtin_expect(!!(value != (long long) (int) value), 0)) { long long zero = 0; if (1 && __builtin_expect(!!(value == (long long)-1 && PyErr_Occurred()), 0)) return (int) -1; if (is_unsigned && __builtin_expect(!!(value < zero), 0)) goto raise_neg_overflow; else goto raise_overflow; } } return (int) value; }

        }
    }
    {
        int val;
        int ret = -1;
# 24904 "yxdfb/Kynaraa.cpp"
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
# 24979 "yxdfb/Kynaraa.cpp"
        if (__builtin_expect(!!(ret), 0))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}
# 25046 "yxdfb/Kynaraa.cpp"
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = __null;
    if (tb == (&_Py_NoneStruct)) {
        tb = 0;
    } else if (tb && !Py_IS_TYPE(((PyObject*)(((tb)))), (&PyTraceBack_Type))) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == (&_Py_NoneStruct))
        value = 0;
    if (PyType_HasFeature((Py_TYPE(((PyObject*)((type))))), ((1UL << 30)))) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(((PyObject*)((value))));
    } else if ((PyType_Check(((PyObject*)(((type))))) && PyType_HasFeature(((PyTypeObject*)(type)), ((1UL << 30))))) {
        PyObject *instance_class = __null;
        if (value && PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 30)))) {
            instance_class = (PyObject*) Py_TYPE(((PyObject*)((value))));
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = __null;
                } else if (__builtin_expect(!!(is_subclass == -1), 0)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 26)))) {
                Py_INCREF(((PyObject*)((value))));
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, __null);
            Py_DECREF(((PyObject*)((args))));
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 30)))) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(((PyObject*)((value)))));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == (&_Py_NoneStruct)) {
            fixed_cause = __null;
        } else if ((PyType_Check(((PyObject*)(((cause))))) && PyType_HasFeature(((PyTypeObject*)(cause)), ((1UL << 30))))) {
            fixed_cause = PyObject_CallObject(cause, __null);
            if (fixed_cause == __null)
                goto bad;
        } else if (PyType_HasFeature((Py_TYPE(((PyObject*)((cause))))), ((1UL << 30)))) {
            fixed_cause = cause;
            Py_INCREF(((PyObject*)((fixed_cause))));
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {

        PyException_SetTraceback(value, tb);
# 25147 "yxdfb/Kynaraa.cpp"
    }
bad:
    Py_XDECREF(((PyObject*)((owned_instance))));
    return;
}




static __inline__ __attribute__ ((__unused__)) void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;

    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == __null || tmp_value == (&_Py_NoneStruct)) {
        Py_XDECREF(((PyObject*)((tmp_value))));
        tmp_value = __null;
        tmp_type = __null;
        tmp_tb = __null;
    } else {
        tmp_type = (PyObject*) Py_TYPE(((PyObject*)((tmp_value))));
        Py_INCREF(((PyObject*)((tmp_type))));

        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(((PyObject*)((tmp_tb))));



    }
# 25193 "yxdfb/Kynaraa.cpp"
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
# 25217 "yxdfb/Kynaraa.cpp"
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = __null;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetchInState(__pyx_tstate, &et, &ev, &tb);
    if (!et) {
        Py_XDECREF(((PyObject*)((tb))));
        Py_XDECREF(((PyObject*)((ev))));
        Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
        *pvalue = (&_Py_NoneStruct);
        return 0;
    }
    if (__builtin_expect(!!(et == PyExc_StopIteration), 1)) {
        if (!ev) {
            Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
            value = (&_Py_NoneStruct);
        }

        else if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)((ev))), ((PyTypeObject*)PyExc_StopIteration))), 1)) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(((PyObject*)((value))));
            Py_DECREF(((PyObject*)((ev))));
        }

        else if (__builtin_expect(!!(PyType_HasFeature((Py_TYPE(((PyObject*)((ev))))), ((1UL << 26)))), 0)) {
            if (PyTuple_GET_SIZE(((PyObject*)((ev)))) >= 1) {

                value = ((((PyType_HasFeature((Py_TYPE(((PyObject*)((ev))))), ((1UL << 26)))) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 25244, __PRETTY_FUNCTION__, "PyTuple_Check(ev)")), ((PyTupleObject*)((ev))))->ob_item[(0)]);
                Py_INCREF(((PyObject*)((value))));



            } else {
                Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
                value = (&_Py_NoneStruct);
            }
            Py_DECREF(((PyObject*)((ev))));
        }
        else if (!__Pyx_IsSubtype(Py_TYPE(((PyObject*)((ev)))), (PyTypeObject *)(PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (__builtin_expect(!!(value), 1)) {
            Py_XDECREF(((PyObject*)((tb))));
            Py_DECREF(((PyObject*)((et))));
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestoreInState(__pyx_tstate, et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (__builtin_expect(!!(!PyObject_TypeCheck(((PyObject*)((ev))), ((PyTypeObject*)PyExc_StopIteration))), 0)) {
        __Pyx_ErrRestoreInState(__pyx_tstate, et, ev, tb);
        return -1;
    }
    Py_XDECREF(((PyObject*)((tb))));
    Py_DECREF(((PyObject*)((et))));

    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(((PyObject*)((value))));
    Py_DECREF(((PyObject*)((ev))));
# 25294 "yxdfb/Kynaraa.cpp"
    *pvalue = value;
    return 0;
}
static __inline__ __attribute__ ((__unused__))
void __Pyx_Coroutine_ExceptionClear(_PyErr_StackItem *exc_state) {

    do { __typeof__(exc_state->exc_value)* _tmp_op_ptr = &(exc_state->exc_value); __typeof__(exc_state->exc_value) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
# 25313 "yxdfb/Kynaraa.cpp"
}

static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_UNUSED_VAR(gen);
    if ((0)) {
# 25327 "yxdfb/Kynaraa.cpp"
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}

static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_UNUSED_VAR(gen);
    if ((0)) {
# 25345 "yxdfb/Kynaraa.cpp"
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}

static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_UNUSED_VAR(gen);
    CYTHON_UNUSED_VAR(closing);





    if (value) {





        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    PyThreadState *__pyx_tstate;
    PyThreadState *tstate;
    _PyErr_StackItem *exc_state;
    PyObject *retval;
    ((!self->is_running) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 25374, __PRETTY_FUNCTION__, "!self->is_running"));
    if (__builtin_expect(!!(self->resume_label == 0), 0)) {
        if (__builtin_expect(!!(value && value != (&_Py_NoneStruct)), 0)) {
            return (__Pyx__Coroutine_NotStartedError((PyObject*)self), (PyObject*)__null);
        }
    }
    if (__builtin_expect(!!(self->resume_label == -1), 0)) {
        return (__Pyx__Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing), (PyObject*)__null);
    }

    __pyx_tstate = _PyThreadState_UncheckedGet();
    tstate = __pyx_tstate;



    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {


        PyObject *exc_tb;



        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;



        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            ((f->f_back == __null) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 25404, __PRETTY_FUNCTION__, "f->f_back == NULL"));

            f->f_back = PyThreadState_GetFrame(tstate);







        }

    }

    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
# 25428 "yxdfb/Kynaraa.cpp"
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;

    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = __null;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);

    return retval;
}
static __inline__ __attribute__ ((__unused__)) void __Pyx_Coroutine_ResetFrameBackpointer(_PyErr_StackItem *exc_state) {



    PyObject *exc_tb;

    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);



    if (__builtin_expect(!!(exc_tb), 1)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        do { __typeof__(f->f_back)* _tmp_op_ptr = &(f->f_back); __typeof__(f->f_back) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);

        Py_DECREF(((PyObject*)((exc_tb))));

    }

}
static __inline__ __attribute__ ((__unused__))
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_UNUSED_VAR(gen);
    if (__builtin_expect(!!(!retval), 0)) {
        PyThreadState *__pyx_tstate;
        __pyx_tstate = _PyThreadState_UncheckedGet();
        if (!(__pyx_tstate->current_exception != __null)) {
            PyObject *exc = PyExc_StopIteration;




            PyErr_SetNone(exc);
        }
    }
    return retval;
}

static __inline__ __attribute__ ((__unused__))
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {



    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : (&_Py_NoneStruct), &result) == PYGEN_RETURN) {
        if (Py_IS_TYPE(((PyObject*)(((gen)))), (&PyAsyncGen_Type))) {
            ((result == (&_Py_NoneStruct)) ? (static_cast<void>(0)) : __assert2("yxdfb/Kynaraa.cpp", 25486, __PRETTY_FUNCTION__, "result == Py_None"));
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == (&_Py_NoneStruct)) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {

            _PyGen_SetStopIterationValue(result);
# 25506 "yxdfb/Kynaraa.cpp"
        }
        Py_DECREF(((PyObject*)((result))));
        result = __null;
    }
    return result;

}

static __inline__ __attribute__ ((__unused__))
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = __null;
    do { __typeof__((gen)->yieldfrom)* _tmp_op_ptr = &((gen)->yieldfrom); __typeof__((gen)->yieldfrom) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    __Pyx_PyGen__FetchStopIterationValue(_PyThreadState_UncheckedGet(), &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(((PyObject*)((val))));
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (__builtin_expect(!!(gen->is_running), 0))
        return (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)__null);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;

        if (Py_IS_TYPE(((PyObject*)((yf))), (__pyx_mstate_global->__pyx_GeneratorType))) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
# 25549 "yxdfb/Kynaraa.cpp"
        if (Py_IS_TYPE(((PyObject*)(((yf)))), (&PyGen_Type))) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == (&_Py_NoneStruct) ? __null : value);
        } else


        if (Py_IS_TYPE(((PyObject*)(((yf)))), (&PyCoro_Type))) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == (&_Py_NoneStruct) ? __null : value);
        } else

        {
            if (value == (&_Py_NoneStruct))
                ret = (Py_TYPE(((PyObject*)((yf))))->tp_iternext)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_mstate_global->__pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (__builtin_expect(!!(ret), 1)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = __null;
    int err = 0;

    if (Py_IS_TYPE(((PyObject*)((yf))), (__pyx_mstate_global->__pyx_GeneratorType))) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
# 25604 "yxdfb/Kynaraa.cpp"
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_s_close);
        if (__builtin_expect(!!(!meth), 0)) {
            if (__builtin_expect(!!(PyErr_Occurred()), 0)) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(((PyObject*)((meth))));
            if (__builtin_expect(!!(!retval), 0))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(((PyObject*)((retval))));
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (__builtin_expect(!!(gen->is_running), 0))
        return (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)__null);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;

        if (Py_IS_TYPE(((PyObject*)((yf))), (__pyx_mstate_global->__pyx_GeneratorType))) {
            ret = __Pyx_Generator_Next(yf);
        } else


        if (Py_IS_TYPE(((PyObject*)(((yf)))), (&PyGen_Type))) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, __null);
        } else






            ret = (Py_TYPE(((PyObject*)((yf))))->tp_iternext)(yf);
        gen->is_running = 0;
        if (__builtin_expect(!!(ret), 1)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, (&_Py_NoneStruct), 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (__builtin_expect(!!(gen->is_running), 0))
        return (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)__null);
    if (yf) {
        Py_INCREF(((PyObject*)((yf))));
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        do { __typeof__((gen)->yieldfrom)* _tmp_op_ptr = &((gen)->yieldfrom); __typeof__((gen)->yieldfrom) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
        Py_DECREF(((PyObject*)((yf))));
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, __null, 1);
    if (__builtin_expect(!!(retval), 0)) {
        const char *msg;
        Py_DECREF(((PyObject*)((retval))));
        if ((0)) {
# 25691 "yxdfb/Kynaraa.cpp"
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return __null;
    }
    raised_exception = PyErr_Occurred();
    if (__builtin_expect(!!(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration)), 1)) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(((PyObject*)(((&_Py_NoneStruct)))));
        return (&_Py_NoneStruct);
    }
    return __null;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (__builtin_expect(!!(gen->is_running), 0))
        return (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)__null);
    if (yf) {
        PyObject *ret;
        Py_INCREF(((PyObject*)((yf))));
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(((PyObject*)((yf))));
            do { __typeof__((gen)->yieldfrom)* _tmp_op_ptr = &((gen)->yieldfrom); __typeof__((gen)->yieldfrom) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, __null, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0

            || Py_IS_TYPE(((PyObject*)((yf))), (__pyx_mstate_global->__pyx_GeneratorType))




            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);




        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_s_throw);
            if (__builtin_expect(!!(!meth), 0)) {
                Py_DECREF(((PyObject*)((yf))));
                if (__builtin_expect(!!(PyErr_Occurred()), 0)) {
                    gen->is_running = 0;
                    return __null;
                }
                do { __typeof__((gen)->yieldfrom)* _tmp_op_ptr = &((gen)->yieldfrom); __typeof__((gen)->yieldfrom) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
                gen->is_running = 0;
                goto throw_here;
            }
            if (__builtin_expect(!!(args), 1)) {
                ret = __Pyx_PyObject_Call(meth, args, __null);
            } else {
                PyObject *cargs[4] = {__null, typ, val, tb};
                ret = __Pyx_PyObject_FastCallDict(meth, cargs+1, (size_t)(3 | (static_cast<size_t>(1) << (8 * sizeof(size_t) - 1))), __null);
            }
            Py_DECREF(((PyObject*)((meth))));
        }
        gen->is_running = 0;
        Py_DECREF(((PyObject*)((yf))));
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, __null);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, __null, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = __null;
    PyObject *tb = __null;
    if (__builtin_expect(!!(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)), 0))
        return __null;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_Coroutine_traverse_excstate(_PyErr_StackItem *exc_state, visitproc visit, void *arg) {

    do { if (exc_state->exc_value) { int vret = visit(((PyObject*)((exc_state->exc_value))), arg); if (vret) return vret; } } while (0);





    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    do { if (gen->closure) { int vret = visit(((PyObject*)((gen->closure))), arg); if (vret) return vret; } } while (0);
    do { if (gen->classobj) { int vret = visit(((PyObject*)((gen->classobj))), arg); if (vret) return vret; } } while (0);
    do { if (gen->yieldfrom) { int vret = visit(((PyObject*)((gen->yieldfrom))), arg); if (vret) return vret; } } while (0);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    do { __typeof__(gen->closure)* _tmp_op_ptr = &(gen->closure); __typeof__(gen->closure) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(gen->classobj)* _tmp_op_ptr = &(gen->classobj); __typeof__(gen->classobj) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(gen->yieldfrom)* _tmp_op_ptr = &(gen->yieldfrom); __typeof__(gen->yieldfrom) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);





    do { __typeof__(gen->gi_code)* _tmp_op_ptr = &(gen->gi_code); __typeof__(gen->gi_code) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(gen->gi_frame)* _tmp_op_ptr = &(gen->gi_frame); __typeof__(gen->gi_frame) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(gen->gi_name)* _tmp_op_ptr = &(gen->gi_name); __typeof__(gen->gi_name) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(gen->gi_qualname)* _tmp_op_ptr = &(gen->gi_qualname); __typeof__(gen->gi_qualname) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    do { __typeof__(gen->gi_modulename)* _tmp_op_ptr = &(gen->gi_modulename); __typeof__(gen->gi_modulename) _tmp_old_op = (*_tmp_op_ptr); if (_tmp_old_op != __null) { *_tmp_op_ptr = nullptr; Py_DECREF(((PyObject*)((_tmp_old_op)))); } } while (0);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != __null)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);

        if (__builtin_expect(!!(PyObject_CallFinalizerFromDealloc(self)), 0))




        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
# 25835 "yxdfb/Kynaraa.cpp"
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyThreadState *__pyx_tstate;
    if (gen->resume_label < 0) {
        return;
    }




    __pyx_tstate = _PyThreadState_UncheckedGet();
    __Pyx_ErrFetchInState(__pyx_tstate, &error_type, &error_value, &error_traceback);
# 25867 "yxdfb/Kynaraa.cpp"
    if (__builtin_expect(!!(gen->resume_label == 0 && !error_value), 0)) {
# 25903 "yxdfb/Kynaraa.cpp"
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (__builtin_expect(!!(!res), 0)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(((PyObject*)((res))));
        }
    }
    __Pyx_ErrRestoreInState(__pyx_tstate, error_type, error_value, error_traceback);
# 25933 "yxdfb/Kynaraa.cpp"
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (__builtin_expect(!!(!name), 0)) name = (&_Py_NoneStruct);
    Py_INCREF(((PyObject*)((name))));
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);

    if (__builtin_expect(!!(value == __null || !PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 28)))), 0))



    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) self->gi_name; self->gi_name = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (__builtin_expect(!!(!name), 0)) name = (&_Py_NoneStruct);
    Py_INCREF(((PyObject*)((name))));
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);

    if (__builtin_expect(!!(value == __null || !PyType_HasFeature((Py_TYPE(((PyObject*)((value))))), ((1UL << 28)))), 0))



    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(((PyObject*)((value))));
    do { PyObject *tmp = (PyObject *) self->gi_qualname; self->gi_qualname = value; Py_XDECREF(((PyObject*)((tmp)))); } while (0);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (__builtin_expect(!!(!self->gi_code), 0)) {
            return (&_Py_NoneStruct);
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),
            (PyCodeObject*) self->gi_code,
            __pyx_mstate_global->__pyx_d,
            0
        );
        if (__builtin_expect(!!(!frame), 0))
            return __null;
        self->gi_frame = frame;
    }
    Py_INCREF(((PyObject*)((frame))));
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = ((__pyx_CoroutineObject*)(_PyObject_GC_New(type)));
    if (__builtin_expect(!!(!gen), 0))
        return __null;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(((PyObject*)((closure))));
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = __null;
    gen->yieldfrom = __null;

    gen->gi_exc_state.exc_value = __null;






    gen->gi_exc_state.previous_item = __null;

    gen->gi_weakreflist = __null;
    Py_XINCREF(((PyObject*)((qualname))));
    gen->gi_qualname = qualname;
    Py_XINCREF(((PyObject*)((name))));
    gen->gi_name = name;
    Py_XINCREF(((PyObject*)((module_name))));
    gen->gi_modulename = module_name;
    Py_XINCREF(((PyObject*)((code))));
    gen->gi_code = code;
    gen->gi_frame = __null;
    PyObject_GC_Track(gen);
    return gen;
}


static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {

    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New(); if (__builtin_expect(!!(!globals), 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",



        (&_Py_NoneStruct));

    if (__builtin_expect(!!(result < 0), 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",

        (PyObject*)__pyx_mstate_global->__pyx_GeneratorType);



    if (__builtin_expect(!!(result < 0), 0)) goto ignore;
    if (__builtin_expect(!!(PyDict_SetItemString(globals, "_module", module) < 0), 0)) goto ignore;
    if (__builtin_expect(!!(PyDict_SetItemString(globals, "__builtins__", __pyx_mstate_global->__pyx_b) < 0), 0)) goto ignore;
    result_obj = PyRun_StringFlags((py_code), (257), (globals), (globals), __null);
    if (__builtin_expect(!!(!result_obj), 0)) goto ignore;
    Py_DECREF(((PyObject*)((result_obj))));
    Py_DECREF(((PyObject*)((globals))));
    return module;
ignore:
    Py_XDECREF(((PyObject*)((globals))));
    PyErr_WriteUnraisable(module);
    if (__builtin_expect(!!(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0), 0)) {
        Py_DECREF(((PyObject*)((module))));
        module = __null;
    }



    return module;
}






static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}

static int __Pyx_patch_abc(void) {

    static int abc_patched = 0;
    if (1 && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((3 >= 3) ? "collections.abc" : "collections");
        if (__builtin_expect(!!(!module), 0)) {
            PyErr_WriteUnraisable(__null);
            if (__builtin_expect(!!(PyErr_WarnEx(PyExc_RuntimeWarning, ((3 >= 3) ? "Cython module failed to register with collections.abc module" : "Cython module failed to register with collections module"), 1) < 0), 0)) {



                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (__builtin_expect(!!(!module), 0))
                return -1;
            Py_DECREF(((PyObject*)((module))));
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(((PyObject*)((module))));
        }
        if (!module) {
            PyErr_Clear();
        }
    }



    return 0;
}


static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, 0x0008,
     (char*) "send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration."},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, 0x0001,
     (char*) "throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration."},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, 0x0004,
     (char*) "close() -> raise GeneratorExit inside generator."},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", 14, __builtin_offsetof(__pyx_CoroutineObject, is_running), 1, __null},
    {(char*) "gi_yieldfrom", 6, __builtin_offsetof(__pyx_CoroutineObject, yieldfrom), 1,
     (char*) "object being iterated by 'yield from', or None"},
    {(char*) "gi_code", 6, __builtin_offsetof(__pyx_CoroutineObject, gi_code), 1, __null},
    {(char *) "__module__", 6, __builtin_offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},



    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) "name of the generator", 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) "qualified name of the generator", 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, __null,
     (char*) "Frame of the generator", 0},
    {0, 0, 0, 0, 0}
};
# 26202 "yxdfb/Kynaraa.cpp"
static PyTypeObject __pyx_GeneratorType_type = {
    { { { 1 }, (0) }, (0) },
    "_cython_" "3_0_12" "" "." "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    ( 0 | 0) | (1UL << 14) | (1UL << 0),
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    __builtin_offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,

    0,



    0,

    __Pyx_Coroutine_del,




    0,





    0,







};

static int __pyx_Generator_init(PyObject *module) {



    CYTHON_UNUSED_VAR(module);
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_mstate_global->__pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);

    if (__builtin_expect(!!(!__pyx_mstate_global->__pyx_GeneratorType), 0)) {
        return -1;
    }
    return 0;
}


static unsigned long __Pyx_get_runtime_version(void) {

    return Py_Version & ~0xFFUL;
# 26315 "yxdfb/Kynaraa.cpp"
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (__builtin_expect(!!(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)), 1))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       "Kynaraa",
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(__null, message, 1);
    }
}



static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, __null);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {

        __Pyx_InitString(*t, t->p);
# 26376 "yxdfb/Kynaraa.cpp"
        ++t;
    }
    return 0;
}


static __inline__ __attribute__ ((__unused__)) Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (__builtin_expect(!!(len > (size_t) 9223372036854775807L), 0)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (__builtin_expect(!!(len < 0), 0)) return __null;
    return PyUnicode_Decode(c_str, len, "", __null);
}
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (__builtin_expect(!!(len < 0), 0)) return __null;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static __inline__ __attribute__ ((__unused__)) const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
# 26443 "yxdfb/Kynaraa.cpp"
static __inline__ __attribute__ ((__unused__)) const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
# 26454 "yxdfb/Kynaraa.cpp"
    if (PyObject_TypeCheck(((PyObject*)(((o)))), (&PyByteArray_Type))) {
        *length = PyByteArray_GET_SIZE(((PyObject*)((o))));
        return PyByteArray_AS_STRING(((PyObject*)((o))));
    } else

    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (__builtin_expect(!!(r < 0), 0)) {
            return __null;
        } else {
            return result;
        }
    }
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == ((PyObject*)((&_Py_TrueStruct)));
   if (is_true | (x == ((PyObject*)((&_Py_FalseStruct)))) | (x == (&_Py_NoneStruct))) return is_true;
   else return PyObject_IsTrue(x);
}
static __inline__ __attribute__ ((__unused__)) int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (__builtin_expect(!!(!x), 0)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(((PyObject*)((x))));
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = ((Py_TYPE(((PyObject*)((result)))))->tp_name);

    if (PyType_HasFeature((Py_TYPE(((PyObject*)((result))))), ((1UL << 24)))) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " "%.200s" ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
                                                   ;
            Py_DECREF(((PyObject*)((result))));
            return __null;
        }
                                               ;
        return result;
    }

    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " "%.200s" ")",
                 type_name, type_name, result_type_name);
                                           ;
    Py_DECREF(((PyObject*)((result))));
    return __null;
}
static __inline__ __attribute__ ((__unused__)) PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {

  PyNumberMethods *m;

  const char *name = __null;
  PyObject *res = __null;



  if (__builtin_expect(!!(PyType_HasFeature((Py_TYPE(((PyObject*)((x))))), ((1UL << 24)))), 1))

    return (Py_INCREF(((PyObject*)((x)))), x);

  m = Py_TYPE(((PyObject*)((x))))->tp_as_number;
# 26529 "yxdfb/Kynaraa.cpp"
  if (__builtin_expect(!!(m && m->nb_int), 1)) {
    name = "int";
    res = m->nb_int(x);
  }






  if (__builtin_expect(!!(res), 1)) {



    if (__builtin_expect(!!(!Py_IS_TYPE(((PyObject*)(((res)))), (&PyLong_Type))), 0)) {

        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static __inline__ __attribute__ ((__unused__)) Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
# 26565 "yxdfb/Kynaraa.cpp"
  if (__builtin_expect(!!(Py_IS_TYPE(((PyObject*)(((b)))), (&PyLong_Type))), 1)) {

    if (__builtin_expect(!!(_PyLong_IsCompact((PyLongObject*) b)), 1)) {
        return _PyLong_CompactValue((PyLongObject*) b);
    } else {
      const digit* digits = (((PyLongObject*)b)->long_value.ob_digit);
      const Py_ssize_t size = ((1 - (Py_ssize_t) (((PyLongObject*)b)->long_value.lv_tag & 3)) * ((Py_ssize_t) (((PyLongObject*)b)->long_value.lv_tag >> 3)));
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * 30) {
             return (Py_ssize_t) (((((size_t)digits[1]) << 30) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * 30) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << 30) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * 30) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << 30) | (size_t)digits[1]) << 30) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * 30) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << 30) | (size_t)digits[1]) << 30) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * 30) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << 30) | (size_t)digits[2]) << 30) | (size_t)digits[1]) << 30) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * 30) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << 30) | (size_t)digits[2]) << 30) | (size_t)digits[1]) << 30) | (size_t)digits[0]));
           }
           break;
      }
    }

    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyLong_AsSsize_t(x);
  Py_DECREF(((PyObject*)((x))));
  return ival;
}
static __inline__ __attribute__ ((__unused__)) Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);




  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyLong_AsLong(x);
    Py_DECREF(((PyObject*)((x))));
    return ival;
  }
}
static __inline__ __attribute__ ((__unused__)) PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? (Py_INCREF(((PyObject*)((((PyObject*)((&_Py_TrueStruct))))))), ((PyObject*)((&_Py_TrueStruct)))) : (Py_INCREF(((PyObject*)((((PyObject*)((&_Py_FalseStruct))))))), ((PyObject*)((&_Py_FalseStruct))));
}
static __inline__ __attribute__ ((__unused__)) PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyLong_FromSize_t(ival);
}
